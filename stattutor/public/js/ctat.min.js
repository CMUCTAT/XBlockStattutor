/*
 MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt

 For usage and examples, visit:
 http://pellepim.bitbucket.org/jstz/

 Copyright (c) Jon Nylander
*/
(function(a) {
  var b = function() {
    var a = {"America/Denver":["America/Mazatlan"], "America/Chicago":["America/Mexico_City"], "America/Santiago":["America/Asuncion", "America/Campo_Grande"], "America/Montevideo":["America/Sao_Paulo"], "Asia/Beirut":"Asia/Amman Asia/Jerusalem Europe/Helsinki Asia/Damascus Africa/Cairo Asia/Gaza Europe/Minsk".split(" "), "Pacific/Auckland":["Pacific/Fiji"], "America/Los_Angeles":["America/Santa_Isabel"], "America/New_York":["America/Havana"], "America/Halifax":["America/Goose_Bay"], "America/Godthab":["America/Miquelon"], 
    "Asia/Dubai":["Asia/Yerevan"], "Asia/Jakarta":["Asia/Krasnoyarsk"], "Asia/Shanghai":["Asia/Irkutsk", "Australia/Perth"], "Australia/Sydney":["Australia/Lord_Howe"], "Asia/Tokyo":["Asia/Yakutsk"], "Asia/Dhaka":["Asia/Omsk"], "Asia/Baku":["Asia/Yerevan"], "Australia/Brisbane":["Asia/Vladivostok"], "Pacific/Noumea":["Asia/Vladivostok"], "Pacific/Majuro":["Asia/Kamchatka", "Pacific/Fiji"], "Pacific/Tongatapu":["Pacific/Apia"], "Asia/Baghdad":["Europe/Minsk", "Europe/Moscow"], "Asia/Karachi":["Asia/Yekaterinburg"], 
    "Africa/Johannesburg":["Asia/Gaza", "Africa/Cairo"]}, e = function(a) {
      a = -a.getTimezoneOffset();
      return null !== a ? a : 0;
    }, g = function() {
      var a = e(new Date(2014, 0, 2)), b = e(new Date(2014, 5, 2)), d = a - b;
      return 0 > d ? a + ",1" : 0 < d ? b + ",1,s" : a + ",0";
    }, d = function() {
      if ("undefined" !== typeof Intl && "undefined" !== typeof Intl.DateTimeFormat) {
        var a = Intl.DateTimeFormat();
        if ("undefined" !== typeof a && "undefined" !== typeof a.resolvedOptions) {
          return a.resolvedOptions().timeZone;
        }
      }
    }, f = function n(a, b, d) {
      "undefined" === typeof b && (b = 864E5, d = 36E5);
      var f = (new Date(a.getTime() - b)).getTime();
      a = a.getTime() + b;
      for (var e = (new Date(f)).getTimezoneOffset(), c = null;f < a - d;) {
        var g = new Date(f);
        if (g.getTimezoneOffset() !== e) {
          c = g;
          break;
        }
        f += d;
      }
      return 864E5 === b ? n(c, 36E5, 6E4) : 36E5 === b ? n(c, 6E4, 1E3) : c;
    }, h = function(a, b, d, f) {
      if ("N/A" !== d) {
        return d;
      }
      if ("Asia/Beirut" === b) {
        if ("Africa/Cairo" === f.name && 13983768E5 === a[6].s && 14116788E5 === a[6].e || "Asia/Jerusalem" === f.name && 13959648E5 === a[6].s && 14118588E5 === a[6].e) {
          return 0;
        }
      } else {
        if ("America/Santiago" === b) {
          if ("America/Asuncion" === f.name && 14124816E5 === a[6].s && 1397358E6 === a[6].e || "America/Campo_Grande" === f.name && 14136912E5 === a[6].s && 13925196E5 === a[6].e) {
            return 0;
          }
        } else {
          if ("America/Montevideo" === b) {
            if ("America/Sao_Paulo" === f.name && 14136876E5 === a[6].s && 1392516E6 === a[6].e) {
              return 0;
            }
          } else {
            if ("Pacific/Auckland" === b && "Pacific/Fiji" === f.name && 14142456E5 === a[6].s && 13961016E5 === a[6].e) {
              return 0;
            }
          }
        }
      }
      return d;
    }, k = function(d, f) {
      for (var e = {}, g = b.olson.dst_rules.zones, l = g.length, k = a[f], x = 0;x < l;x++) {
        var C = g[x], D;
        D = g[x];
        for (var y = 0, A = 0;A < d.length;A++) {
          if (D.rules[A] && d[A]) {
            if (d[A].s >= D.rules[A].s && d[A].e <= D.rules[A].e) {
              y = 0, y += Math.abs(d[A].s - D.rules[A].s), y += Math.abs(D.rules[A].e - d[A].e);
            } else {
              y = "N/A";
              break;
            }
            if (864E6 < y) {
              y = "N/A";
              break;
            }
          }
        }
        D = y = h(d, f, y, D);
        "N/A" !== D && (e[C.name] = D);
      }
      for (var r in e) {
        if (e.hasOwnProperty(r) && -1 != k.indexOf(r)) {
          return r;
        }
      }
      return f;
    }, l = function(a) {
      var d = function() {
        for (var a = [], d = 0;d < b.olson.dst_rules.years.length;d++) {
          var e;
          e = b.olson.dst_rules.years[d];
          var c = (new Date(e, 0, 1, 0, 0, 1, 0)).getTime();
          e = (new Date(e, 12, 31, 23, 59, 59)).getTime();
          for (var g = (new Date(c)).getTimezoneOffset(), l = null, h = null;c < e - 864E5;) {
            var k = new Date(c), n = k.getTimezoneOffset();
            n !== g && (n < g && (l = k), n > g && (h = k), g = n);
            c += 864E5;
          }
          e = l && h ? {s:f(l).getTime(), e:f(h).getTime()} : !1;
          a.push(e);
        }
        return a;
      }();
      return function(a) {
        for (var b = 0;b < a.length;b++) {
          if (!1 !== a[b]) {
            return !0;
          }
        }
        return !1;
      }(d) ? k(d, a) : a;
    };
    return {determine:function() {
      var f = d();
      f || (f = b.olson.timezones[g()], "undefined" !== typeof a[f] && (f = l(f)));
      return {name:function() {
        return f;
      }};
    }};
  }();
  b.olson = b.olson || {};
  b.olson.timezones = {"-720,0":"Etc/GMT+12", "-660,0":"Pacific/Pago_Pago", "-660,1,s":"Pacific/Apia", "-600,1":"America/Adak", "-600,0":"Pacific/Honolulu", "-570,0":"Pacific/Marquesas", "-540,0":"Pacific/Gambier", "-540,1":"America/Anchorage", "-480,1":"America/Los_Angeles", "-480,0":"Pacific/Pitcairn", "-420,0":"America/Phoenix", "-420,1":"America/Denver", "-360,0":"America/Guatemala", "-360,1":"America/Chicago", "-360,1,s":"Pacific/Easter", "-300,0":"America/Bogota", "-300,1":"America/New_York", 
  "-270,0":"America/Caracas", "-240,1":"America/Halifax", "-240,0":"America/Santo_Domingo", "-240,1,s":"America/Santiago", "-210,1":"America/St_Johns", "-180,1":"America/Godthab", "-180,0":"America/Argentina/Buenos_Aires", "-180,1,s":"America/Montevideo", "-120,0":"America/Noronha", "-120,1":"America/Noronha", "-60,1":"Atlantic/Azores", "-60,0":"Atlantic/Cape_Verde", "0,0":"UTC", "0,1":"Europe/London", "60,1":"Europe/Berlin", "60,0":"Africa/Lagos", "60,1,s":"Africa/Windhoek", "120,1":"Asia/Beirut", 
  "120,0":"Africa/Johannesburg", "180,0":"Asia/Baghdad", "180,1":"Europe/Moscow", "210,1":"Asia/Tehran", "240,0":"Asia/Dubai", "240,1":"Asia/Baku", "270,0":"Asia/Kabul", "300,1":"Asia/Yekaterinburg", "300,0":"Asia/Karachi", "330,0":"Asia/Kolkata", "345,0":"Asia/Kathmandu", "360,0":"Asia/Dhaka", "360,1":"Asia/Omsk", "390,0":"Asia/Rangoon", "420,1":"Asia/Krasnoyarsk", "420,0":"Asia/Jakarta", "480,0":"Asia/Shanghai", "480,1":"Asia/Irkutsk", "525,0":"Australia/Eucla", "525,1,s":"Australia/Eucla", "540,1":"Asia/Yakutsk", 
  "540,0":"Asia/Tokyo", "570,0":"Australia/Darwin", "570,1,s":"Australia/Adelaide", "600,0":"Australia/Brisbane", "600,1":"Asia/Vladivostok", "600,1,s":"Australia/Sydney", "630,1,s":"Australia/Lord_Howe", "660,1":"Asia/Kamchatka", "660,0":"Pacific/Noumea", "690,0":"Pacific/Norfolk", "720,1,s":"Pacific/Auckland", "720,0":"Pacific/Majuro", "765,1,s":"Pacific/Chatham", "780,0":"Pacific/Tongatapu", "780,1,s":"Pacific/Apia", "840,0":"Pacific/Kiritimati"};
  b.olson.dst_rules = {years:[2008, 2009, 2010, 2011, 2012, 2013, 2014], zones:[{name:"Africa/Cairo", rules:[{e:12199572E5, s:12090744E5}, {e:1250802E6, s:1240524E6}, {e:12858804E5, s:12840696E5}, !1, !1, !1, {e:14116788E5, s:1406844E6}]}, {name:"America/Asuncion", rules:[{e:12050316E5, s:12243888E5}, {e:12364812E5, s:12558384E5}, {e:12709548E5, s:12860784E5}, {e:13024044E5, s:1317528E6}, {e:1333854E6, s:13495824E5}, {e:1364094E6, s:1381032E6}, {e:13955436E5, s:14124816E5}]}, {name:"America/Campo_Grande", 
  rules:[{e:12032172E5, s:12243888E5}, {e:12346668E5, s:12558384E5}, {e:12667212E5, s:1287288E6}, {e:12981708E5, s:13187376E5}, {e:13302252E5, s:1350792E6}, {e:136107E7, s:13822416E5}, {e:13925196E5, s:14136912E5}]}, {name:"America/Goose_Bay", rules:[{e:122559486E4, s:120503526E4}, {e:125704446E4, s:123648486E4}, {e:128909886E4, s:126853926E4}, {e:13205556E5, s:129998886E4}, {e:13520052E5, s:13314456E5}, {e:13834548E5, s:13628952E5}, {e:14149044E5, s:13943448E5}]}, {name:"America/Havana", rules:[{e:12249972E5, 
  s:12056436E5}, {e:12564468E5, s:12364884E5}, {e:12885012E5, s:12685428E5}, {e:13211604E5, s:13005972E5}, {e:13520052E5, s:13332564E5}, {e:13834548E5, s:13628916E5}, {e:14149044E5, s:13943412E5}]}, {name:"America/Mazatlan", rules:[{e:1225008E6, s:12074724E5}, {e:12564576E5, s:1238922E6}, {e:1288512E6, s:12703716E5}, {e:13199616E5, s:13018212E5}, {e:13514112E5, s:13332708E5}, {e:13828608E5, s:13653252E5}, {e:14143104E5, s:13967748E5}]}, {name:"America/Mexico_City", rules:[{e:12250044E5, s:12074688E5}, 
  {e:1256454E6, s:12389184E5}, {e:12885084E5, s:1270368E6}, {e:1319958E6, s:13018176E5}, {e:13514076E5, s:13332672E5}, {e:13828572E5, s:13653216E5}, {e:14143068E5, s:13967712E5}]}, {name:"America/Miquelon", rules:[{e:12255984E5, s:12050388E5}, {e:1257048E6, s:12364884E5}, {e:12891024E5, s:12685428E5}, {e:1320552E6, s:12999924E5}, {e:13520016E5, s:1331442E6}, {e:13834512E5, s:13628916E5}, {e:14149008E5, s:13943412E5}]}, {name:"America/Santa_Isabel", rules:[{e:12250116E5, s:1207476E6}, {e:12564612E5, 
  s:12389256E5}, {e:12885156E5, s:12703752E5}, {e:13199652E5, s:13018248E5}, {e:13514148E5, s:13332744E5}, {e:13828644E5, s:13653288E5}, {e:1414314E6, s:13967784E5}]}, {name:"America/Sao_Paulo", rules:[{e:12032136E5, s:12243852E5}, {e:12346632E5, s:12558348E5}, {e:12667176E5, s:12872844E5}, {e:12981672E5, s:1318734E6}, {e:13302216E5, s:13507884E5}, {e:13610664E5, s:1382238E6}, {e:1392516E6, s:14136876E5}]}, {name:"Asia/Amman", rules:[{e:1225404E6, s:12066552E5}, {e:12568536E5, s:12381048E5}, {e:12883032E5, 
  s:12695544E5}, {e:13197528E5, s:13016088E5}, !1, !1, {e:14147064E5, s:13959576E5}]}, {name:"Asia/Damascus", rules:[{e:12254868E5, s:120726E7}, {e:125685E7, s:12381048E5}, {e:12882996E5, s:12701592E5}, {e:13197492E5, s:13016088E5}, {e:13511988E5, s:13330584E5}, {e:13826484E5, s:1364508E6}, {e:14147028E5, s:13959576E5}]}, {name:"Asia/Dubai", rules:[!1, !1, !1, !1, !1, !1, !1]}, {name:"Asia/Gaza", rules:[{e:12199572E5, s:12066552E5}, {e:12520152E5, s:12381048E5}, {e:1281474E6, s:126964086E4}, {e:1312146E6, 
  s:130160886E4}, {e:13481784E5, s:13330584E5}, {e:13802292E5, s:1364508E6}, {e:14116788E5, s:13959576E5}]}, {name:"Asia/Irkutsk", rules:[{e:12249576E5, s:12068136E5}, {e:12564072E5, s:12382632E5}, {e:12884616E5, s:12697128E5}, !1, !1, !1, !1]}, {name:"Asia/Jerusalem", rules:[{e:12231612E5, s:12066624E5}, {e:1254006E6, s:1238112E6}, {e:1284246E6, s:12695616E5}, {e:131751E7, s:1301616E6}, {e:13483548E5, s:13330656E5}, {e:13828284E5, s:13645152E5}, {e:1414278E6, s:13959648E5}]}, {name:"Asia/Kamchatka", 
  rules:[{e:12249432E5, s:12067992E5}, {e:12563928E5, s:12382488E5}, {e:12884508E5, s:12696984E5}, !1, !1, !1, !1]}, {name:"Asia/Krasnoyarsk", rules:[{e:12249612E5, s:12068172E5}, {e:12564108E5, s:12382668E5}, {e:12884652E5, s:12697164E5}, !1, !1, !1, !1]}, {name:"Asia/Omsk", rules:[{e:12249648E5, s:12068208E5}, {e:12564144E5, s:12382704E5}, {e:12884688E5, s:126972E7}, !1, !1, !1, !1]}, {name:"Asia/Vladivostok", rules:[{e:12249504E5, s:12068064E5}, {e:12564E8, s:1238256E6}, {e:12884544E5, s:12697056E5}, 
  !1, !1, !1, !1]}, {name:"Asia/Yakutsk", rules:[{e:1224954E6, s:120681E7}, {e:12564036E5, s:12382596E5}, {e:1288458E6, s:12697092E5}, !1, !1, !1, !1]}, {name:"Asia/Yekaterinburg", rules:[{e:12249684E5, s:12068244E5}, {e:1256418E6, s:1238274E6}, {e:12884724E5, s:12697236E5}, !1, !1, !1, !1]}, {name:"Asia/Yerevan", rules:[{e:1224972E6, s:1206828E6}, {e:12564216E5, s:12382776E5}, {e:1288476E6, s:12697272E5}, {e:13199256E5, s:13011768E5}, !1, !1, !1]}, {name:"Australia/Lord_Howe", rules:[{e:12074076E5, 
  s:12231342E5}, {e:12388572E5, s:12545838E5}, {e:12703068E5, s:12860334E5}, {e:13017564E5, s:1317483E6}, {e:1333206E6, s:13495374E5}, {e:13652604E5, s:1380987E6}, {e:139671E7, s:14124366E5}]}, {name:"Australia/Perth", rules:[{e:12068136E5, s:12249576E5}, !1, !1, !1, !1, !1, !1]}, {name:"Europe/Helsinki", rules:[{e:12249828E5, s:12068388E5}, {e:12564324E5, s:12382884E5}, {e:12884868E5, s:1269738E6}, {e:13199364E5, s:13011876E5}, {e:1351386E6, s:13326372E5}, {e:13828356E5, s:13646916E5}, {e:14142852E5, 
  s:13961412E5}]}, {name:"Europe/Minsk", rules:[{e:12249792E5, s:12068352E5}, {e:12564288E5, s:12382848E5}, {e:12884832E5, s:12697344E5}, !1, !1, !1, !1]}, {name:"Europe/Moscow", rules:[{e:12249756E5, s:12068316E5}, {e:12564252E5, s:12382812E5}, {e:12884796E5, s:12697308E5}, !1, !1, !1, !1]}, {name:"Pacific/Apia", rules:[!1, !1, !1, {e:13017528E5, s:13168728E5}, {e:13332024E5, s:13489272E5}, {e:13652568E5, s:13803768E5}, {e:13967064E5, s:14118264E5}]}, {name:"Pacific/Fiji", rules:[!1, !1, {e:12696984E5, 
  s:12878424E5}, {e:13271544E5, s:1319292E6}, {e:1358604E6, s:13507416E5}, {e:139005E7, s:1382796E6}, {e:14215032E5, s:14148504E5}]}]};
  "undefined" !== typeof exports ? exports.jstz = b : a.jstz = b;
})(this);
(function(a, b) {
  "object" == typeof module && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
})(this, function() {
  function a(a, b) {
    var d = document.createElement(a || "div"), f;
    for (f in b) {
      d[f] = b[f];
    }
    return d;
  }
  function b(a) {
    for (var b = 1, d = arguments.length;b < d;b++) {
      a.appendChild(arguments[b]);
    }
    return a;
  }
  function c(a, b, d, f) {
    var e = ["opacity", b, ~~(100 * a), d, f].join("-");
    d = .01 + d / f * 100;
    f = Math.max(1 - (1 - a) / b * (100 - d), a);
    var c = n.substring(0, n.indexOf("Animation")).toLowerCase();
    m[e] || (p.insertRule("@" + (c && "-" + c + "-" || "") + "keyframes " + e + "{0%{opacity:" + f + "}" + d + "%{opacity:" + a + "}" + (d + .01) + "%{opacity:1}" + (d + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + f + "}}", p.cssRules.length), m[e] = 1);
    return e;
  }
  function e(a, b) {
    var d = a.style, f, e;
    b = b.charAt(0).toUpperCase() + b.slice(1);
    if (void 0 !== d[b]) {
      return b;
    }
    for (e = 0;e < l.length;e++) {
      if (f = l[e] + b, void 0 !== d[f]) {
        return f;
      }
    }
  }
  function g(a, b) {
    for (var d in b) {
      a.style[e(a, d) || d] = b[d];
    }
    return a;
  }
  function d(a) {
    for (var b = 1;b < arguments.length;b++) {
      var d = arguments[b], f;
      for (f in d) {
        void 0 === a[f] && (a[f] = d[f]);
      }
    }
    return a;
  }
  function f(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }
  function h(a) {
    this.opts = d(a || {}, h.defaults, u);
  }
  function k() {
    function d(b, f) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', f);
    }
    p.addRule(".spin-vml", "behavior:url(#default#VML)");
    h.prototype.lines = function(a, e) {
      function c() {
        return g(d("group", {coordsize:k + " " + k, coordorigin:-h + " " + -h}), {width:k, height:k});
      }
      function l(a, k, m) {
        b(t, b(g(c(), {rotation:360 / e.lines * a + "deg", left:~~k}), b(g(d("roundrect", {arcsize:e.corners}), {width:h, height:e.scale * e.width, left:e.scale * e.radius, top:-e.scale * e.width >> 1, filter:m}), d("fill", {color:f(e.color, a), opacity:e.opacity}), d("stroke", {opacity:0}))));
      }
      var h = e.scale * (e.length + e.width), k = 2 * e.scale * h, m = -(e.width + e.length) * e.scale * 2 + "px", t = g(c(), {position:"absolute", top:m, left:m});
      if (e.shadow) {
        for (m = 1;m <= e.lines;m++) {
          l(m, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
        }
      }
      for (m = 1;m <= e.lines;m++) {
        l(m);
      }
      return b(a, t);
    };
    h.prototype.opacity = function(a, b, d, f) {
      a = a.firstChild;
      f = f.shadow && f.lines || 0;
      a && b + f < a.childNodes.length && (a = (a = (a = a.childNodes[b + f]) && a.firstChild) && a.firstChild) && (a.opacity = d);
    };
  }
  var l = ["webkit", "Moz", "ms", "O"], m = {}, n, p, u = {lines:12, length:7, width:5, radius:10, scale:1, corners:1, color:"#000", opacity:.25, rotate:0, direction:1, speed:1, trail:100, fps:20, zIndex:2E9, className:"spinner", top:"50%", left:"50%", shadow:!1, hwaccel:!1, position:"absolute"};
  h.defaults = {};
  d(h.prototype, {spin:function(b) {
    this.stop();
    var d = this, f = d.opts, e = d.el = a(null, {className:f.className});
    g(e, {position:f.position, width:0, zIndex:f.zIndex, left:f.left, top:f.top});
    b && b.insertBefore(e, b.firstChild || null);
    e.setAttribute("role", "progressbar");
    d.lines(e, d.opts);
    if (!n) {
      var c = 0, l = (f.lines - 1) * (1 - f.direction) / 2, h, k = f.fps, m = k / f.speed, t = (1 - f.opacity) / (m * f.trail / 100), u = m / f.lines;
      (function z() {
        c++;
        for (var a = 0;a < f.lines;a++) {
          h = Math.max(1 - (c + (f.lines - a) * u) % m * t, f.opacity), d.opacity(e, a * f.direction + l, h, f);
        }
        d.timeout = d.el && setTimeout(z, ~~(1E3 / k));
      })();
    }
    return d;
  }, stop:function() {
    var a = this.el;
    a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0);
    return this;
  }, lines:function(d, e) {
    function l(b, d) {
      return g(a(), {position:"absolute", width:e.scale * (e.length + e.width) + "px", height:e.scale * e.width + "px", background:b, boxShadow:d, transformOrigin:"left", transform:"rotate(" + ~~(360 / e.lines * h + e.rotate) + "deg) translate(" + e.scale * e.radius + "px,0)", borderRadius:(e.corners * e.scale * e.width >> 1) + "px"});
    }
    for (var h = 0, k = (e.lines - 1) * (1 - e.direction) / 2, m;h < e.lines;h++) {
      m = g(a(), {position:"absolute", top:1 + ~(e.scale * e.width / 2) + "px", transform:e.hwaccel ? "translate3d(0,0,0)" : "", opacity:e.opacity, animation:n && c(e.opacity, e.trail, k + h * e.direction, e.lines) + " " + 1 / e.speed + "s linear infinite"}), e.shadow && b(m, g(l("#000", "0 0 4px #000"), {top:"2px"})), b(d, b(m, l(f(e.color, h), "0 0 1px rgba(0,0,0,.1)")));
    }
    return d;
  }, opacity:function(a, b, d) {
    b < a.childNodes.length && (a.childNodes[b].style.opacity = d);
  }});
  if ("undefined" !== typeof document) {
    p = function() {
      var d = a("style", {type:"text/css"});
      b(document.getElementsByTagName("head")[0], d);
      return d.sheet || d.styleSheet;
    }();
    var t = g(a("group"), {behavior:"url(#default#VML)"});
    !e(t, "transform") && t.adj ? k() : n = e(t, "animation");
  }
  return h;
});
var CTATCanvasComponent = function(a) {
  var b = this, c = [];
  this.addShape = function(a) {
    c.push(a);
  };
  this.hideShape = function(a) {
    for (var b = 0;b < c.length;b++) {
      if (c[b].getName() == a) {
        c[b].modifyCanvasCSS("visibility", "hidden");
        break;
      }
    }
  };
  this.showShape = function(a) {
    for (var b = 0;b < c.length;b++) {
      if (c[b].getName() == a) {
        c[b].modifyCanvasCSS("visibility", "visible");
        break;
      }
    }
  };
  this.hideComponent = function() {
    for (var a = 0;a < c.length;a++) {
      c[a].modifyCanvasCSS("visibility", "hidden");
    }
  };
  this.showComponent = function() {
    for (var a = 0;a < c.length;a++) {
      c[a].modifyCanvasCSS("visibility", "visible");
    }
  };
  this.moveShape = function(a, b, d) {
    for (var f = 0;f < c.length;f++) {
      if (c[f].getName() == a) {
        c[f].modifyCanvasCSS("left", b + "px");
        c[f].modifyCanvasCSS("top", d + "px");
        break;
      }
    }
  };
  this.moveComponent = function(a, b) {
    for (var d = 0;d < c.length;d++) {
      c[d].modifyCanvasCSS("left", a + "px"), c[d].modifyCanvasCSS("top", b + "px");
    }
  };
  this.removeShape = function(a) {
    for (var b = 0, d = 0;d < c.length;d++) {
      if (c[d].getName() == a) {
        b = d;
        break;
      }
    }
    c[b].detatchCanvas();
    c.splice(b, 1);
  };
  this.removeComponent = function() {
    for (;0 < c.length;) {
      b.removeShape(c[0].getName());
    }
  };
};
var CTATCSS = function() {
  var a = 0, b = [], c = 0, e = [], g = 0, d = [];
  this.resetSelectors = function() {
    c = 0;
    e = [];
    e[c] = [];
  };
  this.resetCSSStringArray = function() {
    d = [];
    g = 0;
  };
  this.clearCSS = function() {
    this.resetSelectors();
    this.resetCSSStringArray();
    b = [];
    a = 0;
  };
  this.addStringCSS = function(a) {
    d[g] = a;
    g++;
  };
  this.addCSSAttribute = function(d, e) {
    b[a] = d;
    b[a + 1] = e;
    a += 2;
  };
  this.removeStringCSS = function(a) {
    a = d.indexOf(a);
    0 <= a && d.splice(a, 1);
  };
  this.removeCSSAttribute = function(a) {
    a = b.indexOf(a);
    0 <= a && b.splice(a, 2);
  };
  this.modifyCSSAttribute = function(a, d) {
    var e = b.indexOf(a);
    -1 == e ? this.addCSSAttribute(a, d) : b[e + 1] = d;
  };
  this.addSelector = function(a) {
    e[c] = [];
    e[c][0] = a;
    c++;
  };
  this.addSelectorAttribute = function(a, b, d) {
    var g = 1;
    a: {
      if (0 === c) {
        a = 0;
      } else {
        for (var m = 0;m < e.length && null !== e[m][0];m++) {
          if (e[m][0] == a) {
            a = m;
            break a;
          }
        }
        a = -1;
      }
    }
    for (;void 0 !== e[a][g];) {
      g++;
    }
    e[a][g] = b;
    e[a][g + 1] = d;
  };
  this.toCSSString = function() {
    for (var a = "", c = 0;c < e.length;c++) {
      for (var a = a + (e[c][0] + " { "), g = 1;g < e[c].length;g++) {
        a += e[c][g], a = 0 === g % 2 ? a + "; " : a + ": ";
      }
      a += " }; ";
    }
    for (c = 0;c < b.length;c++) {
      a += b[c], a = 0 === c % 2 ? a + ": " : a + "; ";
    }
    for (c = 0;c < d.length;c++) {
      a += d[c] + " ";
    }
    return a;
  };
};
var CTATGlobals = {tutorRunning:!1, Visual:{}, Font:{}, Tab:{Tracker:1, Focus:null, previousFocus:null}, NameSpace:{svg:"http://www.w3.org/2000/svg", xml:"http://www.w3.org/2000/xmlns/", xlink:"http://www.w3.org/1999/xlink", ev:"http://www.w3.org/2001/xml-events", mathml:"http://www.w3.org/1998/Math/MathML"}, EncodedParams:{authenticity_token:"authenticity_token", info:"info", question_file:"question_file", skills:"skills"}}, useDebugging;
void 0 === useDebugging && (useDebugging = !1);
var useDebuggingBasic = !1, debugPointer = null, globalCommDisabled = !1, customconsole = null, lastMessage = !1, noScrim = !1, version = "4.0.0-alpha.1", contextGUID = "", orientation = "portrait", ctatcontainer = "container", ctatcanvas = null, lineCounter = 0, windowPadding = 4, currentComponentPointer = null, movieclips = [], startStateHandlers = [], inStartState = !1, globalDebugger = null, correctColor = "#00cc00", incorrectColor = "#ff0000", highlightColor = "#ffff00", hintColor = "#ffff00", 
canvasCalibrate = 5, scriptElement = "", flashVars = null, commShell = null, mobileAPI = null, skillSet = null, aVars = null;
CTATGlobals.interfaceElement = null;
var commLibrary = CTATGlobals.selectedTextInput = null, commLMSService = null, commMessageBuilder = null, commMessageHandler = null, commLogMessageBuilder = null, commLoggingLibrary = null, logHintSAI = null, nameTranslator = null, hints = [], hintIndex = 0, caseInsensitive = !0, unordered = !0, lockWidget = !0, highlightRightSelection = !0;
CTATGlobals.suppressStudentFeedback = !1;
CTATGlobals.confirmDone = !1;
var globalGlowStringContent = "0px 0px 15px 5px rgba(255, 255, 0, 1.0)", globalGlowString = "-webkit-box-shadow: " + globalGlowStringContent + "; -moz-box-shadow: " + globalGlowStringContent + "; box-shadow: " + globalGlowStringContent + "; ", globalCorrectString = "-webkit-box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); -moz-box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); ", globalInCorrectString = "-webkit-box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); -moz-box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); ";
CTATGlobals.Visual = {hint_color:hintColor, highlight_color:highlightColor, correct_color:correctColor, incorrect_color:incorrectColor, hint_glow:"0px 0px 15px 5px " + hintColor, highlight_glow:"0px 0px 15px 5px " + highlightColor, HintGlowString:globalGlowString, BackgroundColor:"#ffffff", BorderColor:"#cccccc", correct_glow:"0px 0px 15px 5px " + correctColor, incorrect_glow:"0px 0px 15px 5px " + incorrectColor};
var globalBackgroundColor = "#ffffff", globalBorderColor = "#cccccc", globalFontColor = "#000000", globalFontFamily = "Verdana", globalFontSize = 9;
CTATGlobals.Font = {color:globalFontColor, family:globalFontFamily, size:globalFontSize};
var globalShowBorder = !1, globalAlign = "left";
CTATGlobals.Align = globalAlign;
var globalBorderString = "1px solid", dialogDiv = null, incompatibleBrowserMessage = "Your browser does not support CTAT. Please update or replace your browser.", detailedFeedback = !0, oliMessageHandler = null, oliComm = null, oliCommLibrary = null, oliDriver = null;
function enableDetailedFeedback(a) {
  detailedFeedback = a;
}
;var CTATStringUtil = function() {
  this.String2Boolean = function(a) {
    switch(a) {
      case "0":
      ;
      case "false":
      ;
      case "no":
      ;
      case "FALSE":
      ;
      case "NO":
      ;
      case "No":
        return !1;
    }
    return !0;
  };
  this.replaceString = function(a, b, c) {
    return a.replace(b, c);
  };
};
"undefined" !== typeof module && (module.exports = CTATStringUtil);
var CTATConfig = {Options:{}, addProperty:function(a, b, c, e) {
  c = c || b[0];
  Object.defineProperty(CTATConfig, a, {enumerable:!0, configurable:!1, writable:!e, value:c.toLowerCase()});
  var g = {};
  b.forEach(function(b) {
    g[b] = b.toLowerCase();
    Object.defineProperty(CTATConfig, a + "_is_" + b, {enumerable:!1, writable:!1, value:function() {
      return CTATConfig[this.prop].toLowerCase() == this.val;
    }.bind({prop:a, val:g[b]})});
  });
  CTATConfig.Options[a] = g;
}};
CTATConfig.addProperty("platform", ["CTAT", "Google", "Undefined"], "CTAT", !0);
CTATConfig.addProperty("external", ["Google", "LTI", "SCORM", "None"], "None");
CTATConfig.addProperty("parserType", ["XML", "JSON"], "XML");
"undefined" !== typeof module && (module.exports = CTATConfig);
var CTAT = {ToolTutor:{interfaceMessages:[], tutorMessages:[]}};
Object.defineProperty(CTAT.ToolTutor, "message_handler", {enumerable:!0, get:function() {
  if (window.hasOwnProperty("getInterfaceObject") && "function" === typeof window.getInterfaceObject) {
    return window.getInterfaceObject();
  }
  if (window.hasOwnProperty("interfaceObject")) {
    return window.interfaceObject;
  }
  this.hasOwnProperty("_interface") || (this._interface = null);
  return this._interface;
}, set:function(a) {
  window.hasOwnProperty("interfaceObject") ? window.interfaceObject = a : this._interface = a;
  return a;
}});
Object.defineProperty(CTAT.ToolTutor, "tutor", {enumerable:!0, get:function() {
  if (window.hasOwnProperty("getTutorObject") && "function" === typeof window.getTutorObject) {
    return window.getTutorObject();
  }
  if (window.hasOwnProperty("tutorObject")) {
    return window.tutorObject;
  }
  this.hasOwnProperty("_tutor") || (this._tutor = null);
  return this._tutor;
}, set:function(a) {
  window.hasOwnProperty("tutorObject") ? window.tutorObject = a : this._tutor = a;
  return a;
}});
CTAT.ToolTutor.registerTutor = function(a) {
  if (window.hasOwnProperty("registerTutor") && "function" === typeof window.registerTutor) {
    return window.registerTutor(a);
  }
  if (this.tutor = a) {
    for (;0 < this.tutorMessages.length;) {
      this.sendToTutor(this.tutorMessages.shift());
    }
  }
};
CTAT.ToolTutor.sendToInterface = function(a) {
  ctatdebug("CTAT.ToolTutor.sendToInterface()\n  " + a);
  return window.hasOwnProperty("sendToInterface") && "function" === typeof window.sendToInterface ? window.sendToInterface.apply(null, arguments) : this.message_handler ? this.message_handler.receiveFromTutor(a) : commMessageHandler ? commMessageHandler.processMessage(a) : this.interfaceMessages.push(a);
};
CTAT.ToolTutor.registerInterface = function(a) {
  if (window.hasOwnProperty("registerInterface") && "function" === typeof window.registerInterface) {
    return window.registerInterface(a);
  }
  "string" === typeof a && (a = document.getElementById(a));
  if (this.message_handler = a) {
    for (;0 < this.interfaceMessages.length;) {
      this.sendToInterface(this.interfaceMessages.shift());
    }
  }
};
CTAT.ToolTutor.sendToTutor = function(a) {
  return window.hasOwnProperty("sendToTutor") && "function" === typeof window.sendToTutor ? window.sendToTutor(a) : this.tutor ? this.tutor.receiveFromInterface(a) : this.tutorMessages.push(a);
};
CTAT.ComponentRegistry = {};
Object.defineProperty(CTAT.ComponentRegistry, "addComponentType", {enumerable:!1, value:function(a, b) {
  "string" == typeof a && (this.hasOwnProperty(a) ? alert(a + " is already a registered component") : this[a] = b);
}});
CTAT.Math = {LeastCommonMultiple:function(a, b) {
  return a * b / CTAT.Math.GreatestCommonDivisor(a, b);
}, GreatestCommonDivisor:function(a, b) {
  if (0 > a || 0 > b) {
    return CTAT.Math.GreatestCommonDivisor(Math.abs(a), Math.abs(b));
  }
  if (1 === a || 1 === b) {
    return 1;
  }
  if (0 === a) {
    return b;
  }
  if (0 === b) {
    return a;
  }
  var c = function(a, b) {
    return b ? c(b, a % b) : a;
  };
  return c(a, b);
}, round10:function(a, b) {
  if ("undefined" === typeof b || 0 === Number(b)) {
    return Math.round(a);
  }
  a = Number(a);
  b = Number(b);
  if (isNaN(a) || "number" !== typeof b || 0 !== b % 1) {
    return NaN;
  }
  a = a.toString().split("e");
  a = Math.round(Number(a[0]) + "e" + (a[1] ? Number(a[1]) - b : -b));
  a = a.toString().split("e");
  return Number(a[0] + "e" + (a[1] ? Number(a[1]) + b : b));
}, precision:4, round:function(a) {
  return CTAT.Math.round10(a, -CTAT.Math.precision);
}, rad2deg:function(a) {
  return CTAT.Math.round(180 * a / Math.PI);
}, deg2rad:function(a) {
  return a * Math.PI / 180;
}};
CTAT.Math.Fraction = function(a, b) {
  this._numerator = 0;
  this._denominator = 1;
  this.set(a, b);
};
CTAT.Math.Fraction.prototype = Object.create(CTAT.Math.Fraction.prototype, {numerator:{get:function() {
  return this._numerator;
}, set:function(a) {
  this._numerator = a;
}}, denominator:{get:function() {
  return this._denominator;
}, set:function(a) {
  this._denominator = a;
}}, toString:{value:function() {
  return 1 === this.denominator ? String(this._numerator) : String(this._numerator) + "/" + String(this._denominator);
}}, valueOf:{value:function() {
  return this.numerator / this.denominator;
}}, fromString:{value:function(a) {
  var b = a.match(/(\d*\.?\d*)\s*\/\s*(\d*\.?\d*)/);
  b ? (this._numerator = Number(b[1]), this._denominator = Number(b[2])) : this.fromValue(a);
}}, fromValue:{value:function(a) {
  this._numerator = Number(a.valueOf());
  this._denominator = 1;
}}, toMathML:{value:function() {
  var a = document.createElementNS("http://www.w3.org/1998/Math/MathML", "math"), b = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mn");
  b.textContent = this.numerator;
  if (1 == this.denominator) {
    a.appendChild(b);
  } else {
    var c = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mfrac"), e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mrow");
    e.appendChild(b);
    c.appendChild(e);
    b = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mrow");
    e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mn");
    e.textContent = this.denominator;
    b.appendChild(e);
    c.appendChild(b);
    a.appendChild(c);
  }
  return a;
}}, is_proper:{get:function() {
  return Math.abs(this._numerator) < Math.abs(this._denominator);
}}, whole_part:{get:function() {
  return Math.floor(this.valueOf());
}}, remainder_part:{get:function() {
  return new CTAT.Math.Fraction(this._numerator % this._denominator, this._denominator);
}}, set_denominator:{value:function(a) {
  this._numerator = this.numerator * a / this.denominator;
  1E-9 > Math.abs(this.numerator - Math.round(this.numerator)) && (this.numerator = Math.round(this.numerator));
  this._denominator = a;
  return this;
}}, scale:{value:function(a) {
  this._numerator *= a;
  this._denominator = 0 === a ? 1 : Math.abs(this._denominator * a);
}}, set:{value:function(a, b) {
  this._numerator = 0;
  this._denominator = 1;
  "undefined" !== typeof a && b ? (this.numerator = "number" === typeof a ? a : "string" === typeof a ? Number(a) : a ? a.valueOf() : 0, this.denominator = "number" === typeof b ? b : "string" === typeof b ? Number(b) : b.valueOf()) : a && (a instanceof CTAT.Math.Fraction ? (this.numerator = a.numerator, this.denominator = a.denominator) : "number" === typeof a ? (this.numerator = a, this.denominator = 1) : "string" === typeof a ? this.fromString(a) : (this.numerator = a ? a.valueOf() : 0, this.denominator = 
  1));
  isNaN(this._numerator) && (this._numerator = 0);
  isNaN(this._denominator) && (this._denominator = 1);
  return this;
}}, reduce:{value:function() {
  var a = CTAT.Math.GreatestCommonDivisor(this.numerator, this.denominator);
  this._numerator /= a;
  this._denominator /= a;
  return this;
}}, reduced:{value:function() {
  var a = new CTAT.Math.Fraction(this);
  a.reduce();
  return a;
}}, reciprocal:{value:function() {
  return new CTAT.Math.Fraction(this.denominator, this.numerator);
}}, negative:{value:function() {
  return new CTAT.Math.Fraction(-this.numerator, this.denominator);
}}, add:{value:function(a) {
  var b = new CTAT.Math.Fraction;
  a instanceof CTAT.Math.Fraction ? 0 === this.numerator || isNaN(this.numerator) ? b.set(a.numerator, a.denominator) : 0 === a.numerator || isNaN(a.numerator) ? b.set(this.numerator, this.denominator) : this.denominator == a.denominator ? b.set(this.numerator + a.numerator, this.denominator) : (b.set(this.numerator * a.denominator + a.numerator * this.denominator, this.denominator * a.denominator), b.reduce()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), b = this.add(a)) : b.set(a.valueOf() * 
  this.denominator + this.numerator, this.denominator);
  return b;
}}, subtract:{value:function(a) {
  return a instanceof CTAT.Math.Fraction ? this.add(a.negative()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), this.add(a.negative())) : this.add(-a.valueOf());
}}, multiply:{value:function(a) {
  a instanceof CTAT.Math.Fraction ? (a = new CTAT.Math.Fraction(this.numerator * a.numerator, this.denominator * a.denominator), a.reduce()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), a = this.multiply(a)) : (a = new CTAT.Math.Fraction(a.valueOf() * this.numerator, this.denominator), a.reduce());
  return a;
}}, divide:{value:function(a) {
  return a instanceof CTAT.Math.Fraction ? this.multiply(a.reciprocal()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), this.multiply(a.reciprocal())) : this.multiply(new CTAT.Math.Fraction(1, a.valueOf()));
}}, equals:{value:function(a) {
  return CTAT.Math.round(this.valueOf()) === CTAT.Math.round(a.valueOf());
}}, deepEquals:{value:function(a) {
  return a instanceof CTAT.Math.Fraction && this.numerator === a.numerator && this.denominator === a.denominator;
}}, clone:{value:function() {
  return new CTAT.Math.Fraction(this.numerator, this.denominator);
}}});
CTAT.Math.Fraction.FromString = function(a) {
  var b = new CTAT.Math.Fraction;
  b.setFromString(String(a));
  return b;
};
CTAT.Math.Fraction.FromNumber = function(a) {
  a = new CTAT.Math.Fraction(a);
  a.reduce();
  return a;
};
CTAT.Math.Fraction.Sum = function() {
  for (var a = new CTAT.Math.Fraction, b = 0;b < arguments.length;b++) {
    a = a.add(arguments[b]);
  }
  return a;
};
CTAT.Math.Fraction.Product = function() {
  for (var a = new CTAT.Math.Fraction(1, 1), b = 0;b < arguments.length;b++) {
    a = a.multiply(arguments[b]);
  }
  return a;
};
CTAT.Geom = {};
CTAT.Geom.Point = {};
try {
  new DOMPoint;
} catch (a) {
  if (console.log("error on new DOMPoint():", a, typeof a), a instanceof ReferenceError || a instanceof TypeError) {
    DOMPoint = function(b, c, e, g) {
      this.z = this.y = this.x = 0;
      this.w = 1;
      if (b instanceof DOMPoint) {
        for (var d in b) {
          this[d] = b[d];
        }
      } else {
        this.x = b || 0, this.y = c || 0, this.z = e || 0, this.w = g || 1;
      }
    };
  }
}
CTAT.Geom.Point.useDOMMatrix = !0;
try {
  new DOMMatrix;
} catch (a) {
  a instanceof ReferenceError && (CTAT.Geom.Point.useDOMMatrix = !1);
}
CTAT.Geom.Point.add = function() {
  if (CTAT.Geom.Point.useDOMMatrix) {
    for (var a = new DOMMatrix, b, c = 0;c < arguments.length;c++) {
      b = arguments[c], a.translateSelf(b.x / b.w, b.y / b.w, b.z / b.w);
    }
    return a.transformPoint(new DOMPoint);
  }
  return Array.prototype.reduce.call(arguments, function(a, b) {
    for (var d in a) {
      "w" != d && 0 !== b[d] && (a[d] += b[d] / b.w);
    }
    return a;
  }, new DOMPoint);
};
Object.defineProperty(DOMPoint.prototype, "add", {enumerable:!1, value:function(a) {
  return CTAT.Geom.Point.useDOMMatrix ? (new DOMMatrix).translate(a.x / a.w, a.y / a.w, a.z / a.w).transformPoint(this) : CTAT.Geom.Point.add(this, a);
}});
CTAT.Geom.Point.angle = function(a, b) {
  return Math.acos(DOMPoint.dot(a, b) / (a.magnitude * b.magnitude));
};
CTAT.Geom.Point.angle_degrees = function(a, b) {
  return CTAT.Math.rad2deg(CTAT.Geom.Point.angle(a, b));
};
CTAT.Geom.Point.angle_between_2d = function(a, b) {
  return CTAT.Math.rad2deg(Math.atan2(b.y, b.x) - Math.atan2(a.y, a.x));
};
Object.defineProperty(DOMPoint.prototype, "clone", {value:function() {
  return new DOMPoint(this);
}});
CTAT.Geom.Point.distance = function(a, b) {
  var c = CTAT.Geom.Point.add(a, CTAT.Geom.Point.scale(b, -1));
  return Math.sqrt(CTAT.Geom.Point.dot(c, c));
};
Object.defineProperty(DOMPoint.prototype, "distance", {value:function(a) {
  return CTAT.Geom.Point.distance(this, a);
}});
CTAT.Geom.Point.dot = function(a, b) {
  return (a.x * b.x + a.y * b.y + a.z * b.z) / (a.w * b.w);
};
CTAT.Geom.Point.equals = function(a, b) {
  var c = !0, e;
  for (e in a) {
    if (e in b ? "w" != e && (c &= a[e] / a.w == b[e] / b.w) : c = !1, !c) {
      break;
    }
  }
  return c;
};
CTAT.Geom.Point.interpolate = function(a, b, c) {
  return CTAT.Geom.Point.add(a.scale(c), b.scale(1 - c));
};
Object.defineProperty(DOMPoint.prototype, "magnitude", {enumerable:!1, get:function() {
  return CTAT.Math.round(Math.sqrt(CTAT.Geom.Point.dot(this, this)));
}});
Object.defineProperty(DOMPoint.prototype, "normalize", {value:function(a) {
  return this.scale((a ? a : 1) / this.magnitude);
}});
CTAT.Geom.Point.scale = function(a, b) {
  if (CTAT.Geom.Point.useDOMMatrix) {
    return (new DOMMatrix).scale(b).transformPoint(a);
  }
  var c = new DOMPoint(a), e;
  for (e in c) {
    "w" != e && (c[e] = CTAT.Math.round(a[e] * b));
  }
  return c;
};
Object.defineProperty(DOMPoint.prototype, "scale", {value:function(a) {
  return CTAT.Geom.Point.scale(this, a);
}});
CTAT.Geom.Point.polar = function(a, b) {
  return new DOMPoint(CTAT.Math.round(a * Math.cos(b)), CTAT.Math.round(a * Math.sin(b)));
};
CTAT.Geom.Point.is_on_line = function(a, b, c) {
  return 1E-4 > Math.abs(a.distance(c) + b.distance(c) - a.distance(b));
};
CTAT.Geom.Point.circle_intersection = function(a, b, c, e) {
  b = b.add(a.scale(-1)).normalize();
  var g = CTAT.Geom.Point.dot(b, c.add(a.scale(-1))), d = a.add(b.scale(g));
  c = CTAT.Geom.Point.distance(c, d);
  return c < e ? (e = Math.sqrt(e * e - c * c), [a.add(b.scale(g - e)), a.add(b.scale(g + e))]) : c == e ? [d] : [];
};
CTAT.Geom.Point.to2DString = function(a, b) {
  var c = [a.x / a.w, a.y / a.w].join();
  b && (c = "(" + c + ")");
  return c;
};
CTAT.Geom.Rectangle = {};
try {
  new DOMRect;
} catch (a) {
  if (console.log("error on new DOMRect():", a, typeof a), a instanceof ReferenceError || a instanceof TypeError) {
    DOMRect = function(b, c, e, g) {
      this.x = b || 0;
      this.y = c || 0;
      this.width = e || 0;
      this.height = g || 0;
      return this;
    };
  }
}
"left" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "left", {get:function() {
  return Math.min(this.x, this.x + this.width);
}});
"right" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "right", {get:function() {
  return Math.max(this.x, this.x + this.width);
}});
"top" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "top", {get:function() {
  return Math.min(this.y, this.y + this.height);
}});
"bottom" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "bottom", {get:function() {
  return Math.max(this.y, this.y + this.height);
}});
CTAT.Geom.Rectangle.contains = function(a, b, c) {
  var e = CTAT.Geom.Rectangle.contains;
  if (b instanceof DOMRect) {
    return e(a, b.left, b.top) & e(a, b.right, b.bottom);
  }
  if (b instanceof DOMPoint) {
    var g = !0;
    if (c instanceof DOMPoint) {
      g = e(a, c.x / c.w, c.y / c.w);
    } else {
      if ("number" == typeof c) {
        return e(a, b.x - c, b.y - c) & e(a, b.x + c, b.y + c);
      }
    }
    return g & e(a, b.x, b.y);
  }
  return a.left <= b & a.right >= b & a.top <= c & a.bottom >= c;
};
Object.defineProperty(DOMRect.prototype, "contains", {value:function(a, b) {
  return CTAT.Geom.Rectangle.contains(this, a, b);
}});
Object.defineProperty(DOMRect.prototype, "clone", {value:function() {
  return new DOMRect(this.x, this.y, this.width, this.height);
}});
Object.defineProperty(DOMRect.prototype, "copyFrom", {value:function(a) {
  this.x = a.x;
  this.y = a.y;
  this.width = a.width;
  this.height = a.height;
  return this;
}});
CTAT.Geom.Rectangle.equals = function(a, b) {
  return a.left == b.left && a.top == b.top && a.right == b.right && a.bottom == b.bottom;
};
CTAT.Geom.Rectangle.inflate = function(a, b, c) {
  b = b ? b : 0;
  c = c ? c : 0;
  b instanceof DOMPoint && (c = b.y, b = b.x);
  a = a.clone();
  a.x -= b;
  a.y -= c;
  a.width += 2 * b;
  a.height += 2 * c;
  return a;
};
CTAT.Geom.Rectangle.isEmpty = function(a) {
  return 0 === a.width || 0 === a.height;
};
CTAT.Geom.Rectangle.setEmpty = function(a) {
  a.x = 0;
  a.y = 0;
  a.width = 0;
  a.height = 0;
  return a;
};
CTAT.Geom.Rectangle.setTo = function(a, b, c, e, g) {
  a.x = b;
  a.y = c;
  a.width = e;
  a.height = g;
  return a;
};
CTAT.Geom.Rectangle.offset = function(a, b, c) {
  b = b ? b : 0;
  c = c ? c : 0;
  b instanceof DOMPoint && (c = b.y, b = b.x);
  a = a.clone();
  a.x += b;
  a.y += c;
  return a;
};
CTAT.Geom.Rectangle.union = function(a, b) {
  var c = new DOMRect;
  c.x = Math.min(a.x, b.x);
  c.y = Math.min(a.y, b.y);
  c.width = Math.max(a.right, b.right) - c.x;
  c.height = Math.max(a.bottom, b.bottom) - c.y;
  return c;
};
var CTATArgument = function() {
  var a = "Undefined", b = "String", c = "text";
  this.setValue = function(b) {
    a = b;
  };
  this.getValue = function() {
    return a;
  };
  this.setType = function(a) {
    b = a;
  };
  this.getType = function() {
    return b;
  };
  this.setFormat = function(a) {
    c = a;
  };
  this.getFormat = function() {
    return c;
  };
};
CTATArgument.prototype.clone = function() {
  var a = new CTATArgument;
  a.setValue(this.getValue());
  a.setType(this.getType());
  a.setFormat(this.getFormat());
  return a;
};
"undefined" !== typeof module && (module.exports = CTATArgument);
var CTATComponentReference = function(a, b) {
  var c = a, e = b;
  this.setElement = function(a) {
    c = a;
  };
  this.getElement = function() {
    return c;
  };
  this.setDiv = function(a) {
    e = a;
  };
  this.getDiv = function() {
    return e;
  };
};
CTATComponentReference.components = {};
CTATComponentReference.list = function() {
  for (var a in CTATComponentReference.components) {
    var b = CTATComponentReference.components[a];
    ctatdebug("Component: " + b.getElement().getName() + ", with div: " + b.getDiv().id);
  }
};
CTATComponentReference.getComponentFromID = function(a) {
  var b = CTATComponentReference.components;
  return b.hasOwnProperty(a) ? (a = b[a], a.getElement() ? a.getElement() : null) : null;
};
CTATComponentReference.add = function(a, b) {
  var c = new CTATComponentReference(a, b);
  return CTATComponentReference.components[c.getDiv().getAttribute("id")] = c;
};
var xblockRuntime = null, xblockElement = null, xblockpointer = null;
function setVariable(a, b) {
  console.log("setVariable (" + a + ")");
  var c = window.btoa(b);
  console.log("Constructed xblock handler url: " + xblockRuntime.handlerUrl(xblockElement, "ctat_set_variable"), JSON.stringify({aVariable:c}));
  $.ajax({type:"POST", url:xblockRuntime.handlerUrl(xblockElement, "ctat_set_variable"), data:JSON.stringify({aVariable:c}), success:function(a) {
    console.log("success");
  }, error:function(a, b, d) {
    console.log("Error calling XBlock handler: " + d);
  }});
}
function getVariable(a) {
  console.log("getVariable (" + a + ")");
  return window.atob(window[a]);
}
function setSkillString(a) {
  console.log("setSkillString ()");
  setVariable("skillstring", a);
}
function getSkillString() {
  console.log("getSkillString ()");
  return getVariable("skillstring");
}
function gradeStudent(a, b) {
  console.log("gradeStudent (" + a + ", " + b + ")");
  var c = xblockRuntime.handlerUrl(xblockElement, "ctat_grade");
  $.post(c, JSON.stringify({value:a, max_value:b})).success(function() {
    console.log("ctat_grade succeeded");
  });
}
function CTATXBlock(a, b) {
  console.log("CTATXBlock (" + a + "," + b + ")");
  CTATTarget = "XBlock";
  has_score = !0;
  xblockRuntime = a;
  xblockElement = b;
  xblockpointer = this;
  new CTATXML;
  new CTATCommLibrary;
  this.runXBlockDiagnostics = function(a, b) {
    console.log("runXBlockDiagnostics (" + b + ")");
    if (a) {
      for (var g in a) {
        a.hasOwnProperty(g) && ("string" === typeof a[g] ? console.log("XBlock " + a + " : " + g + ' ["' + a[g] + '"]') : console.log("XBlock " + a + " : " + g + " (Object)"));
      }
    } else {
      console.log("Internal error: Object is null or undefined, can't traverse");
    }
    console.log("runXBlockDiagnostics (" + b + ") done");
  };
  this.processXML = function(a) {
    console.log("processXML ()");
  };
  this.translateResourceFile = function(a) {
    console.log("translateResourceFile (" + a + ")");
    var b = flashVars.getRawFlashVars();
    return baseURL + "/" + b.module + "/" + a;
  };
}
;var CTATCustomLogElementObject = function() {
  this.reset = function() {
  };
  this.addCustomLogElement = functionaddCustomLogElement(aKey, aValue);
  customElementsNames.push(aKey);
  customElementsTypes.push(aKey);
  this.getCustomElementNames = function() {
    return customElementsNames;
  };
  this.getCustomElementTypes = function() {
    return customElementsTypes;
  };
};
var CTATGuid = function() {
  this.s4 = function() {
    return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
  };
  this.guid = function() {
    return this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4();
  };
};
"undefined" !== typeof module && (module.exports = CTATGuid);
var CTATSandboxDriver = {};
function getSafeElementById(a) {
  return document.getElementById(a);
}
;var CTATGlobalFunctions = {stringToBoolean:function(a) {
  switch(String(a).toLowerCase()) {
    case "true":
    ;
    case "yes":
    ;
    case "1":
      return !0;
    case "false":
    ;
    case "no":
    ;
    case "0":
    ;
    case "":
    ;
    case null:
      return !1;
    default:
      return Boolean(string);
  }
}, decodeTutorShopParams:function() {
  var a;
  if (window && window.frameElement && (a = window.frameElement.getAttribute("data-params"))) {
    a = jQuery.parseJSON(a);
    for (var b in a) {
      CTATGlobals.EncodedParams[b] && (a[b] = decodeURIComponent(a[b].replace(/\+/g, "%20")));
    }
    return a;
  }
  return null;
}, generateDefaultConfiguration:function() {
  var a = CTATGlobalFunctions.decodeTutorShopParams();
  return a ? (ctatdebug("generateDefaultConfiguration() dataParams[authenticity_token] " + a.authenticity_token), a) : {admit_code:"ies", authenticity_token:"", auth_token:"none", BehaviorRecorderMode:"AuthorTimeTutoring", class_name:"", curriculum_service_url:"", dataset_level_name:"", dataset_level_name1:"Unit1", dataset_level_type1:"unit", dataset_level_type:"ProblemSet", dataset_name:"FlashLoggingTest_xxx", expire_logout_url:"none", info:"", instructor_name:"none", instrumentation_log:"off", 
  lcId:"none", Logging:"None", log_service_url:"http://pslc-qa.andrew.cmu.edu/log/server", log_to_disk_directory:".", keyboard:"disabled", problem_name:"xxx", problem_position:"none", problem_started_url:"none", problem_state_status:"empty", question_file:"", refresh_session_url:"none", remoteSocketPort:"80", remoteSocketURL:"http://localhost", restore_problem_url:"none", reuse_swf:"false", run_problem_url:"none", school_name:"none", SessionLog:"true", session_id:"none", session_timeout:"none", skills:"", 
  source_id:"PACT_CTAT_HTML5", student_interface:"none", student_problem_id:"none", study_condition_name:"", study_condition_type:"", study_condition_description:"", study_name:"Study1", target_frame:"none", TutorShopDeliveryMethod:"sendandload", tutoring_service_communication:"javascript", user_guid:"qa-test", wmode:"opaque", DeliverUsingOLI:!1, ssl:"off", sui:"", centerTutor:!1, previewMode:!1, width:550, height:450};
}, isInstructorMode:function() {
  var a = flashVars ? flashVars.getRawFlashVars() : null;
  return a && a.deliverymode ? "delivery" == a.deliverymode ? !1 : !0 : !1;
}, getLoggingLibrary:function(a) {
  null == commLoggingLibrary && (commLoggingLibrary = new CTATLoggingLibrary(!0));
  return commLoggingLibrary;
}, setPreviewMode:function(a, b) {
  a.previewMode = b;
}, setCenterTutor:function(a, b) {
  a.centerTutor = b;
}, setTutorWidth:function(a, b) {
  a.width = b;
}, setTutorHeight:function(a, b) {
  a.height = b;
}, setTutorDimensions:function(a, b, c) {
  a.width = b;
  a.height = c;
}, setTutorValue:function(a, b, c) {
  a[b] = c;
}, setProblemSummary:function(a) {
}, setCommunicationMode:function(a, b) {
  a.tutoring_service_communication = b;
}, setRemoteSocketURL:function(a, b) {
  a.remoteSocketURL = b;
}, setRemoteSocketPort:function(a, b) {
  a.remoteSocketPort = b;
}, toBoolean:function(a) {
  return "boolean" === typeof a ? a : "string" === typeof a ? CTATGlobalFunctions.stringToBoolean(a) : "number" === typeof a ? 0 < a : a ? !0 : !1;
}};
function noenter(a) {
  if (CTATConfig.platform_is_Google()) {
    return 0;
  }
  a = a || window.event;
  return 13 !== (a.keyCode || a.charCode);
}
CTATGlobalFunctions.isBlank = function(a) {
  return !a || /^\s*$/.test(a);
};
function componentToHex(a) {
  a = a.toString(16);
  return 1 == a.length ? "0" + a : a;
}
function rgbToHex(a, b, c) {
  return "#" + componentToHex(a) + componentToHex(b) + componentToHex(c);
}
function hexToRgb(a) {
  return (a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a)) ? {r:parseInt(a[1], 16), g:parseInt(a[2], 16), b:parseInt(a[3], 16)} : null;
}
function parseQueryString() {
  ctatdebug("parseQueryString ()");
  var a = location.search;
  ctatdebug("Query String: " + a);
  var b = "?" == a.charAt(0) ? a.substring(1) : a, a = {};
  if (b) {
    for (var b = b.split("&"), c = 0;c < b.length;c++) {
      var e = b[c].split("=");
      ctatdebug("Setting flashvar " + e[0] + ", to: " + decodeURIComponent(e[1].replace(/\+/g, " ")));
      a[decodeURIComponent(e[0])] = decodeURIComponent(e[1].replace(/\+/g, " "));
    }
  }
  return a;
}
function parseQueryStringArgs(a) {
  ctatdebug("parseQueryStringArgs ()");
  ctatdebug("Query String: " + a);
  var b = "?" == a.charAt(0) ? a.substring(1) : a;
  a = {};
  if (b) {
    for (var b = b.split("&"), c = 0;c < b.length;c++) {
      var e = b[c].split("=");
      a[decodeURIComponent(e[0])] = decodeURIComponent(e[1].replace(/\+/g, " "));
    }
  }
  return a;
}
function tutorPrep(a) {
  ctatdebug("tutorPrep (" + a + ")");
  if (null == a) {
    return ctatdebug("Internal error: null argument passed"), [];
  }
  var b = [];
  if (CTATBase.inCTAT()) {
    var c = parseQueryString();
    null != c && (ctatdebug("Assigning parsed arguments ..."), b = c);
  }
  var c = !1, e;
  for (e in b) {
    switch(ctatdebug("Processing external FlashVar " + e + "(" + b[e] + ")"), e) {
      case "GENERATED":
        "on" == b[e] && (c = new CTATGuid, a.session_id = c.guid(), c = !0);
        break;
      case "BRD":
        a.question_file = b[e];
        break;
      case "BRMODE":
        a.BehaviorRecorderMode = b[e];
        break;
      case "PROBLEM":
        a.problem_name = b[e];
        break;
      case "DATASET":
        a.dataset_name = b[e];
        break;
      case "LEVEL1":
        a.dataset_level_name1 = b[e];
        break;
      case "TYPE1":
        a.dataset_level_type1 = b[e];
        break;
      case "LEVEL2":
        a.dataset_level_name2 = b[e];
        break;
      case "TYPE2":
        a.dataset_level_type2 = b[e];
        break;
      case "LEVEL3":
        a.dataset_level_name3 = b[e];
        break;
      case "TYPE3":
        a.dataset_level_type3 = b[e];
        break;
      case "LEVEL4":
        a.dataset_level_name4 = b[e];
        break;
      case "TYPE4":
        a.dataset_level_type4 = b[e];
        break;
      case "USER":
        a.user_guid = b[e];
        break;
      case "SESSION":
        !1 === c && (a.session_id = b[e]);
        break;
      case "SOURCE":
        a.source_id = b[e];
        break;
      case "LOGTYPE":
        a.Logging = b[e];
        break;
      case "PORT":
        a.remoteSocketPort = b[e];
        break;
      case "REMOTEURL":
        a.remoteSocketURL = b[e];
        break;
      case "DISKDIR":
        a.log_to_disk_directory = b[e];
        break;
      case "USEOLI":
        a.DeliverUsingOLI = b[e];
        break;
      case "log_service_url":
        a.log_service_url = b[e];
        break;
      case "URL":
        a.log_service_url = b[e];
        break;
      case "LOGURL":
        a.log_service_url = b[e];
        break;
      case "CONNECTION":
        a.tutoring_service_communication = b[e];
        break;
      case "SUI":
        a.sui = b[e];
        break;
      case "VAR1":
        a.var1 = b[e];
        break;
      case "VAL1":
        a.val1 = b[e];
        break;
      case "VAR2":
        a.var2 = b[e];
        break;
      case "VAL2":
        a.val2 = b[e];
        break;
      case "VAR3":
        a.var3 = b[e];
        break;
      case "VAL3":
        a.val3 = b[e];
        break;
      case "VAR4":
        a.var4 = b[e];
        break;
      case "VAL4":
        a.val4 = b[e];
        break;
      case "SLOG":
      ;
      case "SessionLog":
        a.SessionLog = b[e];
        break;
      case "KEYBOARDGROUP":
        "Disabled" == b[e] && (a.keyboard = "disabled");
        "Auto" == b[e] && (a.keyboard = "auto");
        "On" == b[e] && (a.keyboard = "on");
        break;
      default:
        a[e] = b[e];
    }
  }
  return a;
}
function setOrientation(a) {
  ctatdebug("setOrientation (" + a + ")");
  switch(a) {
    case -90:
    ;
    case 90:
      orientation = "landscape";
      mobileAPI && mobileAPI.processOrientationChange(orientation);
      break;
    default:
      orientation = "portrait", mobileAPI && mobileAPI.processOrientationChange(orientation);
  }
}
Object.hasOwnProperty("create") || (Object.create = function() {
  function a() {
  }
  return function(b) {
    if (1 != arguments.length) {
      throw Error("Object.create implementation only accepts one parameter.");
    }
    a.prototype = b;
    return new a;
  };
}());
function thisMovie(a) {
  return -1 != navigator.appName.indexOf("Microsoft") ? window[a] : document[a];
}
function introspect(a, b, c, e) {
  c = c || "";
  "number" !== this.typeOf(e) && (e = 1);
  var g = this.typeOf(b);
  a = [c, a, " ", g, " :"].join("");
  if ("object" === g) {
    if (0 < e) {
      c = [c, "  "].join("");
      for (var d in b) {
        g = this.introspect(d, b[d], c, e - 1), a = [a, "\n", g].join("");
      }
      return a;
    }
    return [a, " ..."].join("");
  }
  return "null" === g ? [a, " null"].join("") : [a, " ", b].join("");
}
function findPointOfAttachment(a) {
  ctatdebug("findPointOfAttachment (" + a + ")");
  for (var b = 0;b < movieclips.length;b++) {
    var c = movieclips[b];
    ctatdebug("Examining: " + c.getName() + "...");
    if (!0 === c.isRegistered(a)) {
      return c;
    }
  }
  return null;
}
function findMovieClip(a) {
  a = a.trim();
  ctatdebug("findMovieClip (" + a.trim() + ")");
  for (var b = 0;b < movieclips.length;b++) {
    var c = movieclips[b];
    ctatdebug("Examining: " + c.getName() + "...");
    if (c.getName() == a) {
      return c;
    }
  }
  return null;
}
function colName(a, b) {
  ctatdebug("colName (" + a + ")");
  for (var c = "";0 <= a;) {
    c = String.fromCharCode(a % 26 + 97) + c, a = Math.floor(a / 26) - 1;
  }
  !0 === b && c.toUpperCase();
  return c;
}
function selectText(a) {
}
function urldecode(a) {
  return decodeURIComponent(("" + a).replace(/\+/g, "%20"));
}
function detectIE() {
  var a = window.navigator.userAgent, b = a.indexOf("MSIE "), c = a.indexOf("Trident/");
  return 0 < b ? parseInt(a.substring(b + 5, a.indexOf(".", b)), 10) : 0 < c ? (b = a.indexOf("rv:"), parseInt(a.substring(b + 3, a.indexOf(".", b)), 10)) : !1;
}
function listProperties(a) {
  ctatdebug("listProperties (l: " + a.length + ")");
  for (var b in a) {
    ctatdebug("[" + b + "]");
  }
}
function listPropertiesKV(a, b) {
  ctatdebug("listPropertiesKV (size: " + a.length + ")");
  if (1 == b) {
    for (var c = 0;c < a.length;c++) {
      ctatdebug("[" + c + "]: " + a[c]);
    }
  } else {
    for (c in a) {
      ctatdebug("[" + c + "]: " + a[c]);
    }
  }
}
function getIndicesOf(a, b, c) {
  var e = 0, g = a.length, d = [];
  c || (b = b.toLowerCase(), a = a.toLowerCase());
  for (;-1 < (c = b.indexOf(a, e));) {
    d.push(c), e = c + g;
  }
  return d;
}
CTATGlobalFunctions.formatColor = function(a) {
  if (/^#[0-9a-f]{6}$/i.test(a)) {
    return a;
  }
  var b = a.match(/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i);
  if (null !== b) {
    return rgbToHex(Number(b[1]), Number(b[2]), Number(b[3]));
  }
  b = a.match(/^#?([0-9a-f]{0,6})$/i);
  if (null !== b) {
    for (a = b[1];6 > a.length;) {
      a = "0" + a;
    }
    return "#" + a;
  }
  return a;
};
CTATGlobalFunctions.Gensym = function() {
  this.make_gensym = function() {
    var a = "", b = 0;
    return {set_prefix:function(b) {
      a = String(b);
    }, set_index:function(a) {
      b = a;
    }, gensym:function() {
      var g = a + b;
      b += 1;
      return g;
    }};
  };
  var a = this.make_gensym();
  a.set_index(2);
  var b = this.make_gensym();
  b.set_index(1);
  b.set_prefix("ctatdiv");
  return {z_index:a.gensym, div_id:b.gensym};
};
CTATGlobalFunctions.gensym = CTATGlobalFunctions.Gensym();
var CTATHTMLManager = function() {
  var a = null, b = "";
  this.urldecode = function(a) {
    return decodeURIComponent((a + "").replace(/\+/g, "%20"));
  };
  this.showEntities = function() {
    ctatdebug("showEntities ()");
    for (var b = null, e = 0;e < a.length;e++) {
      b = a[e], ctatdebug(b);
    }
  };
  this.initEntities = function() {
    null == a && (a = [], a["&amp;"] = "*!*", a["&nbsp;"] = "\u00a0", a["&iexcl;"] = "\u00a1", a["&cent;"] = "\u00a2", a["&pound;"] = "\u00a3", a["&curren;"] = "\u00a4", a["&yen;"] = "\u00a5", a["&brvbar;"] = "\u00a6", a["&sect;"] = "\u00a7", a["&uml;"] = "\u00a8", a["&copy;"] = "\u00a9", a["&reg;"] = "\u00ae", a["&deg;"] = "\u00b0", a["&plusmn;"] = "\u00b1", a["&sup1;"] = "\u00b9", a["&sup2;"] = "\u00b2", a["&sup3;"] = "\u00b3", a["&acute;"] = "\u00b4", a["&micro;"] = "\u00b5", a["&frac14;"] = "\u00bc", 
    a["&frac12;"] = "\u00bd", a["&frac34;"] = "\u00be", a["&iquest;"] = "\u00bf", a["&Agrave;"] = "\u00c0", a["&Aacute;"] = "\u00c1", a["&Acirc;"] = "\u00c2", a["&Atilde;"] = "\u00c3", a["&Auml;"] = "\u00c4", a["&Aring;"] = "\u00c5", a["&AElig;"] = "\u00c6", a["&Ccedil;"] = "\u00c7", a["&Egrave;"] = "\u00c8", a["&Eacute;"] = "\u00c9", a["&Ecirc;"] = "\u00ca", a["&Euml;"] = "\u00cb", a["&Igrave;"] = "\u00cc", a["&Iacute;"] = "\u00cd", a["&Icirc;"] = "\u00ce", a["&Iuml;"] = "\u00cf", a["&ETH;"] = "\u00d0", 
    a["&Ntilde;"] = "\u00d1", a["&Ograve;"] = "\u00d2", a["&Oacute;"] = "\u00d3", a["&Ocirc;"] = "\u00d4", a["&Otilde;"] = "\u00d5", a["&Ouml;"] = "\u00d6", a["&Oslash;"] = "\u00d8", a["&Ugrave;"] = "\u00d9", a["&Uacute;"] = "\u00da", a["&Ucirc;"] = "\u00db", a["&Uuml;"] = "\u00dc", a["&Yacute;"] = "\u00dd", a["&THORN;"] = "\u00de", a["&szlig;"] = "\u00df", a["&agrave;"] = "\u00e0", a["&aacute;"] = "\u00e1", a["&acirc;"] = "\u00e2", a["&atilde;"] = "\u00e3", a["&auml;"] = "\u00e4", a["&aring;"] = 
    "\u00e5", a["&aelig;"] = "\u00e6", a["&ccedil;"] = "\u00e7", a["&egrave;"] = "\u00e8", a["&eacute;"] = "\u00e9", a["&ecirc;"] = "\u00ea", a["&euml;"] = "\u00eb", a["&igrave;"] = "\u00ec", a["&iacute;"] = "\u00ed", a["&icirc;"] = "\u00ee", a["&iuml;"] = "\u00ef", a["&eth;"] = "\u00f0", a["&ntilde;"] = "\u00f1", a["&ograve;"] = "\u00f2", a["&oacute;"] = "\u00f3", a["&ocirc;"] = "\u00f4", a["&otilde;"] = "\u00f5", a["&ouml;"] = "\u00f6", a["&oslash;"] = "\u00f8", a["&ugrave;"] = "\u00f9", a["&uacute;"] = 
    "\u00fa", a["&ucirc;"] = "\u00fb", a["&uuml;"] = "\u00fc", a["&yacute;"] = "\u00fd", a["&thorn;"] = "\u00fe", a["&yuml;"] = "\u00ff", a["&gt;"] = ">", a["&lt;"] = "<", a["&#61;"] = "=", a["&361;"] = "=", a["&quot;"] = '"');
    ctatdebug("(singleQuoteEscape==true) Replacing &apos; with: \\'");
    a["&apos;"] = "\\'";
  };
  this.entitiesConvert = function(a) {
    ctatdebug("entitiesConvert ()");
    return this.urldecode(unescape(a));
  };
  this.entitiesGenerate = function(a) {
    return b = a;
  };
  this.htmlEncode = function(a) {
    return a;
  };
  this.htmlDecode = function(a) {
    return "undefined" !== typeof $ ? $("<div/>").html(a).text() : "undefined" !== typeof Entities ? (new Entities).decode(a) : a;
  };
};
"undefined" !== typeof module && (module.exports = CTATHTMLManager);
var CTATTools = {};
function s4() {
  return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
}
function guid() {
  return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}
function htmlEscape(a) {
  return String(a).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function htmlUnescape(a) {
  return String(a).replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
}
function tableCreate() {
  var a = document.body, b = document.createElement("table");
  b.style.width = "100%";
  b.style.border = "1px solid black";
  for (var c = 0;3 > c;c++) {
    for (var e = b.insertRow(), g = 0;2 > g && (2 != c || 1 != g);g++) {
      var d = e.insertCell();
      d.appendChild(document.createTextNode(" "));
      1 == c && 1 == g && d.setAttribute("rowSpan", "2");
    }
  }
  a.appendChild(b);
  return b;
}
;var CTATBase = function(a, b) {
  function c(a, b, d) {
    null === a && (a = "unknownclass");
    null === b && (b = "nullinstance");
    return "[" + a + ":" + b + "] " + d;
  }
  var e = a, g = b, d = this, f = !0;
  "undefined" != CTATBase.DebuggingFilter[e] && CTATBase.DebuggingFilter[e] && (f = !1);
  this.getClassName = function() {
    return e;
  };
  this.setClassName = function(a) {
    e = a;
  };
  this.setName = function(a) {
    g = a;
  };
  this.getName = function() {
    return g;
  };
  this.getUseDebugging = function() {
    return useDebugging;
  };
  this.setUseDebugging = function(a) {
    useDebugging = a;
  };
  this.ctatdebug = function(a) {
    if (f) {
      var b = a;
      useDebuggingBasic ? d.ctatdebugInternal(b, "UnknownClass") : (null === a && (b = "No message provided"), useDebugging && d.ctatdebugInternal(b, d.getClassName()));
    }
  };
  this.ctatdebugObject = function(a) {
    var b = 0, d;
    for (d in a) {
      this.ctatdebug("(" + b + ")" + d + ": " + a[d]), b++;
    }
  };
  this.ctatdebugInternal = function(a, b) {
    var f = a, e = "No msg assigned yet";
    if (null === f || void 0 === f) {
      f = "No message!";
    }
    "" === f && (f = "Empty message!");
    if (useDebuggingBasic) {
      e = c("Unknown", "undefined", f), null === customconsole && (customconsole = getSafeElementById("customconsole")), null !== customconsole ? (customconsole.innerHTML += e + "<br>", customconsole.scrollTop = customconsole.scrollHeight) : console.log(e);
    } else {
      null === b && (b = "UndefinedClass");
      null === f && (f = "No message");
      e = c(b, d.getName(), f);
      try {
        console.trace(e);
      } catch (g) {
      }
      "google" == CTATConfig.platform ? Logger.log(e) : (null === customconsole && (customconsole = getSafeElementById("customconsole")), null !== customconsole && (customconsole.innerHTML += e + "<br>", customconsole.scrollTop = customconsole.scrollHeight));
    }
  };
  this.ctatdebugObjectShallow = function(a) {
    var b = "", f;
    for (f in a) {
      b += f + ", ";
    }
    d.ctatdebugInternal("Object: " + b, "Global");
  };
  this.urldecode = function(a) {
    return decodeURIComponent((a + "").replace(/\+/g, "%20"));
  };
  this.entitiesConvert = function(a) {
    this.ctatdebug("entitiesConvert ()");
    return this.urldecode(unescape(a));
  };
  this.entitiesGenerate = function(a) {
    return a;
  };
  CTATBase.inOLI = function() {
    return "undefined" != typeof CTATTarget && "OLI" == CTATTarget;
  };
  CTATBase.inXBlock = function() {
    return "undefined" != typeof CTATTarget && "XBlock" == CTATTarget;
  };
  CTATBase.inSCORM = function() {
    return "undefined" != typeof CTATTarget && "SCORM" == CTATTarget;
  };
  CTATBase.inCTAT = function() {
    return "undefined" != typeof CTATTarget && ("CTAT" == CTATTarget || "Default" == CTATTarget);
  };
  CTATBase.inGoogle = function() {
    return "undefined" != typeof CTATTarget && "Google" == CTATTarget;
  };
  CTATBase.inLTI = function() {
    return "undefined" != typeof CTATTarget && "LTI" == CTATTarget;
  };
};
function formatLogMessageGoogle(a, b, c) {
  c = (new CTATBase(a, b)).htmlEncode(c);
  return "[" + a + ":" + b + "] " + c;
}
function ctatdebug(a) {
  (useDebugging || useDebuggingBasic) && null !== a && ("google" == CTATConfig.platform ? Logger.log(formatLogMessageGoogle("CTATTutor", "tutor", a)) : (null === debugPointer && (debugPointer = new CTATBase("CTATTutor", "tutor")), debugPointer.ctatdebug(a, "CTATTutor")));
}
Object.defineProperty(CTATBase, "DebuggingFilter", {enumerable:!1, configurable:!1, writable:!0, value:[]});
"undefined" !== typeof module && (module.exports = CTATBase);
var CTATFlashVars = function() {
  CTATBase.call(this, "CTATFlashVars", "flashvars");
  var a = this, b = [], c = null, e = null, g = null, d = null;
  this.assignRawFlashVars = function(b) {
    a.raw = b;
    a.preParse();
  };
  this.getRawFlashVars = function() {
    return a.raw;
  };
  this.getCustomFields = function() {
    return b;
  };
  this.setTimeZone = function(b) {
    var d = new CTATBase("CTATFlashVars", "");
    d.ctatdebug("setTimeZone (" + b + ")");
    var e = "";
    null == b || "" == b || void 0 == b ? (b = jstz.determine(), d.ctatdebug("Assigning detected timezone: " + b.name()), e = b.name()) : (50 < b.length && (b = b.substr(0, 50)), 3 != b.length && 4 != b.length || d.ctatdebug("3 and 4 letter time zone abbreviations are deprecated. See list of tz database zone names for better options"), e = b);
    null != a.raw && (a.raw.timezone = e);
  };
  this.getTimeZone = function() {
    return null != a.raw && a.raw.timezone ? a.raw.timezone : "UTC";
  };
  this.listFlashVars = function() {
    ctatdebug("listFlashVars ()");
    for (var b in a.raw) {
      ctatdebug("[" + b + "]: " + a.raw[b]);
    }
  };
  this.preParse = function() {
    ctatdebug("preParse ()");
    if (void 0 == a.raw.dataset_name || void 0 == a.raw.dataset_name) {
      a.raw.dataset_name = "DefaultDataset";
    }
    if (void 0 == a.raw.problem_tutorflag || void 0 == a.raw.problem_tutorflag) {
      a.raw.problem_tutorflag = "tutor";
    }
    for (var d in a.raw) {
      if (-1 != d.indexOf("VAR") || -1 != d.indexOf("var")) {
        b[d] = a.raw[d];
      }
    }
    d = 0;
    for (var e = !0;1 == e;) {
      var e = !1, c = "custom_field_name" + (d + 1), g = "custom_field_value" + (d + 1);
      a.ctatdebug("Trying : " + a.raw[c] + "," + a.raw[g]);
      null != a.raw[c] && (a.ctatdebug("Adding: " + c + "," + a.raw[g]), b[a.raw[c]] = a.raw[g], e = !0, d++);
    }
  };
  this.getDatasetNames = function() {
    a.ctatdebug("getDatasetNames ()");
    if (null != c) {
      return c;
    }
    c = {};
    c = [];
    for (var b = 0, d = !0;1 == d;) {
      var d = !1, e = "dataset_level_name" + (b + 1);
      null != a.raw[e] && (a.ctatdebug("Adding: " + e + "," + a.raw[e]), c[b] = a.raw[e], d = !0, b++);
    }
    return c;
  };
  this.getDatasetTypes = function() {
    a.ctatdebug("getDatasetTypes ()");
    if (null != e) {
      return e;
    }
    e = [];
    for (var b = 0, d = !0;1 == d;) {
      var d = !1, c = "dataset_level_type" + (b + 1);
      null != a.raw[c] && (a.ctatdebug("Adding: " + c + "," + a.raw[c]), e[b] = a.raw[c], d = !0, b++);
    }
    return e;
  };
  this.getConditionNames = function() {
    var b = [], d = 0;
    void 0 != a.raw.study_condition_name && "" != a.raw.study_condition_name && (b.push(a.raw.study_condition_name), d++);
    for (var e = 0, c = !0;1 == c;) {
      var c = !1, g = "study_condition_name" + (e + 1);
      null != a.raw[g] && (a.ctatdebug("Adding: " + g + "," + a.raw[g]), b[e + d] = a.raw[g], c = !0, e++);
    }
    return b;
  };
  this.getConditionTypes = function() {
    g = [];
    var b = 0;
    void 0 != a.raw.study_condition_type && "" != a.raw.study_condition_type && (g.push(a.raw.study_condition_type), b++);
    for (var d = 0, e = !0;1 == e;) {
      var e = !1, c = "study_condition_type" + (d + 1);
      null != a.raw[c] && (a.ctatdebug("Adding: " + c + "," + a.raw[c]), g[d + b] = a.raw[c], e = !0, d++);
    }
    return g;
  };
  this.getConditionDescriptions = function() {
    a.ctatdebug("getConditionDescriptions ()");
    d = [];
    var b = 0;
    a.raw.study_condition_description && "" != a.raw.study_condition_description && (a.ctatdebug("Adding study_condition_description: " + a.raw.study_condition_description), d.push(a.raw.study_condition_description), b++);
    for (var e = 0, c = !0;1 == c;) {
      var c = !1, g = "study_condition_description" + (e + 1);
      null != a.raw[g] && (a.ctatdebug("Adding: " + g + "," + a.raw[g]), d[e + b] = a.raw[g], c = !0, e++);
    }
    return d;
  };
};
CTATFlashVars.prototype = Object.create(CTATBase.prototype);
CTATFlashVars.prototype.constructor = CTATFlashVars;
var CTATGraphicsTools = function(a, b, c, e, g, d) {
  CTATBase.call(this, "CTATGraphicsTools", "__undefined__");
  var f = b || 1, h = c || "#000000", k = e || "#EEEEEE", l = g || !1, m = "Arial", n = a || null;
  a = d || !1;
  var p = 0, u = this;
  if (null == n) {
    return u.ctatdebug("--- Error: Must pass a canvas context. ---"), -1;
  }
  0 == a && (p = .5);
  this.getGraphicBorderWidth = function() {
    return f;
  };
  this.setGraphicBorderWidth = function(a) {
    f = a;
  };
  this.setFont = function(a) {
    m = a;
  };
  this.setFontSize = function(a) {
    u.fontSize = a;
  };
  this.getLineColor = function() {
    return h;
  };
  this.getFillColor = function() {
    return k;
  };
  this.getFillShape = function() {
    return l;
  };
  this.setLineColor = function(a) {
    h = a;
  };
  this.setFillColor = function(a) {
    k = a;
  };
  this.setFillShape = function(a) {
    l = a;
  };
  this.getFont = function() {
    return m;
  };
  this.getFontSize = function() {
    return u.fontSize;
  };
  this.magicTrigFunctionX = function(a) {
    return Math.cos(2 * a * Math.PI);
  };
  this.magicTrigFunctionY = function(a) {
    return Math.sin(2 * a * Math.PI);
  };
  this.drawLine = function(a, b, d, e, f, c) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawLine");
    a += p;
    d += p;
    b += p;
    e += p;
    n.lineWidth = c;
    n.strokeStyle = f;
    n.beginPath();
    n.moveTo(a, b);
    n.lineTo(d, e);
    n.stroke();
  };
  this.drawCircle = function(a, b, d) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawCircle");
    a += p;
    b += p;
    n.strokeStyle = h;
    n.lineWidth = f;
    n.beginPath();
    n.arc(a, b, d, 0, 2 * Math.PI);
    n.stroke();
  };
  this.drawCircleFilled = function(a, b, d) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawCircleFilled");
    a += p;
    b += p;
    n.fillStyle = k;
    n.beginPath();
    n.arc(a, b, d, 0, 2 * Math.PI);
    n.fill();
  };
  this.drawRectangle = function(a, b, d, e) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawRectangle");
    a += p;
    b += p;
    n.lineWidth = f;
    1 == l ? (n.fillStyle = k, n.fillRect(a, b, d, e)) : (n.strokeStyle = h, n.beginPath(), n.rect(a, b, d, e), n.stroke());
  };
  this.drawRectangleFilled = function(a, b, d, e) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawRectangleFilled");
    a += p;
    b += p;
    n.fillStyle = k;
    n.fillRect(a, b, d, e);
  };
  this.drawRoundedRect = function(a, b, d, e, c) {
    a += p;
    b += p;
    null != n && (n.strokeStyle = h, n.lineWidth = f, n.beginPath(), n.moveTo(a, b + c), n.lineTo(a, b + e - c), n.quadraticCurveTo(a, b + e, a + c, b + e), n.lineTo(a + d - c, b + e), n.quadraticCurveTo(a + d, b + e, a + d, b + e - c), n.lineTo(a + d, b + c), n.quadraticCurveTo(a + d, b, a + d - c, b), n.lineTo(a + c, b), n.quadraticCurveTo(a, b, a, b + c), n.stroke());
  };
  this.drawRoundedRectFilled = function(a, b, d, e, c) {
    a += p;
    b += p;
    null != n && (n.strokeStyle = h, n.lineWidth = f, n.beginPath(), n.moveTo(a, b + c), n.lineTo(a, b + e - c), n.quadraticCurveTo(a, b + e, a + c, b + e), n.lineTo(a + d - c, b + e), n.quadraticCurveTo(a + d, b + e, a + d, b + e - c), n.lineTo(a + d, b + c), n.quadraticCurveTo(a + d, b, a + d - c, b), n.lineTo(a + c, b), n.quadraticCurveTo(a, b, a, b + c), n.stroke(), n.fillStyle = k, n.beginPath(), n.moveTo(a, b + c), n.lineTo(a, b + e - c), n.quadraticCurveTo(a, b + e, a + c, b + e), n.lineTo(a + 
    d - c, b + e), n.quadraticCurveTo(a + d, b + e, a + d, b + e - c), n.lineTo(a + d, b + c), n.quadraticCurveTo(a + d, b, a + d - c, b), n.lineTo(a + c, b), n.quadraticCurveTo(a, b, a, b + c), n.fill());
  };
  this.drawText = function(a, b, d) {
    if (null != n) {
      a += p;
      b += p;
      try {
        n.fillStyle = h, n.font = m + " 12pt", n.fillText(d, a, b);
      } catch (e) {
        throw alert(incompatibleBrowserMessage), Error("Browser does not support fillText");
      }
    }
  };
  this.drawTextFormatted = function(a, b, d, e, f, c, g, l, h, k) {
    if (null != n) {
      a += p;
      b += p;
      e = "";
      1 == l && (e += "italic ");
      1 == g && (e += "bold ");
      e += "12pt " + m;
      try {
        n.fillStyle = c, n.font = e, n.fillText(d, a, b);
      } catch (u) {
        throw alert(incompatibleBrowserMessage), Error("Browser does not support fillText");
      }
    }
  };
  this.drawTriangle = function(a, b, d, e, c, g) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawTriangle");
    a += p;
    d += p;
    c += p;
    b += p;
    e += p;
    g += p;
    n.fillStyle = h;
    n.lineWidth = f;
    n.beginPath();
    n.moveTo(a, b);
    n.lineTo(d, e);
    n.lineTo(c, g);
    n.lineTo(a, b);
    n.stroke();
  };
  this.drawTriangleFilled = function(a, b, d, e, c, g) {
    null == n && u.ctatdebug("Error: canvas canvasCtx is NULL in drawTriangleFilled");
    a += p;
    d += p;
    c += p;
    b += p;
    e += p;
    g += p;
    n.fillStyle = k;
    n.lineWidth = f;
    n.beginPath();
    n.moveTo(a, b);
    n.lineTo(d, e);
    n.lineTo(c, g);
    n.lineTo(a, b);
    n.fill();
  };
  this.save = function() {
    n.save();
  };
  this.restore = function() {
    n.restore();
  };
  this.clip = function() {
    n.clip();
  };
  this.clearCanvas = function(a, b, d, e) {
    "ctat" == CTATConfig.platform && n.clearRect(a, b, d, e);
  };
};
CTATGraphicsTools.prototype = Object.create(CTATBase.prototype);
CTATGraphicsTools.prototype.constructor = CTATGraphicsTools;
var CTATMobileTutorHandler = function(a, b) {
  CTATBase.call(this, "CTATMobileTutorHandler", "mobiletutorhandler");
  this.ctatdebug("CTATMobileTutorHandler ()");
  var c = "", e = b ? b : "disabled", g = !1;
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && (g = !0);
  this.error = function(a) {
    this.ctatdebug(a);
    alert(a);
  };
  this.processOrientationChange = function(a) {
    this.ctatdebug("processOrientationChange (" + a + ")");
  };
  this.getEnabled = function() {
    return "disabled" == e || "auto" == e && 0 == g ? !1 : !0;
  };
  this.processTextFocus = function(a, b, h, k, l) {
    this.ctatdebug("processTextFocus (" + a + "," + b + "," + h + "," + k + "," + l + ")");
    "disabled" == e || "auto" == e && 0 == g || (c = "", this.manipulateKeyboard());
  };
  this.processEnter = function() {
    this.ctatdebug("processEnter ()");
    if ("disabled" != e && ("auto" != e || 0 != g)) {
      var b = getSafeElementById(a);
      if (null != b) {
        try {
          b.processExternalEnter(), this.ctatdebug("Successfully called AS3 method");
        } catch (f) {
          this.ctatdebug("Error description: " + f.message);
        }
      } else {
        this.ctatdebug("Error: unable to obtain reference to swf object");
      }
    }
  };
  this.setText = function(b) {
    this.ctatdebug("setText (" + b + ")");
    if ("disabled" != e && ("auto" != e || 0 != g)) {
      if (null != CTATGlobals.selectedTextInput) {
        this.ctatdebug("Attempting to call HTML5 method on text object ...");
        var f = CTATGlobals.selectedTextInput.getText();
        CTATGlobals.selectedTextInput.setText(f + b);
      } else {
        if (this.ctatdebug("Attempting to call AS3 method ..."), f = getSafeElementById(a), null != f) {
          try {
            c += b, this.ctatdebug(c), f.processExternalKeyboard(c), this.ctatdebug("Successfully called AS3 method");
          } catch (h) {
            this.ctatdebug("Error description: " + h.message);
          }
        } else {
          this.ctatdebug("Error: unable to obtain reference to swf object");
        }
      }
    }
  };
  this.manipulateKeyboard = function() {
    this.ctatdebug("manipulateKeyboard()");
    if ("disabled" != e && ("auto" != e || 0 != g)) {
      this.hideKeyboard();
      var a = getSafeElementById("keyboardUI");
      a && (a.style.visibility = "visible");
    }
  };
  this.hideKeyboard = function() {
    document.activeElement.blur();
    var a = getSafeElementById("input");
    a && a.blur();
  };
  this.hideCustomKeyboard = function() {
    getSafeElementById("keyboardUI").style.visibility = "visible";
  };
};
CTATMobileTutorHandler.prototype = Object.create(CTATBase.prototype);
CTATMobileTutorHandler.prototype.constructor = CTATMobileTutorHandler;
function processTextFocus(a, b, c, e, g) {
  mobileAPI.processTextFocus(a, b, c, e, g);
}
function processFocusOut() {
  closeK();
}
;var CTATShape = function(a, b, c, e, g, d) {
  var f = this;
  if (void 0 == a || null == a) {
    return f.ctatdebug("--- Error: Must pass a valid ID. ---"), null;
  }
  var h = [], k = [], l = g, m = d, n = b, p = void 0, u = "black", t = "black", v = "Arial", w = 12, x = [], C = 1, D = 5, y = document.createElement("canvas");
  y.id = n;
  y.width = l;
  y.height = m;
  var A = new CTATCSS;
  A.addCSSAttribute("position", "absolute");
  A.addCSSAttribute("left", c + "px");
  A.addCSSAttribute("top", e + "px");
  A.addCSSAttribute("visibility", "visible");
  A.addCSSAttribute("background-color", "rgba(0, 0, 0, 0)");
  A.addCSSAttribute("border-style", "none");
  y.setAttribute("style", A.toCSSString());
  getSafeElementById(a).appendChild(y);
  var r = new CTATGraphicsTools(y.getContext("2d"));
  r.setGraphicBorderWidth(C);
  r.setLineColor(u);
  r.setFillColor(t);
  this.getXOffset = function() {
    return c + h[0];
  };
  this.getYOffset = function() {
    return e + k[0];
  };
  this.addPoint = function(a, b) {
    h.push(a);
    k.push(b);
  };
  this.getName = function() {
    return n;
  };
  this.getXPoint = function(a) {
    return h[a];
  };
  this.getYPoint = function(a) {
    return k[a];
  };
  this.getWidth = function() {
    return l;
  };
  this.getHeight = function() {
    return m;
  };
  this.getName = function() {
    return n;
  };
  this.getData = function() {
    return p;
  };
  this.getColor = function() {
    return t;
  };
  this.getRadius = function() {
    return D;
  };
  this.getTextFont = function() {
    return v;
  };
  this.getTextSize = function() {
    return w;
  };
  this.getLineColor = function() {
    return u;
  };
  this.getFillColor = function() {
    return t;
  };
  this.setXPoints = function(a) {
    h = a;
    A.modifyCSSAttribute("left", h[0] + "px");
    y.setAttribute("style", A.toCSSString());
  };
  this.setYPoints = function(a) {
    k = a;
    A.modifyCSSAttribute("top", k[0] + "px");
    y.setAttribute("style", A.toCSSString());
  };
  this.setWidth = function(b) {
    l = b;
    "main-canvas" != a && (y.width = l);
  };
  this.setHeight = function(b) {
    m = b;
    "main-canvas" != a && (y.height = m);
  };
  this.setName = function(a) {
    n = a;
  };
  this.setData = function(a) {
    p = a;
  };
  this.setFillColor = function(a) {
    t = a;
    r.setFillColor(a);
  };
  this.setLineColor = function(a) {
    u = a;
    r.setLineColor(a);
  };
  this.setDrawWidth = function(a) {
    C = a;
    r.setGraphicBorderWidth(C);
  };
  this.setRadius = function(a) {
    D = a;
  };
  this.setColor = function(a) {
    t = u = a;
    r.setLineColor(u);
    r.setFillColor(t);
  };
  this.setTextFont = function(a) {
    v = a;
    r.setFont(v);
  };
  this.setTextSize = function(a) {
    w = a;
    r.setFontSize(w);
  };
  this.modifyCanvasCSS = function(a, b) {
    A.modifyCSSAttribute(a, b);
    y.setAttribute("style", A.toCSSString());
  };
  this.detatchCanvas = function() {
    a == ctatcontainer ? getSafeElementById(a).removeChild(y) : getSafeElementById("ctatdiv" + a).removeChild(y);
  };
  this.shapeMagicTrigFunctionX = function(a) {
    r.magicTrigFunctionX(a);
  };
  this.shapeMagicTrigFunctionY = function(a) {
    r.magicTrigFunctionY(a);
  };
  this.drawLine = function() {
    r.drawLine(h[0] + C, k[0] + C, h[1], k[1], u, C);
  };
  this.drawCircle = function() {
    r.drawCircle(h[0] + D, k[0] + D, D);
  };
  this.drawCircleFilled = function() {
    r.drawCircleFilled(h[0] + D, k[0] + D, D - 1);
  };
  this.drawRectangle = function(a, b, d, e) {
    r.drawRectangle(a[0] + C, b[0] + C, l - C, m - C);
  };
  this.drawRectangleFilled = function() {
    r.drawRectangleFilled(h[0], k[0], l, m);
  };
  this.drawRoundedRect = function() {
    r.drawRoundedRect(h[0] + C, k[0] + C, l - D - C, m - D - C, D);
  };
  this.drawRoundedRectFilled = function() {
    r.drawRoundedRectFilled(h[0] + C, k[0] + C, l - D - C, m - D - C, D);
  };
  this.drawText = function() {
    r.drawText(w / 2, w / 2, p);
  };
  this.drawTriangle = function() {
    r.drawTriangle(h[0] + C, k[0] + C, h[1], k[1], h[2], k[2]);
  };
  this.drawTriangleFilled = function() {
    r.drawTriangleFilled(h[0], k[0], h[1], k[1], h[2], k[2]);
  };
  this.save = function() {
    r.save();
  };
  this.restore = function() {
    r.restore();
  };
  this.clip = function() {
    r.clip();
  };
  this.erase = function() {
    f.detatchCanvas();
    h = [];
    k = [];
    y = document.createElement("canvas");
    y.id = n;
    y.width = l;
    y.height = m;
    A = new CTATCSS;
    A.addCSSAttribute("position", "absolute");
    A.addCSSAttribute("left", c + "px");
    A.addCSSAttribute("top", e + "px");
    A.addCSSAttribute("visibility", "visible");
    A.addCSSAttribute("background-color", "rgba(0, 0, 0, 0)");
    A.addCSSAttribute("border-style", "none");
    y.setAttribute("style", A.toCSSString());
    a == ctatcontainer ? getSafeElementById(a).appendChild(y) : getSafeElementById("ctatdiv" + a).appendChild(y);
    for (var b = 0;b < x.length;b++) {
      y.addEventListener(x[b][0], x[b][1]);
    }
  };
};
function CTATJSONObject(a, b) {
  this.name = a || "";
  this.value = b || null;
}
var transformArray = [], CTATJSON = function() {
  CTATBase.call(this, "CTATJSON", "json");
  var a = null, b = 0;
  this.isJSONObject = function(a) {
    return a.ctat ? !0 : !1;
  };
  this.parse = function(a) {
    return this.parseJSON(a);
  };
  this.parseJSON = function(b) {
    this.ctatdebug("parseJSON ()");
    a = null;
    if ("string" == typeof b) {
      this.ctatdebug("Parsing JSON as a string ... ");
      try {
        a = JSON.parse(b);
      } catch (g) {
        return this.ctatdebug("Error parsing JSON message: " + g.message), a = null;
      }
      this.ctatdebug("Successfully parsed JSON string");
    }
    this.ctatdebug("JSON string has already been parsed, assigning as an object ...");
    for (var e in a) {
      return this.ctatdebug("Creating internal JSON object with name: " + e), b = new CTATJSONObject, b.name = e, b.value = a[e], b;
    }
    return null;
  };
  this.getElementName = function(a) {
    return "object" != typeof a ? (this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null) : a.name;
  };
  this.getElementValue = function(a) {
    return null == a ? (this.ctatdebug("Error: anElement is null"), null) : "object" != typeof a ? (this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null) : a.value;
  };
  this.getElementChildren = function(a) {
    if (null == a) {
      return this.ctatdebug("Error: anElement is null"), null;
    }
    if ("object" != typeof a) {
      return this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null;
    }
    var b = null;
    a = a.value;
    var g = [], d;
    for (d in a) {
      var f = a[d];
      if ("string" == typeof f) {
        b = new CTATJSONObject, b.name = d, b.value = f, g.push(b);
      } else {
        if (null == f[0] || void 0 == f[0]) {
          b = new CTATJSONObject, b.name = d, b.value = f, g.push(b);
        } else {
          for (var h in f) {
            b = new CTATJSONObject, b.name = d, b.value = f[h], g.push(b);
          }
        }
      }
    }
    return g;
  };
  this.getNodeTextValue = function(a) {
    if ("string" != typeof a.value) {
      var b = null;
      for (b in a.value) {
        if ("content" == b) {
          return a.value[b].toString();
        }
      }
      for (b in a.value) {
        if ("value" == b) {
          return a.value[b].toString();
        }
      }
    }
    return a.value;
  };
  this.getElementAttr = function(a, b) {
    var g = a.value, d;
    for (d in g) {
      if (d == b) {
        return g[d];
      }
    }
    return null;
  };
  this.isArray = function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  this.walkDOM = function(a) {
    this.ctatdebug("walkDOM () >>>>>>>>>>>>>>>>>>");
    b = 0;
    this.walk(a);
    this.ctatdebug("walkDOM () <<<<<<<<<<<<<<<<<<");
  };
  this.walk = function(a) {
    b++;
    if (!(5 < b)) {
      var e = 0, g;
      for (g in a) {
        var d = a[g];
        this.ctatdebug("(" + e + ") typeof (key): " + typeof g + " -> typeof(value): " + typeof d + "(" + d.length + ")");
        "string" != typeof d ? (this.ctatdebug("walk (" + g + ")"), this.walk(d)) : this.ctatdebug("walk (" + g + ") : " + d);
        e++;
      }
    }
  };
  this.toJSONString = function(a) {
    return JSON.stringify(a, null, 2);
  };
  this.syntaxHighlight = function(a) {
    "string" != typeof a && (a = JSON.stringify(a, void 0, 2));
    a = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return a.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function(a) {
      var b = "number";
      /^"/.test(a) ? b = /:$/.test(a) ? "key" : "string" : /true|false/.test(a) ? b = "boolean" : /null/.test(a) && (b = "null");
      return '<span class="' + b + '">' + a + "</span>";
    });
  };
};
CTATJSON.prototype = Object.create(CTATBase.prototype);
CTATJSON.prototype.constructor = CTATJSON;
"undefined" !== typeof module && (module.exports = CTATJSON);
var CTATXML = function() {
  CTATBase.call(this, "CTATXML", "xml");
  this.parse = function(a) {
    return this.parseXML(a);
  };
  this.parseXML = function(a) {
    this.ctatdebug("parseXML ()");
    var b = null;
    try {
      "undefined" !== typeof $ ? b = $.parseXML(a) : "undefined" !== typeof XMLParser ? b = (new XMLParser).parseFromString(a) : this.ctatdebug("Bottoming out, no parser configured!");
    } catch (c) {
      return null != b ? this.ctatdebug("JQuery could not process the provided XML: " + c.message + " (" + b.parseError.errorCode + ") (" + b.parseError.reason + ") (" + b.parseError.line + ")") : this.ctatdebug("JQuery could not process the provided XML (xmlDoc==null): " + c.message), null;
    }
    return null == b ? (this.ctatdebug("Unspecified error parsing xml message. xmlDoc is null"), null) : b.documentElement;
  };
  this.getElementName = function(a) {
    return a.nodeName;
  };
  this.getElementValue = function(a) {
    return a.nodeValue;
  };
  this.getElementChildren = function(a) {
    for (var b = [], c = 0;c < a.childNodes.length;c++) {
      1 == a.childNodes[c].nodeType && b.push(a.childNodes[c]);
    }
    return b;
  };
  this.getNodeTextValue = function(a) {
    if (null == a) {
      return "";
    }
    if (null == a.childNodes) {
      return a.nodeValue;
    }
    if (0 == a.childNodes.length) {
      return "";
    }
    for (var b = a.childNodes, c = 0;c < b.length;c++) {
      var e = b[c];
      if ("value" == e.nodeName || "Value" == e.nodeName) {
        if (1 == e.childNodes.length) {
          return e.childNodes[0].nodeValue;
        }
        if (0 == e.childNodes.length) {
          break;
        } else {
          return e.childNodes[1].nodeValue;
        }
      }
    }
    return a.childNodes[0].nodeValue;
  };
  this.getElementAttr = function(a, b) {
    if (!a.attributes) {
      return this.ctatdebug("Warning: Element " + a.nodeName + " does not have any attributes"), "";
    }
    for (var c = 0;c < a.attributes.length;c++) {
      if (a.attributes[c].nodeName == b) {
        return a.attributes[c].nodeValue;
      }
    }
    return "";
  };
  this.listElementAttr = function(a) {
    this.ctatdebug("Listing " + a.attributes.length + " attributes for element " + a.nodeName + " ...");
    for (var b = 0;b < a.attributes.length;b++) {
      this.ctatdebug(b + " name: " + a.attributes[b].nodeName + ", value: " + a.attributes[b].nodeValue);
    }
  };
  this.xmlToString = function(a) {
    this.ctatdebug("xmlToString ()");
    return null == a ? (this.ctatdebug("Error: xml data is null"), null) : (new XMLSerializer).serializeToString(a);
  };
};
CTATXML.prototype = Object.create(CTATBase.prototype);
CTATXML.prototype.constructor = CTATXML;
"undefined" !== typeof module && (module.exports = CTATXML);
var CTATActionEvaluationData = function(a) {
  CTATBase.call(this, "CTATActionEvaluationData", "actionevaluation");
  var b = 0, c = 0, e = "", g = a;
  this.setClassification = function(a) {
    this.classification = a;
  };
  this.isHint = function() {
    return "HINT" == g;
  };
  this.hasClassification = function() {
    return !0;
  };
  this.setCurrentHintNumber = function(a) {
    b = a;
  };
  this.setTotalHintsAvailable = function(a) {
    c = a;
  };
  this.setHintID = function(a) {
    e = a;
  };
  this.getClassification = function() {
    return "";
  };
  this.setEvaluation = function(a) {
    g = a;
  };
  this.getEvaluation = function() {
    return g;
  };
  this.getAttributeString = function() {
    var a = "";
    if (!this.isHint()) {
      return a;
    }
    a += 'current_hint_number="' + b + '" ';
    a += 'total_hints_available="' + c + '" ';
    "" !== e && (a += 'hint_id="' + e + '" ');
    return a;
  };
};
CTATActionEvaluationData.prototype = Object.create(CTATBase.prototype);
CTATActionEvaluationData.prototype.constructor = CTATActionEvaluationData;
var CTATConnectionBase = function(a, b) {
  CTATBase.call(this, "CTATConnectionBase", "ctatconnection");
  var c = -1, e = "", g = "http";
  this.setURL = function(a) {
    e = a;
  };
  this.getURL = function() {
    return e;
  };
  this.setID = function(a) {
    c = a;
  };
  this.getID = function() {
    return c;
  };
  this.setSocketType = function(a) {
    g = a;
  };
  this.getSocketType = function() {
    return g;
  };
};
CTATConnectionBase.prototype = Object.create(CTATBase.prototype);
CTATConnectionBase.prototype.constructor = CTATConnectionBase;
var CTATConnection = function(a) {
  CTATConnectionBase.call(this, "CTATConnection");
  var b = null, c = null, e = !1, g = this, d = "text/plain";
  g.setSocketType("http");
  this.setContentType = function(a) {
    d = a;
  };
  this.getContentType = function() {
    return d;
  };
  this.setConsumed = function(a) {
    e = a;
    g.ctatdebug("consumed: " + e);
  };
  this.getConsumed = function() {
    g.ctatdebug("consumed: " + e);
    return e;
  };
  this.assignReceiveFunction = function(a) {
    c.onreadystatechange = a;
  };
  this.setData = function(a) {
    b = a;
  };
  this.getData = function() {
    return b;
  };
  this.getHTTPObject = function() {
    return c;
  };
  this.createHTTPObject = function() {
    g.ctatdebug("createHTTPObject ()");
    c = new XMLHttpRequest;
    if (window.XMLHttpRequest) {
      g.ctatdebug("Creating regular XMLHttpRequest ..."), c = new XMLHttpRequest, c.overrideMimeType && c.overrideMimeType("text/html");
    } else {
      if (g.ctatdebug("Trying alternative HTTP object creation ..."), window.ActiveXObject) {
        g.ctatdebug("Detected window.ActiveXObject ...");
        try {
          g.ctatdebug("Creating Msxml2.XMLHTTP ..."), c = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (a) {
          try {
            g.ctatdebug("Creating Microsoft.XMLHTTP ..."), c = new ActiveXObject("Microsoft.XMLHTTP");
          } catch (b) {
            alert("Error: Unable to create HTTP Request Object: " + b.message);
          }
        }
      } else {
        alert("Internal error: an HTTP connection object could not be created");
      }
    }
  };
  this.init = function() {
    g.ctatdebug("init ()");
    if (null !== c) {
      var b = flashVars ? flashVars.getRawFlashVars() : a;
      "dummySession" == (b.session_id ? b.session_id : "dummySession") && g.ctatdebug("Unable to find CTAT session information from environment, trying OLI ...");
      try {
        c.setRequestHeader("Content-type", d);
      } catch (e) {
        alert("HTTP object creation error: " + e.message);
      }
    } else {
      alert("Internal error: http object is null right after creation");
    }
    g.ctatdebug("init () done");
  };
  this.send = function() {
    g.ctatdebug("send ()");
    g.getHTTPObject().onerror = function() {
      g.ctatdebug("Networking error!");
    };
    try {
      g.getHTTPObject().open("POST", g.getURL(), !0);
    } catch (a) {
      g.ctatdebug("Error in newConnection.httpObject.open: " + a.message);
      return;
    }
    g.init();
    try {
      b ? g.getHTTPObject().send(b) : g.getHTTPObject().send();
    } catch (a) {
      this.ctatdebug("Error in newConnection.httpObject.send: " + a.message);
    }
  };
  g.createHTTPObject();
};
CTATConnection.prototype = Object.create(CTATConnectionBase.prototype);
CTATConnection.prototype.constructor = CTATConnection;
var CTATWSConnection = function(a) {
  CTATConnectionBase.call(this, "CTATWSConnection");
  var b = "", c = !1, e = this, g = null, e = this, d = [], f = !1, h = 0, k = 0, l = null;
  e.setSocketType("ws");
  this.setConsumed = function(a) {
    c = a;
    e.ctatdebug("consumed: " + c);
  };
  this.getConsumed = function() {
    e.ctatdebug("consumed: " + c);
    return c;
  };
  this.assignReceiveFunction = function(a) {
    l = a;
  };
  this.setData = function(a) {
    b = a;
  };
  this.getData = function() {
    return b;
  };
  this.init = function() {
    e.ctatdebug("init (" + e.getURL() + ")");
    g = new WebSocket(e.getURL());
    g.addEventListener("open", function(a) {
      e.ctatdebug("STATUS: open");
      f = !0;
      e.ctatdebug("Connection open, flushing outgoing queue ...");
      h = (new Date).getTime();
      if (0 < d.length) {
        for (a = 0;a < d.length;a++) {
          g.send(d[a]);
        }
        d = [];
      }
    });
    g.addEventListener("message", function(a) {
      k = (new Date).getTime();
      e.ctatdebug("STATUS: message");
      e.ctatdebug("Received: " + a.data + " <b>(" + (k - h) + "ms)</b>");
      l ? l() : e.ctatdebug("Error: no processing function provided");
    });
    g.addEventListener("close", function(a) {
      e.ctatdebug("STATUS: close");
      f = !1;
    });
    g.addEventListener("error", function(a) {
      e.ctatdebug("STATUS: error");
      f = !1;
    });
    e.ctatdebug("init () done");
  };
  this.send = function() {
    e.ctatdebug("send ()");
    e.init();
    0 == f ? (e.ctatdebug("Connection not ready yet, storing ..."), d.push(b)) : (e.ctatdebug("Connection ready, sending data ..."), h = (new Date).getTime(), g.send(b));
  };
};
CTATWSConnection.prototype = Object.create(CTATConnectionBase.prototype);
CTATWSConnection.prototype.constructor = CTATWSConnection;
var CTATLogMessageBuilder = function() {
  CTATBase.call(this, "CTATLogMessageBuilder", "logmessagebuilder");
  var a = this, b = [], c = [];
  this.setContextName = function(a) {
    contextGUID = a;
  };
  this.getContextName = function() {
    return contextGUID;
  };
  this.makeSessionElement = function() {
    var a = flashVars.getRawFlashVars();
    return void 0 != a.log_session_id && null != a.log_session_id ? "<session_id>" + a.log_session_id + "</session_id>" : "<session_id>" + a.session_id + "</session_id>";
  };
  this.createContextMessage = function(b) {
    a.ctatdebug("createContextMessage()");
    var c = new Date, d = flashVars.getRawFlashVars(), f = '<context_message context_message_id="' + this.getContextName() + '" name="START_PROBLEM">';
    b || (f += this.makeMetaElement(c));
    b = "";
    void 0 != d.class_name ? "" != d.class_name ? (b = "<class>" + ("<name>" + d.class_name + "</name>"), void 0 != d.school_name && (b += "<school>" + d.school_name + "</school>"), void 0 != d.period_name && (b += "<period>" + d.period_name + "</period>"), void 0 != d.class_description && (b += "<description>" + d.class_description + "</description>"), void 0 != d.instructor_name && (b += "<instructor>" + d.instructor_name + "</instructor>"), b += "</class>") : b = "<class />" : b = "<class />";
    f += b;
    b = flashVars.getDatasetTypes();
    var h = flashVars.getDatasetNames();
    a.ctatdebug("Check: " + b.length + ", " + h.length);
    if (null != b && null != h) {
      a.ctatdebug("We have valid data set names and types, adding to message ...");
      for (var c = "<dataset>" + ("<name>" + d.dataset_name + "</name>"), k = 0;k < b.length;k++) {
        a.ctatdebug("Adding ..."), c += '<level type="' + b[k] + '">', c += "<name>" + h[k] + "</name>";
      }
      c += "<problem ";
      if (void 0 != d.problem_tutorflag || void 0 != d.problem_otherproblemflag) {
        void 0 != d.problem_tutorflag ? c += ' tutorFlag="' + d.problem_tutorflag + '"' : void 0 != d.problem_otherproblemflag && (c += 'tutorFlag="' + d.problem_otherproblemflag + '"');
      }
      c = c + ">" + ("<name>" + d.problem_name + "</name>");
      c = void 0 != d.problem_context ? c + ("<context>" + d.problem_context + "</context>") : c + "<context />";
      c += "</problem>";
      for (d = 0;d < b.length;d++) {
        c += "</level>";
      }
      c += "</dataset>";
      f += c;
    }
    d = "";
    b = flashVars.getConditionNames();
    c = flashVars.getConditionTypes();
    h = flashVars.getConditionDescriptions();
    if (0 < b.length) {
      for (k = 0;k < b.length;k++) {
        d += "<condition><name>" + b[k] + "</name>", d += "" == c[k] ? "" : "<type>" + c[k] + "</type>", d += "" == h[k] ? "" : "<desc>" + h[k] + "</desc>", d += "</condition>";
      }
    }
    var f = f + d, d = flashVars.getCustomFields(), l;
    for (l in d) {
      d.hasOwnProperty(l) && (f += "<custom_field>", f += "<name>" + l + "</name>", f += "<value>" + d[l] + "</value>", f += "</custom_field>");
    }
    f += "</context_message>";
    a.ctatdebug("messageString = " + f);
    return f;
  };
  this.createSemanticEventToolMessage = function(e, g, d, f, h) {
    a.ctatdebug("createSemanticEventToolMessage()");
    var k = new Date;
    flashVars.getRawFlashVars();
    var l = '<tool_message context_message_id="' + this.getContextName() + '">';
    h || (l += this.makeMetaElement(k));
    g = '<semantic_event transaction_id="' + g + '" name="' + d + '"';
    "" != f && (g += ' subtype="' + f + '"');
    l += g + "/>";
    f = "<event_descriptor>";
    e = e.toXMLString(!0);
    f = f + e + "</event_descriptor>";
    l += f;
    l += this.createCustomFields(b, c);
    l += "</tool_message>";
    a.ctatdebug("messageString = " + l);
    return l;
  };
  this.createUIEventToolMessage = function(e, g, d, f) {
    a.ctatdebug("createUIEventToolMessage()");
    var h = new Date;
    flashVars.getRawFlashVars();
    var k = '<tool_message context_message_id="' + this.getContextName() + '">';
    f || (k += this.makeMetaElement(h));
    k += '<ui_event name="' + g + '">' + d + "</ui_event>";
    e = "<event_descriptor>" + e.toSerializedString();
    k += e + "</event_descriptor>";
    k += this.createCustomFields(b, c);
    k += "</tool_message>";
    a.ctatdebug("messageString = " + k);
    return k;
  };
  this.createTutorMessage = function(e, g, d, f, h, k, l, m) {
    a.ctatdebug("createTutorMessage()");
    var n = new Date;
    flashVars.getRawFlashVars();
    l = '<tutor_message context_message_id="' + this.getContextName() + '">';
    m || (l += this.makeMetaElement(n));
    g = '<semantic_event transaction_id="' + g + '" name="' + d + '"';
    "" !== k && (g += ' subtype="' + k + '"');
    l += g + "/>";
    e = "<event_descriptor>" + e.toXMLString(!0);
    l += e + "</event_descriptor>";
    e = "<action_evaluation ";
    f.hasClassification() && null != f.getAttributeString() && (e += f.getAttributeString());
    e += ">" + f.getEvaluation() + "</action_evaluation>";
    l += e;
    "" != h && (l += "<tutor_advice>" + h + "</tutor_advice>");
    void 0 != skillSet && null != skillSet ? (a.ctatdebug("Adding " + skillSet.getSize() + " skills to log message ..."), l += skillSet.toLogString()) : a.ctatdebug("No skills defined for this message");
    l += this.createCustomFields(b, c);
    l += "</tutor_message>";
    a.ctatdebug("messageString = " + l);
    return l;
  };
  this.createGenericMessage = function(b, c) {
    a.ctatdebug("createGenericMessage()");
    flashVars.getRawFlashVars();
    var d = '<message context_message_id="' + this.getContextName() + '">', d = d + b + "</message>";
    a.ctatdebug("messageString = " + d);
    return d;
  };
  this.makeMetaElement = function(b) {
    a.ctatdebug("makeMetaElement ()");
    var c = flashVars.getRawFlashVars(), d;
    d = "<meta>" + ("<user_id>" + c.user_guid + "</user_id>");
    d += "<session_id>" + c.session_id + "</session_id>";
    d += "<time>" + this.formatTimeStamp(b) + "</time>";
    return d += "<time_zone>" + flashVars.getTimeZone() + "</time_zone></meta>";
  };
  this.wrapForOLI = function(b) {
    a.ctatdebug("wrapForOLI ()");
    var c = new Date, d = flashVars.getRawFlashVars();
    b = encodeURIComponent(b);
    var f;
    f = '<?xml version="1.0" encoding="UTF-8"?><log_action ' + ('auth_token="' + encodeURIComponent(d.auth_token) + '" ');
    f = void 0 != d.log_session_id && null != d.session_id ? f + ('session_id="' + d.log_session_id + '" ') : f + ('session_id="' + d.session_id + '" ');
    f = f + 'action_id="EVALUATE_QUESTION" ' + ('user_guid="' + d.user_guid + '" ');
    f += 'date_time="' + this.formatTimeStampOLI(c) + '" ';
    f += 'timezone="' + flashVars.getTimeZone() + '" ';
    f += 'source_id="' + d.source_id + '" ';
    f = d.activity_context_guid ? f + ('external_object_id="' + d.activity_context_guid + '" info_type="tutor_message.dtd">') : f + 'external_object_id="" info_type="tutor_message.dtd">';
    return b = f + b + "</log_action>";
  };
  this.createLogSessionStart = function() {
    a.ctatdebug("createLogSessionStart ()");
    var b = new Date;
    a.ctatdebug("Date: " + b);
    var c = '<log_session_start timezone="' + flashVars.getTimeZone() + '" ', d = flashVars.getRawFlashVars(), c = c + ('date_time="' + this.formatTimeStampOLI(b) + '" '), c = c + ('auth_token="' + d.auth_token + '" '), c = c + ('session_id="' + d.session_id + '" '), c = c + ('user_guid="' + d.user_guid + '" ');
    return c + 'class_id="" treatment_id="" assignment_id="" info_type="tutor_message.dtd"/>';
  };
  this.formatTimeStamp = function(b) {
    a.ctatdebug("formatTimeStamp (" + b + ")");
    var c = "", d = b.getUTCFullYear(), c = c + (d + "-"), d = b.getUTCMonth();
    d++;
    c += (10 > d ? "0" + d : d) + "-";
    d = b.getUTCDate();
    c += (10 > d ? "0" + d : d) + " ";
    d = b.getUTCHours();
    c += (10 > d ? "0" + d : d) + ":";
    d = b.getUTCMinutes();
    c += (10 > d ? "0" + d : d) + ":";
    d = b.getUTCSeconds();
    c += 10 > d ? "0" + d : d;
    b = b.getUTCMilliseconds();
    return c = c + "." + b;
  };
  this.formatTimeStampOLI = function(b) {
    a.ctatdebug("formatTimeStampOLI (" + b + ")");
    var c = "", d = b.getUTCFullYear(), c = c + (d + "/"), d = b.getUTCMonth();
    d++;
    c += (10 > d ? "0" + d : d) + "/";
    d = b.getUTCDate();
    c += (10 > d ? "0" + d : d) + " ";
    d = b.getUTCHours();
    c += (10 > d ? "0" + d : d) + ":";
    d = b.getUTCMinutes();
    c += (10 > d ? "0" + d : d) + ":";
    d = b.getUTCSeconds();
    c += 10 > d ? "0" + d : d;
    b = b.getUTCMilliseconds();
    return c = c + "." + b;
  };
  this.resetCustomFields = function() {
    a.ctatdebug("resetCustomFields ()");
    b = [];
    c = [];
  };
  this.createCustomFields = function(b, c) {
    a.ctatdebug("createCustomFields ()");
    if (null == b || null == c) {
      return a.ctatdebug("No custom fields provided"), "";
    }
    a.ctatdebug("Processing " + b.length + " custom fields ...");
    for (var d = "", f = 0;f < b.length;f++) {
      a.ctatdebug("Adding custom field: [" + b[f] + "],[" + c[f] + "]"), d += "<custom_field>", d += "<name>" + b[f] + "</name>", d += "<value>" + c[f] + "</value>", d += "</custom_field>";
    }
    return d;
  };
  this.addCustomFields = function(e, g) {
    a.ctatdebug("addCustomFields ()");
    if (void 0 != e) {
      for (var d = 0;d < e.length;d++) {
        b.push(e[d]), c.push(g[d]);
      }
    }
  };
  this.addCustomField = function(e, g) {
    a.ctatdebug("addCustomfield (" + e + "," + g + ")");
    b.push(e);
    c.push(g);
  };
  this.getCustomFieldNames = function() {
    return b;
  };
  this.getCustomFieldValues = function() {
    return c;
  };
};
CTATLogMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATLogMessageBuilder.prototype.constructor = CTATLogMessageBuilder;
var CTATTutorMessageBuilder = function() {
  CTATBase.call(this, "CTATTutorMessageBuilder", "__undefined__");
};
CTATTutorMessageBuilder.isHint = function(a) {
  return null === a || "undefined" === typeof a ? !1 : 0 === a.toString().toLowerCase().indexOf(CTATTutorMessageBuilder.HINT.toLowerCase());
};
CTATTutorMessageBuilder.isCorrect = function(a) {
  if (null === a || "undefined" === typeof a) {
    return !1;
  }
  a = a.toString().toLowerCase();
  return 0 === a.indexOf(CTATTutorMessageBuilder.CORRECT.toLowerCase()) ? !0 : 0 === a.indexOf(CTATExampleTracerLink.SUCCESS.toLowerCase());
};
CTATTutorMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATTutorMessageBuilder.prototype.createInCorrectActionMessage = function(a, b) {
  this.ctatdebug("createInCorrectActionMessage ()");
  var c;
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>InCorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>");
  this.ctatdebug("In CTATTutorMessageBuilder " + b);
  c += b.toXMLString(!1);
  return c + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createCorrectActionMessage = function(a, b) {
  this.ctatdebug("createCorrectActionMessage ()");
  var c;
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>CorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
  return c += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createAssociatedRulesMessageForHint = function(a, b, c, e, g) {
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType><Indicator>Hint</Indicator>" + c.toXMLString();
  c += "<TutorAdvice>";
  a = a.getUniqueID();
  for (var d = 0;d < b.length;d++) {
    c += "<value><![CDATA[" + b[d] + "]]\x3e</value>";
  }
  c += "</TutorAdvice><TotalHintsAvailable>" + b.length + "</TotalHintsAvailable><CurrentHintNumber>1</CurrentHintNumber>";
  c += "<Actor>Student</Actor>";
  c += this.fmtSkillBarVector(e);
  c += "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>";
  c += "<StepID>" + a + "</StepID>";
  c += "<transaction_id>" + g + "</transaction_id>";
  c += "<LogAsResult>true</LogAsResult>";
  return c += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createAssociatedRulesMessageForAction = function(a, b, c, e, g, d, f) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType>" + ("<Indicator>" + (CTATTutorMessageBuilder.isCorrect(a) ? "Correct" : "InCorrect") + "</Indicator>");
  a += b.toXMLString();
  b = c.toXMLString().replace("<Selection>", "<StudentSelection>").replace("<Action>", "<StudentAction>").replace("<Input>", "<StudentInput>");
  b = b.replace("</Selection>", "</StudentSelection>").replace("</Action>", "</StudentAction>").replace("</Input>", "</StudentInput>");
  a = a + b + "<Actor>Student</Actor>";
  a += this.fmtSkillBarVector(e);
  a += "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>";
  a += "<StepID>" + g + "</StepID>";
  a += "<transaction_id>" + d + "</transaction_id>";
  f && (a += "<TutorAdvice><![CDATA[" + f + "]]\x3e</TutorAdvice>");
  a += "<LogAsResult>true</LogAsResult>";
  a += "<end_of_transaction>" + (f ? !1 : !0) + "</end_of_transaction>";
  return a += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.isDoneStep = function(a, b) {
  b[0] = !1;
  var c = a.getIndicator();
  if (!c) {
    return !1;
  }
  var e = a.getStudentSelection();
  e || (e = a.getProperty("tool_selection"));
  b[0] = CTATTutorMessageBuilder.isCorrect(indicator);
  var g = "done" == e;
  this.ctatdebug("isDoneStep() indicatorObj " + c + ", selectionObj " + e + ", correct[0] " + b[0] + ", result " + g);
  return g;
};
CTATTutorMessageBuilder.prototype.createHintMessage = function(a, b, c, e) {
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>ShowHintsMessage</MessageType><HintsMessage>";
  for (var g = 0;g < a.length;g++) {
    c += "<value><![CDATA[" + a[g] + "]]\x3e</value>";
  }
  c = c + "</HintsMessage>" + b.toXMLString();
  c += "<transaction_id>" + e + "</transaction_id>";
  return c += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createErrorMessage = function(a, b) {
  var c;
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>TutoringServiceError</MessageType><ErrorType>" + (a ? a : "Unknown Error") + "</ErrorType><Details>";
  c += b ? b : "";
  return c += "</Details></properties></message>";
};
CTATTutorMessageBuilder.prototype.createSuccessMessage = function(a, b) {
  var c;
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>SuccessMessage</MessageType>" + ("<SuccessMsg><![CDATA[" + b + "]]\x3e</SuccessMsg>") + ("<transaction_id>" + a + "</transaction_id>");
  c += "<end_of_transaction>true</end_of_transaction>";
  return c += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createBuggyMessage = function(a, b) {
  var c;
  c = "<message><verb>SendNoteProperty</verb><properties><MessageType>BuggyMessage</MessageType>" + ("<BuggyMsg><![CDATA[" + b + "]]\x3e</BuggyMsg>") + ("<transaction_id>" + a + "</transaction_id>");
  c += "<end_of_transaction>true</end_of_transaction>";
  return c += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createLockWidgetMsg = function(a) {
  return a = "<message><verb>SendNoteProperty</verb><properties><MessageType>SendWidgetLock</MessageType>" + ("<WidgetLockFlag>" + a + "</WidgetLockFlag>") + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createMessage = function(a, b) {
  var c = "<message><verb>SendNoteProperty</verb><properties><MessageType>" + a + "</MessageType>";
  if (b) {
    for (var e in b) {
      c += "<" + e + ">" + b[e] + "</" + e + ">";
    }
  }
  c += "</properties></message>";
  this.ctatdebug("CTATTutorMessageBuilder.createMessage(" + a + ", " + b + ") returns " + c);
  return c;
};
CTATTutorMessageBuilder.prototype.createStateGraphMessage = function(a, b, c, e, g, d, f) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>StateGraph</MessageType>" + ("<caseInsensitive>" + a + "</caseInsensitive>") + ("<unordered>" + b + "</unordered>");
  a += "<lockWidget>" + c + "</lockWidget>";
  a += "<suppressStudentFeedback>" + e + "</suppressStudentFeedback>";
  a += "<highlightRightSelection>" + g + "</highlightRightSelection>";
  a += "<confirmDone>" + d + "</confirmDone>";
  a += "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>";
  a += this.fmtSkillBarVector(f);
  return a += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.fmtSkillBarVector = function(a) {
  var b = "";
  if (void 0 !== a && null !== a && 0 < a.length) {
    for (var b = b + "<Skills>", c = 0;c < a.length;c++) {
      b += "<value><![CDATA[" + a[c] + "]]\x3e</value>";
    }
    b += "</Skills>";
  }
  return b;
};
CTATTutorMessageBuilder.prototype.createHighlightWidgetMessage = function(a, b, c, e) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>HighlightMsg</MessageType>" + ("<HighlightMsgText>" + c + "</HighlightMsgText>") + ("<Selection><value>" + a + "</value></Selection>");
  a += "<Action><value>" + b + "</value></Action>";
  a += "<transaction_id>" + e + "</transaction_id>";
  a += "<end_of_transaction>true</end_of_transaction>";
  return a += "</properties></message>";
};
Object.defineProperty(CTATTutorMessageBuilder, "TRIGGER", {enumerable:!1, configurable:!1, writable:!1, value:"trigger"});
Object.defineProperty(CTATTutorMessageBuilder, "SUBTYPE", {enumerable:!1, configurable:!1, writable:!1, value:"subtype"});
Object.defineProperty(CTATTutorMessageBuilder, "TUTOR_PERFORMED", {enumerable:!1, configurable:!1, writable:!1, value:"tutor-performed"});
Object.defineProperty(CTATTutorMessageBuilder, "HINT", {enumerable:!1, configurable:!1, writable:!1, value:"Hint"});
Object.defineProperty(CTATTutorMessageBuilder, "CORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"Correct"});
CTATTutorMessageBuilder.prototype.constructor = CTATTutorMessageBuilder;
"undefined" !== typeof module && (module.exports = CTATTutorMessageBuilder);
var CTATCompBase = function(a, b, c, e, g, d) {
  CTATBase.call(this, a, b);
  var f = c || 0, h = e || 0, k = g || -2, l = d || -2, m = 50, n = 25, p = !1, u = "", t = !1, v = !0, w = null, x = "", C = -1;
  this.isTabIndexable = !0;
  var D = 0, y = null, A = null, r = this, B = null, q = "hidden", E = CTATGlobalFunctions.gensym.z_index(), F = CTATGlobalFunctions.gensym.div_id(), z = CTATGlobalFunctions.gensym.z_index(), G = CTATGlobalFunctions.gensym.div_id();
  this.setIsAbstractComponent = function(a) {
    p = a;
  };
  this.isAbstractComponent = function() {
    return p;
  };
  this.setTabIndex = function(a) {
    !0 === this.isTabIndexable ? (C = a, 0 > C ? (C = CTATGlobals.Tab.Tracker, CTATGlobals.Tab.Tracker++) : CTATGlobals.Tab.Tracker = C) : C = -1;
  };
  this.getTabIndex = function() {
    return C;
  };
  this.setZIndex = function(a) {
    r.ctatdebug("Setting z index to: " + a);
    D = a;
    null !== w && (w.style.zIndex = a);
  };
  this.getZIndex = function() {
    return D;
  };
  this.setDefaultWidth = function(a) {
    m = a;
  };
  this.getDefaultWidth = function() {
    return m;
  };
  this.setDefaultHeight = function(a) {
    n = a;
  };
  this.getDefaultHeight = function() {
    return n;
  };
  this.processCommShellEvent = function(a, b) {
    r.ctatdebug("processCommShellEvent (" + a + ")");
  };
  this.makeDivWrapper = function(a) {
    w = document.createElement("div");
    w.id = this.getName();
    w.setAttribute("onkeypress", "return noenter(event)");
    w.setAttribute("data-ctat-component", this.getClassName());
    w.style.position = "absolute";
    w.style.left = f + "px";
    w.style.top = h + "px";
    w.style.zIndex = E;
    w.style.width = r.getWidth() + "px";
    w.style.height = r.getHeight() + "px";
    $(w).data("CTATComponent", this);
    a.appendChild(w);
  };
  this.setDivWrapper = function(a) {
    w = a;
    w.setAttribute("data-ctat-component", this.getClassName());
  };
  var K = this.setClassName;
  this.setClassName = function(a) {
    K(a);
    w && w.setAttribute("data-ctat-component", this.getClassName());
  };
  this.wrapComponent = function(a) {
    r.ctatdebug("wrapComponent ()");
    r.makeDivWrapper(a);
    r.ctatdebug("wrapComponent () done");
  };
  this.createCanvas = function() {
    r.ctatdebug("createCanvas ()");
    B = document.createElement("canvas");
    B.setAttribute("id", G);
    B.setAttribute("onkeypress", "return noenter(event)");
    B.setAttribute("width", k + canvasCalibrate + "px");
    B.setAttribute("height", l + canvasCalibrate + "px");
    B.setAttribute("style", "border: 1px " + this.borderColor + " solid; " + ("hidden" == q ? "visibility: hidden; " : "") + "z-index:" + z + ";");
    w.firstChild ? w.insertBefore(B, w.firstChild) : w.appendChild(B);
    return B;
  };
  this.redraw = function() {
    var a = w.style.display;
    w.style.display = "none";
    w.style.display = a;
  };
  this.setCanvasVisibility = function(a) {
    q = a;
  };
  this.getSubCanvasCtx = function() {
    if (B) {
      return B.getContext("2d");
    }
  };
  this.getSubCanvas = function() {
    return B;
  };
  this.getX = function() {
    return f;
  };
  this.getY = function() {
    return h;
  };
  this.getWidth = function() {
    if (0 >= k) {
      var a;
      y ? a = window.getComputedStyle(y) : w && (a = window.getComputedStyle(w));
      if (a) {
        return parseFloat(a.width);
      }
    }
    return k;
  };
  this.getHeight = function() {
    if (0 >= l && w) {
      var a = window.getComputedStyle(w);
      return parseFloat(a.getPropertyValue("height"));
    }
    return l;
  };
  this.getText = function() {
    return u;
  };
  this.getEnabled = function() {
    return v;
  };
  this.assignEnabled = function(a) {
    v = a;
  };
  this.setEnabled = function(a) {
    r.ctatdebug("setEnabled (" + a + ")");
    r.assignEnabled(a);
    y ? y.disabled = !v : r.ctatdebug("Error: component pointer is null");
  };
  this.lock = this.setEnabled.bind(r, !1);
  this.unlock = this.setEnabled.bind(r, !0);
  this.getDivWrap = function() {
    return w;
  };
  this.getComponent = function() {
    return y;
  };
  Object.defineProperty(this, "component", {get:function() {
    return y;
  }});
  this.getLabel = function() {
    return A;
  };
  this.getCanvasZIndex = function() {
    return z;
  };
  this.getComponentGroup = function() {
    return x;
  };
  this.setComponent = function(a) {
    y = a;
    y.classList.add("CTAT-gen-component");
    this.setEnabled(this.getEnabled());
  };
  this.getTopDivZIndex = function() {
    return E;
  };
  this.getTopDivID = function() {
    return F;
  };
  this.setComponentGroup = function(a) {
    x = a;
    y && (y.name = a);
  };
  this.setLabel = function(a) {
    A = a;
  };
  this.assignText = function(a) {
    u = a;
  };
  this.init = function() {
    r.ctatdebug("THIS IS THE BASE INIT METHOD");
  };
  this.initialize = function() {
    r.ctatdebug("initialize ()");
    r.configFromDescription();
    r.init();
    r.processSerialization();
    r.render();
    r.processTabOrder();
    r.ctatdebug("initialize () done");
  };
  this.getInitialized = function() {
    return t;
  };
  this.setInitialized = function(a) {
    r.ctatdebug("setInitialized (" + a + ")");
    t = a;
    !0 !== t || w ? r.ctatdebug("Not wrapping, initialized=" + t + ", divWrapper = " + w) : (r.ctatdebug("Wrapping a component and appending it to the top container div if one was never set ..."), (a = findPointOfAttachment(this.getName())) ? (r.ctatdebug("Attaching component to existing MovieClip ..."), r.wrapComponent(a.getDivWrapper())) : (r.ctatdebug("Attaching component to main div ..."), $("#" + ctatcontainer).first() && r.wrapComponent(getSafeElementById(ctatcontainer))));
    r.ctatdebug("setInitialized () done");
  };
  this.addSafeEventListener = function(a, b, d) {
    r.ctatdebug("addSafeEventListener (" + a + ")");
    r.ctatdebug("Adding event listener to: " + d);
    d ? d.addEventListener(a, b) : (y ? (r.ctatdebug("Adding eventlistener to component instead of target"), y.addEventListener(a, b)) : r.ctatdebug("Error: pointer to component is null, can't add event listener"), r.ctatdebug("addSafeEventListener () done"));
  };
  this.drawComponent = function() {
  };
  this.addComponentReference = function(a, b) {
    r.ctatdebug("addComponentReference (" + a.getName() + " -> " + b.getAttribute("id") + ")");
    a.tabIndex = this.getTabIndex();
    CTATComponentReference.add(a, b);
    r.ctatdebug("addComponentReference ()");
  };
  this.getComponentFromID = function(a) {
    return CTATComponentReference.getComponentFromID(a);
  };
  this.processSerialization = function() {
    r.ctatdebug("processSerialization()");
    r.ctatdebug("implement in child class");
  };
  this.move = function(a, b) {
    f = a;
    h = b;
    w && (w.style.left = f + "px", w.style.top = h + "px");
  };
  this.setSize = function(a, b) {
    r.ctatdebug("setSize (" + a + "," + b + ")");
    this.setWidth(a);
    this.setHeight(b);
  };
  this.SetVisible = this.setVisible = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    q = !0 === a ? "block" : "hidden";
    B && B.setAttribute("style", "border: 0px; position: absolute; " + (a ? "" : "visibility:hidden; ") + "; left:" + f + "px; top:" + h + "px; z-index:" + z + ";");
    w.style.visibility = !0 === a ? null : "hidden";
  };
  this.FadeIn = function(a) {
    r.SetVisible(!0);
  };
  this.FadeOut = function(a) {
    r.SetVisible(!1);
  };
  this.reset = function() {
  };
  this.setX = function(a) {
    this.x = a;
    w.style.left = this.x + "px";
    !0 === t && this.render();
  };
  this.setY = function(a) {
    this.y = a;
    w.style.top = this.y + "px";
    !0 === t && this.render();
  };
  this.setWidth = function(a) {
    k = a;
    w && (w.style.width = this.width);
    this.render();
  };
  this.setHeight = function(a) {
    l = a;
    w && (w.style.width = this.width);
    this.render();
  };
  this.setText = function(a) {
    u = a;
    return this;
  };
  this.getValue = function() {
    return y ? y.value : "";
  };
  this.backgrade = !1;
  this.processOnFocus = function() {
    r.ctatdebug("processOnFocus (" + r.getName() + ")");
    CTATGlobals.Tab.previousFocus && CTATGlobals.Tab.previousFocus.setHintHighlight && CTATGlobals.Tab.previousFocus.setHintHighlight(!1, null, null);
    CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus;
    CTATGlobals.Tab.Focus != r ? (r.ctatdebug("CTATGlobals.Tab.Focus!=pointer, updating CTATGlobals.Tab.Focus ..."), CTATGlobals.Tab.Focus = r) : r.ctatdebug("CTATGlobals.Tab.Focus==pointer");
    r.ctatdebug("processOnFocus () done");
  };
  this.processFocus = function(a) {
    r.ctatdebug("processFocus ()");
    a.currentTarget.getAttribute("id");
    if (r) {
      mobileAPI && !0 === mobileAPI.getEnabled() && r.hideKeyboard();
      commShell && commShell.processComponentFocus(r);
      if (CTATGlobals.Tab.Focus) {
        r.ctatdebug("old focus: " + CTATGlobals.Tab.Focus.getName() + ", new focus:" + r.getName());
        if (CTATGlobals.Tab.Focus == r) {
          r.ctatdebug("We're already there!");
          return;
        }
        CTATGlobals.Tab.Focus.backgrade && CTATGlobals.Tab.Focus.processAction();
      } else {
        r.ctatdebug("No previously focused component yet, can't grade");
      }
      "hint" == r.getClassName() || "CTATHintButton" == r.getClassName() ? r.ctatdebug("Info: focus moved to hint, bump") : (CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus, CTATGlobals.Tab.Focus = r, r.ctatdebug("processFocus () done"));
    } else {
      r.ctatdebug("Error: component reference is null");
    }
  };
  this.processTabOrder = function() {
    r.ctatdebug("processTabOrder (" + C + ")");
    !0 === p ? r.ctatdebug("Component is an abstract component, bump") : y ? (r.ctatdebug("We have a component, actually assigning to html component ..."), y.tabIndex = C, y.onfocus = r.processOnFocus) : r.ctatdebug("Error: we don't have an html component yet, can't assign tab index");
  };
  this.hideKeyboard = function() {
    document.activeElement.blur();
    $("input").blur();
  };
};
CTATCompBase.prototype = Object.create(CTATBase.prototype);
CTATCompBase.prototype.constructor = CTATCompBase;
var CTATMovieClip = function(a, b, c, e, g) {
  CTATBase.call(this, "CTATMovieClip", a);
  var d = CTATGlobalFunctions.gensym.z_index(), f = CTATGlobalFunctions.gensym.div_id(), h = CTATGlobalFunctions.gensym.z_index();
  CTATGlobalFunctions.gensym.div_id();
  var k = [], l = this, m = null;
  this.wrapComponent = function(a) {
    m = document.createElement("div");
    m.setAttribute("id", f);
    m.setAttribute("name", this.getName());
    m.setAttribute("style", "z-index: " + d);
    m.setAttribute("width", e + "px");
    m.setAttribute("height", g + "px");
    m.setAttribute("style", "border: 0px; position: absolute; left:" + b + "px; top:" + c + "px; z-index:" + h + ";");
    a.appendChild(m);
    return m;
  };
  this.getDivWrapper = function() {
    return m;
  };
  this.addComponent = function(a) {
    l.ctatdebug("addComponent (" + a + ")");
    k.push(a);
  };
  this.isRegistered = function(a) {
    for (var b = 0;b < k.length;b++) {
      if (k[b] == a) {
        return !0;
      }
    }
    return !1;
  };
};
CTATMovieClip.prototype = Object.create(CTATBase.prototype);
CTATMovieClip.prototype.constructor = CTATMovieClip;
CTAT.Component = {};
CTAT.Component.Base = {};
CTAT.Component.Base.Style = function(a, b, c, e, g, d) {
  CTATCompBase.call(this, a, b, c, e, g, d);
  var f = new CTATCSS;
  this.addCSSAttribute = function(a, b) {
    f.addCSSAttribute(a, b);
    this.render();
  };
  this.removeCSSAttribute = function(a) {
    f.removeCSSAttribute(a);
    this.render();
  };
  this.addStringCSS = function(a) {
    f.addStringCSS(a);
    this.render();
  };
  this.removeStringCSS = function(a) {
    f.removeStringCSS(a);
    this.render();
  };
  this.modifyCSSAttribute = function(a, b) {
    f.modifyCSSAttribute(a, b);
    this.render();
  };
  this.getCSS = function() {
    return f.toCSSString();
  };
  this.render = function() {
    !0 === this.isAbstractComponent() ? this.ctatdebug("Component is an abstract component, bump") : this.getInitialized() && (this.getComponent() ? this.ctatdebug(f.toCSSString()) : this.ctatdebug("Internal error, html component not available for rendering"));
  };
  this.setStyleAll = function(a, b) {
    this.getSubCanvas() && this.getSubCanvas().setAttribute(a, b);
    this.modifyCSSAttribute(a, b);
  };
};
CTAT.Component.Base.Style.prototype = Object.create(CTATCompBase.prototype);
CTAT.Component.Base.Style.prototype.constructor = CTAT.Component.Base.Style;
var CTATPlayButton = function() {
  function a() {
    d.setFillColor("black");
    d.drawTriangleFilled();
    g.setFillColor("rgb(36, 85, 00)");
    g.drawCircleFilled();
  }
  function b() {
    d.setFillColor("white");
    d.drawTriangleFilled();
    g.setFillColor("green");
    g.drawCircleFilled();
  }
  function c() {
    e.removeComponent();
    getSafeElementById(ctatcontainer).removeChild(h);
    initTutor();
  }
  CTATBase.call(this, "CTATPlayButton", "__undefined__");
  var e = null, g = null, d = null, f = null, h = null;
  (function() {
    var a = getSafeElementById(ctatcontainer);
    h = document.createElement("div");
    h.id = "ctatdivPlayTutor";
    h.width = a.width;
    h.height = a.height;
    h.setAttribute("style", "width: " + a.width + "px; height: " + a.height + "px; left: 0px; top: 0px; position:absolute");
    getSafeElementById("container").appendChild(h);
  })();
  (function() {
    e = new CTATCanvasComponent;
    var k = h.height / 3;
    f = new CTATShape("PlayTutor", "play background", 0, 0, h.width + 1, h.height + 1);
    f.addPoint(0, 0);
    f.setFillColor("rgb(66, 0, 66)");
    f.drawRectangleFilled();
    g = new CTATShape("PlayTutor", "play circle", h.width / 2 - k, h.height / 2 - k, 2 * k, 2 * k);
    g.addPoint(0, 0);
    g.setFillColor("green");
    g.setRadius(k);
    g.drawCircleFilled();
    d = new CTATShape("PlayTutor", "play triangle", g.getXOffset() + .25 * g.getWidth() - 5, g.getYOffset() + .25 * g.getHeight() - 5, g.getWidth() - .25 * g.getWidth(), .6 * g.getHeight());
    d.addPoint(0, 0);
    d.addPoint(0, d.getHeight());
    d.addPoint(d.getWidth(), d.getHeight() / 2);
    d.setFillColor("white");
    d.drawTriangleFilled();
    e.addShape(f);
    e.addShape(g);
    e.addShape(d);
    g.addEventListener("mouseover", a);
    g.addEventListener("mouseout", b);
    d.addEventListener("mouseover", a);
    d.addEventListener("mouseout", b);
    d.addEventListener("click", c);
    g.addEventListener("click", c);
  })();
};
CTATPlayButton.prototype = Object.create(CTATBase.prototype);
CTATPlayButton.prototype.constructor = CTATPlayButton;
var CTATSkill = function() {
  CTATBase.call(this, "CTATSkill", "skill");
  var a = "", b = "", c = "", e = "", g = 0, d = "", f = !1, h = "", k = "", l = "", m = "", n = "";
  this.setSkillName = function(b) {
    a = b;
  };
  this.setDisplayName = function(a) {
    b = a;
  };
  this.setModelName = function(a) {
    e = a;
  };
  this.setCategory = function(a) {
    c = a;
  };
  this.setLevel = function(a) {
    !0 === isNaN(a) ? ctatdebug("Error: attempting to set a level to NaN") : (g = a, this.setPKnown(String(g)));
  };
  this.setDescription = function(a) {
    d = a;
  };
  this.getSkillName = function() {
    return a;
  };
  this.getDisplayName = function() {
    return b;
  };
  this.hasDisplayName = function() {
    return "" !== b && null !== b;
  };
  this.getModelName = function() {
    return e;
  };
  this.hasCategory = function() {
    return "" !== c;
  };
  this.hasModelName = function() {
    return "" !== e;
  };
  this.getCategory = function() {
    return c;
  };
  this.getLevel = function() {
    return g;
  };
  this.getDescription = function() {
    return d;
  };
  this.setTouched = function(a) {
    f = a;
  };
  this.getTouched = function() {
    return f;
  };
  this.toXMLString = function() {
    return "";
  };
  this.toSetPreferencesXMLString = function() {
    var f = '<skill label="' + b + '" pSlip="' + k + '" description="' + d;
    return f += '" pKnown="' + l + '" category="' + c + '" pLearn="' + m + '" name="' + a + '" pGuess="' + h + '" history="' + n + '" />';
  };
  this.setPGuess = function(a) {
    h = a;
  };
  this.getPGuess = function() {
    return h;
  };
  this.setPSlip = function(a) {
    k = a;
  };
  this.getPSlip = function() {
    return k;
  };
  this.setPLearn = function(a) {
    m = a;
  };
  this.getPLearn = function() {
    return m;
  };
  this.setPKnown = function(a) {
    l = a;
  };
  this.getPKnown = function() {
    return l;
  };
  this.setSkillHistory = function(a) {
    n = a;
  };
  this.getSkillHistory = function() {
    return n;
  };
};
CTATSkill.prototype = Object.create(CTATBase.prototype);
CTATSkill.prototype.constructor = CTATSkill;
var CTATSkillSet = function() {
  CTATBase.call(this, "CTATSkillSet", "skills");
  this.skillSet = [];
  var a = this;
  this.fromXMLString = function(a) {
    this.ctatdebug("fromXMLString ()");
    this.ctatdebug("Skills string: " + a);
    if (null == a) {
      this.ctatdebug("Warning: skill object is null");
    } else {
      if ("" == a) {
        this.ctatdebug("Info: empty skill string provided, bump");
      } else {
        this.ctatdebug("CTATSkillSet.fromXMLString() Raw:     " + a);
        a = decodeURIComponent(a.replace(/\+/g, " "));
        this.ctatdebug("CTATSkillSet.fromXMLString() Decoded: " + a);
        if (null != /\/<value>.+<\/value>/.exec(a)) {
          this.parseByValue(a);
        } else {
          var c = (new CTATXML).parseXML(a);
          this.parseByAttributes(c, a);
        }
        this.ctatdebug("fromXMLString () done");
      }
    }
  };
  this.fromXMLData = function(a, c) {
    this.ctatdebug("fromXMLData ()");
    null != /\/<value>.+<\/value>/.exec(c) ? this.parseByValue(c) : this.parseByAttributes(a);
    this.ctatdebug("fromXMLData () done");
  };
  this.parseByValue = function(b) {
    this.ctatdebug("parseByValue()");
    if (null == b) {
      a.ctatdebug("Error: aSkills is null");
    } else {
      b = b.childNodes;
      for (var c = new CTATXML, e = 0;e < b.length;e++) {
        var g = c.getNodeTextValue(b[e]).split("`"), d = g[0].split(" ");
        4 == g.length ? this.addSkill(d[0], g[1], g[2], g[3], g[3], d[1]) : this.addSkill(d[0], g[1], g[2], g[3], g[4], d[1]);
      }
    }
  };
  this.parseDOM = function(a) {
    this.ctatdebug("parseDOM()");
    var c = new CTATXML;
    a = c.getElementChildren(a);
    for (var e = 0;e < a.length;e++) {
      var g = c.getNodeTextValue(a[e]).split("`"), d = g[0].split(" ");
      4 == g.length ? this.addSkill(d[0], g[1], g[2], g[3], g[3], d[1]) : this.addSkill(d[0], g[1], g[2], g[3], g[4], d[1]);
    }
  };
  this.parseByAttributes = function(b) {
    this.ctatdebug("parseByAttributes()");
    if (null == b) {
      a.ctatdebug("Error: aSkills is null");
    } else {
      if (b = b.childNodes, null == b) {
        this.ctatdebug("Error: list of skill xml elements is null");
      } else {
        for (var c = 0;c < b.length;c++) {
          var e = b[c];
          if ("Skill" == e.nodeName || "skill" == e.nodeName) {
            this.ctatdebug("Parsing node (" + c + "): " + e.nodeName + " -> " + e.nodeValue);
            var g = "";
            e.attributes.getNamedItem("history") && (g = e.attributes.getNamedItem("history").value);
            this.addSkill(e.attributes.getNamedItem("name").value, e.attributes.getNamedItem("pKnown").value, .95, e.attributes.getNamedItem("label").value, e.attributes.getNamedItem("label").value, e.attributes.getNamedItem("category").value, e.attributes.getNamedItem("pGuess").value, e.attributes.getNamedItem("pLearn").value, e.attributes.getNamedItem("pSlip").value, g);
          }
        }
      }
    }
  };
  this.getSkillSet = function() {
    return this.skillSet;
  };
  this.getSize = function() {
    return this.skillSet.length;
  };
  this.addSkill = function(a, c, e, g, d, f, h, k, l, m) {
    this.ctatdebug("addSkill() name = " + a + " level = " + c + " mastery = " + e + " aDescription = " + g + " adisplayName = " + d + " aCategory = " + f + " pguess= " + h + " plearn = " + k + " pslip = " + l + " history = " + m);
    a = this.setSkillLevel(a, c, e);
    this.ctatdebug("Configuring " + a.getDisplayName());
    "" !== g && null != g && a.setDescription(g);
    "" !== d && null != d && a.setDisplayName(d);
    "" !== f && null != f && a.setCategory(f);
    "" !== h && (a.setPGuess(h), a.setPLearn(k), a.setPSlip(l));
    "" != m && a.setSkillHistory(m);
    return a;
  };
  this.setSkillLevel = function(a, c, e) {
    this.ctatdebug("setSkillLevel (" + a + ")");
    var g = this.getSkill(a);
    null == g ? (this.ctatdebug("Skill not found, creating new one ..."), g = new CTATSkill, g.setSkillName(a), 1 == e ? g.setLevel(1) : g.setLevel(c), this.skillSet.push(g)) : (this.ctatdebug("Skill found, adjusting ..."), 1 == e ? g.setLevel(1) : g.setLevel(c));
    g.setTouched(!0);
    return g;
  };
  this.getSkill = function(a) {
    this.ctatdebug("getSkill (" + a + ") -> " + this.skillSet.length);
    if (null == a || "" === a) {
      return null;
    }
    for (var c = 0;c < this.skillSet.length;c++) {
      var e = this.skillSet[c];
      if (e.getSkillName() == a) {
        return this.ctatdebug("Returning: " + c), e;
      }
    }
    return null;
  };
  this.getSkillLevel = function(a) {
    if (null == a || "" === a) {
      return -1;
    }
    for (var c in this.skillSet) {
      if (c.getSkillName() == a) {
        return c.getLevel();
      }
    }
    return -1;
  };
  this.getTouched = function() {
    this.ctatdebug("getTouched ()");
    for (var a = [], c = 0;c < this.skillSet.length;c++) {
      var e = this.skillSet[c];
      !0 === e.getTouched() && (this.ctatdebug("Adding touched skill: " + e.getSkillName()), a.push(e));
    }
    return a;
  };
  this.untouchSkills = function() {
    this.ctatdebug("untouchSkills ()");
    for (var a = 0;a < this.skillSet.length;a++) {
      this.skillSet[a].setTouched(!1);
    }
  };
  this.toSetPreferencesXMLString = function() {
    for (var a = "<skills>", c = 0;c < this.skillSet.length;c++) {
      a += this.skillSet[c].toSetPreferencesXMLString();
    }
    return a + "</skills>";
  };
  this.toLogString = function() {
    for (var a = "", c = 0;c < this.skillSet.length;c++) {
      var e = this.skillSet[c], a = a + ('<skill probability="' + e.getLevel() + '"><name>' + e.getSkillName() + "</name>");
      e.hasCategory() && (a += "<category>" + e.getCategory() + "</category>");
      e.hasModelName() && (a += "<model_name>" + e.getModelName() + "</model_name>");
      a += "</skill>";
    }
    return a;
  };
};
CTATSkillSet.prototype = Object.create(CTATBase.prototype);
CTATSkillSet.prototype.constructor = CTATSkillSet;
"undefined" !== typeof module && (module.exports = CTATSkillSet);
var CTATComponentDescription = function() {
  CTATBase.call(this, "CTATComponentDescription", "");
  this.groupName = this.name = this.type = "Unknown";
  this.height = this.width = this.y = this.x = 0;
  this.tabIndex = this.zIndex = -1;
  this.styles = {};
  this.params = {};
  this.componentPointer = null;
  this.setComponentPointer = function(a) {
    this.componentPointer = a;
  };
  this.getComponentPointer = function() {
    return this.componentPointer;
  };
  this.setGenericDefaults = function() {
    this.name = "Generic name";
    this.styles = {BackgroundColor:"#ffffff", BorderColor:"#999999", FontName:CTATGlobals.Font.family, FontSize:CTATGlobals.Font.size, FontColor:CTATGlobals.Font.color, FontBold:!1, FontItalic:!1, FontUnderlined:!1, TextAlign:globalAlign, ShowHintHighlight:!1, blockOnCorrect:!1, disabledBackgroundColor:"#999999", disabledTextColor:"#999999", tutorComponent:null};
    return this;
  };
};
CTATComponentDescription.prototype = Object.create(CTATBase.prototype);
CTATComponentDescription.prototype.constructor = CTATComponentDescription;
CTAT.Component.Base.Graphical = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Style.call(this, a, b, e, g, d, f);
  var h = c || (new CTATComponentDescription).setGenericDefaults();
  this.getGrDescription = function() {
    return h;
  };
  this.setGrDescription = function(a) {
    h = a;
    this.processDescription(h);
  };
  var k = CTATGlobals.Visual.BackgroundColor, l = "white", m = 1, n = CTATGlobals.Visual.BorderColor, p = !1, u = "solid", t = 0, v = "1px", w = 0, x = CTATGlobals.Font.color, C = "black", D = CTATGlobals.Font.family, y = CTATGlobals.Font.size, A = !1, r = !1, B = !1;
  this.align = CTATGlobals.Align;
  this.getAlign = function() {
    return this.component ? $(this.component).css("text-align") : this.align;
  };
  this.setAlign = function(a) {
    this.align = a;
    this.component && this.getAlign() !== this.align && (this.component.style.textAlign = this.align);
    return this;
  };
  this.getBackgroundColor = function() {
    return this.component ? $(this.component).css("background-color") : k;
  };
  this.setBackgroundColor = function(a) {
    a = CTATGlobalFunctions.formatColor(a);
    a != this.getBackgroundColor() && (k = a, this.component && (this.component.style.backgroundColor = k));
    return this;
  };
  this.getDisabledBGColor = function() {
    return l;
  };
  this.setDisabledBGColor = function(a) {
    l = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getDisabledTextColor = function() {
    return C;
  };
  this.setDisabledTextColor = function(a) {
    C = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getBorderColor = function() {
    return this.component ? $(this.component).css("border-color") : n;
  };
  this.setBorderColor = function(a) {
    n = CTATGlobalFunctions.formatColor(a);
    this.component && n !== this.getBorderColor() && (this.component.style.borderColor = n);
    return this;
  };
  this.getBorderRoundness = function() {
    return this.component ? $(this.component).css("border-radius") : t;
  };
  this.setBorderRoundness = function(a) {
    a = parseInt(a);
    t = isNaN(a) ? 0 : a;
    this.component && this.getBorderRoundness() !== t && (this.component.style.borderRadius = t);
    return this;
  };
  this.getBorderStyle = function() {
    return this.component ? $(this.component).css("border-style") : u;
  };
  this.setBorderStyle = function(a) {
    u = a;
    this.component && this.getBorderStyle() !== u && (this.component.style.borderStyle = u);
    return this;
  };
  this.getBorderWidth = function() {
    return this.component ? $(this.component).css("borderWidth") : v;
  };
  this.setBorderWidth = function(a) {
    v = parseInt(a);
    isNaN(v) && (v = 0);
    this.component && this.getBorderWidth() !== v && (this.component.style.borderWidth = v);
    return this;
  };
  this.getPadding = function() {
    return this.component ? parseInt($(this.component).css("padding-left")) : w;
  };
  this.setPadding = function(a) {
    w = parseInt(a);
    isNaN(w) && (w = 0);
    this.component && this.getPadding() !== w && (this.component.style.padding = w + "px");
    return this;
  };
  this.getFontColor = function() {
    this.component && $(this.component).css("color");
    return x;
  };
  this.setFontColor = function(a) {
    x = CTATGlobalFunctions.formatColor(a);
    this.component && this.getFontColor() !== x && (this.component.style.color = x);
    return this;
  };
  this.getFontFamily = function() {
    return this.component ? $(this.component).css("font-family") : D;
  };
  this.setFontFamily = function(a) {
    D = a;
    this.component && this.getFontFamily() !== D && (this.component.style.fontFamily = D);
    return this;
  };
  this.getFontSize = function() {
    this.component && $(this.component).css("font-size");
    return y;
  };
  this.setFontSize = function(a) {
    a = parseInt(a);
    y = isNaN(a) ? CTATGlobals.Font.size : a;
    this.component && parseInt(this.getFontSize()) !== y && (this.component.style.fontSize = y + "pt");
    return this;
  };
  this.getShowBorder = function() {
    if (this.component) {
      var a = window.getComputedStyle(this.component);
      return "none" != a.getPropertyValue("border-style") && 0 < parseInt(a.getPropertyValue("border-width"));
    }
    return p;
  };
  this.setShowBorder = function(a) {
    p = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getShowBorder() !== p && (p ? (this.setBorderStyle(u), this.setBorderWidth(v)) : this.setBorderStyle("none"));
    return this;
  };
  this.getTransparencyValue = function() {
    return m;
  };
  this.setTransparencyValue = function(a) {
    m = Number(a);
    isNaN(m) && (m = 1);
    return this;
  };
  this.getUnderlined = function() {
    return this.component ? "underline" === window.getComputedStyle(this.component).getPropertyValue("text-decoration") : B;
  };
  this.setUnderlined = function(a) {
    B = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getUnderlined() !== B && (this.component.style.textDecoration = B ? "underline" : null);
    return this;
  };
  this.getBolded = function() {
    return this.component ? "bold" === window.getComputedStyle(this.component).getPropertyValue("font-weight") : A;
  };
  this.setBolded = function(a) {
    A = CTATGlobalFunctions.stringToBoolean(a);
    this.component && this.getBolded() !== A && (this.component.style.fontWeight = A ? "bold" : null);
    return this;
  };
  this.getItalicized = function() {
    return this.component ? "italic" === window.getComputedStyle(this.component).getPropertyValue("font-style") : r;
  };
  this.setItalicized = function(a) {
    r = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getItalicized() !== r && (this.component.style.fontStyle = r ? "italic" : null);
    return this;
  };
  var q = this;
  a = function(a) {
    var b = a || {};
    return {setHandler:function(a, d) {
      b[a] = d;
    }, set:function(a) {
      if (b.hasOwnProperty(a)) {
        if (b[a]) {
          var d = Array.prototype.slice.call(arguments, 1);
          return b[a].apply(q, d);
        }
        q.ctatdebug("Error: NULL handler for " + a);
      } else {
        q.ctatdebug("Error: No handler set for " + a);
      }
    }};
  };
  this.style_handlers = a({BackgroundColor:this.setBackgroundColor, BorderColor:this.setBorderColor, borderRoundness:this.setBorderRoundness, disabledBackgroundColor:this.setDisabledBGColor, disabledTextColor:this.setDisabledTextColor, DrawBorder:this.setShowBorder, FontFace:this.setFontFamily, FontSize:this.setFontSize, FontBold:this.setBolded, FontItalic:this.setItalicized, FontUnderlined:this.setUnderlined, labelText:this.setText, padding:this.setPadding, showBorder:this.setShowBorder, TextAlign:this.setAlign, 
  TextColor:this.setFontColor, transparencyValue:this.setTransparencyValue});
  this.setStyle = function(a, b) {
    this.style_handlers.set(a, b);
  };
  this.setStyleHandler = function(a, b) {
    this.style_handlers.setHandler(a, b);
  };
  this.parameter_handlers = a({group:this.setComponentGroup});
  this.setParameter = function(a, b) {
    this.parameter_handlers.set(a, b);
  };
  this.setParameterHandler = function(a, b) {
    this.parameter_handlers.setHandler(a, b);
  };
  this.data_ctat_handlers = {};
  this.processAttributes = function() {
    if (this.getDivWrap()) {
      var a = $(this.getDivWrap()), b = a.attr("tabindex");
      void 0 !== b && (this.setTabIndex(parseInt(b)), a.attr("tabindex", null));
      b = a.attr("name");
      void 0 !== b && this.setComponentGroup(b);
      for (var d in this.data_ctat_handlers) {
        b = a.data("ctat-" + d), void 0 !== b && this.data_ctat_handlers[d].apply(this, [b]);
      }
    }
  };
  this.data_ctat_handlers.enabled = function(a) {
    this.setEnabled(CTATGlobalFunctions.toBoolean(a));
  };
  this.processParameters = function(a) {
    if (a instanceof CTATComponentDescription) {
      q.setName(a.name);
      a = a.params;
      for (var b in a) {
        this.setParameter(b, a[b]);
      }
    } else {
      this.ctatdebug("Error: Invalid description sent to CTAT.Components.Hierarchy.Graphical.processDescription: " + a);
    }
  };
  this.processStyles = function(a) {
    this.component && this.component.classList.add("CTAT-gen-component");
    if (a instanceof CTATComponentDescription) {
      a = a.styles;
      for (var b in a) {
        this.setStyle(b, a[b]);
      }
    } else {
      this.ctatdebug("Error: Invalid description sent to CTAT.Components.Hierarchy.Graphical.processDescription: " + a);
    }
  };
  this.processDescription = function(a) {
    this.processParameters(a);
    this.processStyles(a);
  };
  this.configFromDescription = function() {
    this.processParameters(h);
  };
  this.processSerialization = function() {
    this.processStyles(h);
  };
};
CTAT.Component.Base.Graphical.prototype = Object.create(CTAT.Component.Base.Style.prototype);
CTAT.Component.Base.Graphical.prototype.constructor = CTAT.Component.Base.Graphical;
var CTATSkillWindow = function(a, b, c, e, g) {
  CTAT.Component.Base.Graphical.call(this, "CTATSkillWindow", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(240);
  this.setDefaultHeight(140);
  var d = this;
  d.isTabIndexable = !1;
  var f = 150;
  this.setSkillBarWidth = function(a) {
    f = parseInt(a);
    isNaN(f) && (f = 150);
  };
  this.setStyleHandler("SkillBarWidth", this.setSkillBarWidth);
  this.setStyleHandler("inspSkillBarWidth", this.setSkillBarWidth);
  this.setSkillBarBorderColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillBarBorderColor", this.setSkillBarBorderColor);
  this.setStyleHandler("inspSkillBarBorderColor", this.setSkillBarBorderColor);
  this.setSkillBarColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillBarColor", this.setSkillBarColor);
  this.setStyleHandler("inspSkillBarColor", this.setSkillBarColor);
  this.setSkillBarThresholdColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillMasteryColor", this.setSkillBarThresholdColor);
  this.setStyleHandler("inspSkillBarThresholdColor", this.setSkillBarThresholdColor);
  this.setBorderColor("#408080");
  this.setStyleHandler("OuterBorderColor", this.setBorderColor);
  var h = null;
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.configFromDescription();
  this.getAlpha = function() {
    return alpha;
  };
  this.setAlpha = function(a) {
    alpha = a;
  };
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.setInitialized(!0);
    h = document.createElement("div");
    h.classList.add("CTAT-skill-window");
    this.setComponent(h);
    this.getDivWrap().appendChild(h);
    this.drawComponent();
    this.component.addEventListener("focus", this.processFocus);
  };
  this.assignSkillSet = function(a) {
    skillSet = a;
    this.drawComponent();
  };
  this.updateSkillSet = function(a) {
    d.ctatdebug("updateSkillSet ()");
    if (null == skillSet) {
      d.ctatdebug("Error: no initial skill set given, can't update");
    } else {
      for (var b = 0;b < a.length;b++) {
        var f = a[b];
        d.ctatdebug("Updating skill " + f.getSkillName() + " to level: " + f.getLevel() + " ...");
        skillSet.setSkillLevel(f.getSkillName(), f.getLevel(), 1);
      }
      this.drawComponent();
    }
  };
  this.drawComponent = function() {
    d.ctatdebug("drawComponent ()");
    if (null === skillSet) {
      ctatdebug("Info: no skillSet object available, bumping out");
    } else {
      var a = skillSet.getSkillSet();
      if (null === a) {
        d.ctatdebug("Error: list of skills is null in skills object");
      } else {
        if (0 >= a.length) {
          d.ctatdebug("Error: list of skills is 0 length");
        } else {
          for (var b = document.createDocumentFragment(), f = 0;f < a.length;f++) {
            var c = a[f];
            d.ctatdebug("Drawing skill " + f + " " + c.getDisplayName() + " level: " + c.getLevel() + " ...");
            var e = document.createElement("div");
            e.classList.add("CTAT-skill-window--bar");
            var g = document.createElement("div"), t = c.getLevel();
            .95 > t ? g.classList.add("CTAT-skill-window--bar--nonmastered") : g.classList.add("CTAT-skill-window--bar--mastery");
            g.style.width = .95 < t ? "100%" : 100 * t + "%";
            e.appendChild(g);
            b.appendChild(e);
            e = document.createElement("div");
            e.textContent = c.getDisplayName() || "no-name";
            e.classList.add("CTAT-skill-window--label");
            b.appendChild(e);
            b.appendChild(document.createElement("br"));
          }
          h.innerHTML = "";
          h.appendChild(b);
        }
      }
    }
  };
};
CTATSkillWindow.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATSkillWindow.prototype.constructor = CTATSkillWindow;
CTAT.ComponentRegistry.addComponentType("CTATSkillWindow", CTATSkillWindow);
var CTATSAI = function(a, b, c, e) {
  function g(a, b, d, f) {
    f = String(t.getElementName(b)).toLowerCase();
    if (f == a || "value" == f) {
      if (f = t.getElementChildren(b), !Array.isArray(f) || 1 > f.length) {
        d.push(t.getNodeTextValue(b));
      } else {
        for (b = 0;b < f.length;++b) {
          g(a, f[b], d, b);
        }
      }
    }
  }
  CTATBase.call(this, "CTATSAI", "sai");
  var d = "undefined", f = "undefined", h = new CTATStringUtil, k = [], l = [], m = [], n = [], p = [], u = [], t, v = this;
  t = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  this.getArguments = function() {
    return k;
  };
  this.getArgumentsTyped = function() {
    this.ctatdebug("getArgumentsTyped");
    for (var a = 0, b = [], a = 0;a < k.length;a++) {
      var d = k[a];
      "Boolean" === d.getType() ? (this.ctatdebug("Adding Boolean argument (" + d.getValue() + ") ..."), b.push(h.String2Boolean(d.getValue()))) : "Number" === d.getType() ? (this.ctatdebug("Adding Number argument (" + d.getValue() + ") ..."), b.push(Number(d.getValue()))) : "String" === d.getType() ? "No_Value" === d.getValue() ? (this.ctatdebug("Detected default argument (" + d.getValue() + "), setting contents to null instead"), b.push(null)) : b.push(String(d.getValue())) : this.ctatdebug("Unrecognized argument type: " + 
      d.getType() + " in " + this.toSerializedString() + " IGNORING IT!!!");
    }
    this.ctatdebug("Resulting arguments: " + b);
    return b;
  };
  this.getArgument = function(a) {
    return k[a];
  };
  this.addSelection = function(a) {
    l.push(a);
  };
  this.addAction = function(a) {
    m.push(a);
  };
  this.checkDefaultArgument = function() {
    this.ctatdebug("checkDefaultArgument ()");
    if (0 === k.length) {
      this.ctatdebug("Adding default argument ...");
      var a = new CTATArgument;
      k.push(a);
    }
  };
  this.setArgument = function(a, b) {
    this.checkDefaultArgument();
    for (var d = k.length;d <= a;++d) {
      k.push(new CTATArgument);
    }
    d = k[a];
    d.value = b;
    return d;
  };
  this.addArgument = function(a, b, d) {
    var f = new CTATArgument;
    f.value = a;
    f.type = b;
    f.format = d;
    k.push(f);
    return f;
  };
  this.addExistingArgument = function(a) {
    k.push(a);
    return a;
  };
  this.setSAI = function(a, b, e, c, g) {
    this.setName(Array.isArray(a) ? 0 < a.length ? a[0] : "" : a);
    d = Array.isArray(b) ? 0 < b.length ? b[0] : "" : b;
    f = g;
    this.setInput(Array.isArray(e) ? 0 < e.length ? e[0] : "" : e);
    this.setType(c);
  };
  this.setInput = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).setValue(a);
    this.setInputArray(a);
  };
  this.getInput = function() {
    return 0 === k.length ? "" : this.getArgument(0).getValue();
  };
  this.setType = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).type = a;
  };
  this.getType = function() {
    return 0 === k.length ? "" : this.getArgument(0).type;
  };
  this.setFormat = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).setFormat(a);
  };
  this.getFormat = function() {
    return 0 === k.length ? "" : this.getArgument(0).getFormat();
  };
  this.toString = function() {
    return "[" + String(this.getSelection()) + "," + String(this.getAction()) + "," + String(this.getInput()) + "]";
  };
  this.setSelection = function(a) {
    this.setName(a);
  };
  this.getSelection = function() {
    return this.getName();
  };
  this.setAction = function(a) {
    d = a;
  };
  this.getAction = function() {
    return d;
  };
  this.appendToSelectionArray = function(a) {
    null == a ? n.push("") : n.push(String(a));
  };
  this.setSelectionArray = function(a) {
    n = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getSelectionArray = function() {
    return n;
  };
  this.appendToActionArray = function(a) {
    null == a ? p.push("") : p.push(String(a));
  };
  this.setActionArray = function(a) {
    p = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getActionArray = function() {
    return p;
  };
  this.appendToInputArray = function(a) {
    null == a ? u.push("") : u.push(String(a));
  };
  this.setInputArray = function(a) {
    u = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getInputArray = function() {
    return u;
  };
  this.setPrompt = function(a) {
    f = a;
  };
  this.getPrompt = function() {
    return f;
  };
  this.propagate = function(a) {
    this.ctatdebug("propagate ()");
    a = a.getArguments();
    for (var b = 0;b < a.length;b++) {
      var d = a[b], f = k[b];
      if (null === d || null === f) {
        this.ctatdebug("Internal error: argument lists do not align between received SAI and source SAI");
        break;
      }
      f.setValue(d.getValue());
    }
  };
  this.fromString = function(a) {
    a = t.parse(a);
    this.fromXML(a);
  };
  this.fromXML = function(a) {
    this.ctatdebug("fromXML ()");
    k = [];
    a = t.getElementChildren(a);
    for (var b = null, d = 0;d < a.length;d++) {
      var f = a[d];
      if ("selection" == t.getElementName(f) || "Selection" == t.getElementName(f)) {
        for (var e = t.getElementChildren(f), c = !1, g = 0;g < e.length;g++) {
          b = e[g], "value" == t.getElementName(b) && (b = t.getNodeTextValue(b), 1 > g ? this.setSelectionArray(b) : this.appendToSelectionArray(b), c = !0, this.setSelection(b));
        }
        !1 === c && (b = t.getNodeTextValue(f), this.setSelectionArray(b), this.setSelection(b));
      }
      if ("action" == t.getElementName(f) || "Action" == t.getElementName(f)) {
        e = t.getElementChildren(f);
        c = !1;
        for (g = 0;g < e.length;g++) {
          b = e[g], "value" == t.getElementName(b) && (b = t.getNodeTextValue(b), 1 > g ? this.setActionArray(b) : this.appendToActionArray(b), c = !0, this.setAction(b));
        }
        !1 === c && (b = t.getNodeTextValue(f), this.setActionArray(b), this.setAction(b));
      }
      if ("internalArguments" == t.getElementName(f) || "value" == t.getElementName(f) || "Input" == t.getElementName(f)) {
        var b = t.getElementChildren(f), l = null;
        k = [];
        e = new CTATHTMLManager;
        c = new CTATArgument;
        g = 0;
        k.push(c);
        for (var h = 0;h < b.length;h++) {
          var m = b[h];
          "value" == t.getElementName(m) && (l = t.getElementChildren(m), null !== l ? (this.ctatdebug("Parsing SAI input ..."), this.ctatdebug("Childnodes: " + l.length), 1 === l.length ? (l = e.htmlDecode(t.getNodeTextValue(m)), this.ctatdebug("Setting new value to: " + l), c.setValue(l)) : (l = e.htmlDecode(t.getNodeTextValue(m)), this.ctatdebug("Setting new value to: " + l), c.setValue(l), c.setName(m.attributes.getNamedItem("name").value), c.setType(m.attributes.getNamedItem("type").value), 
          c.setFormat(m.attributes.getNamedItem("format").value), g++), 1 > h ? this.setInputArray(l) : this.appendToInputArray(l)) : (m = e.htmlDecode(t.getNodeTextValue(m)), this.ctatdebug("Setting new value to: " + m), c.setValue(m), 1 > h ? this.setInputArray(m) : this.appendToInputArray(m)));
        }
      }
      if ("prompt" == t.getElementName(f) || "Prompt" == t.getElementName(f)) {
        this.ctatdebug("Parsing prompt ..."), this.setPrompt(t.getNodeTextValue(f));
      }
    }
    this.checkDefaultArgument();
  };
  this.setArrayFromElements = function(a) {
    if (a && Array.isArray(a) && !(1 > a.length)) {
      var b = null, d = String(t.getElementName(a[0])).toLowerCase();
      switch(d) {
        case "selection":
          b = n = [];
          break;
        case "action":
          b = p = [];
          break;
        case "input":
          b = u = [];
          break;
        default:
          console.log('CTATSAI.setArrayFromElements(): unexpected element name "' + d + '"');
          return;
      }
      for (var f = 0;f < a.length;++f) {
        g(d, a[f], b, f);
      }
      this.ctatdebug("CTATSAI.setArrayFromElements() eltName " + d + ", length " + f + ", selectionArray " + this.getSelectionArray() + ", actionArray " + this.getActionArray() + ", inputArray " + this.getInputArray());
    }
  };
  this.fromXMLInternal = function(a) {
    this.ctatdebug("fromXMLInternal ()");
    new CTATXML;
    k = [];
    a = t.getElementChildren(a);
    for (var b = null, d = 0;d < a.length;d++) {
      var f = a[d];
      if ("selection" == t.getElementName(f) || "Selection" == t.getElementName(f)) {
        for (var e = t.getElementChildren(f), c = !1, g = 0;g < e.length;g++) {
          b = e[g], "value" == t.getElementName(b) && (b = t.getNodeTextValue(b), 1 > g ? this.setSelectionArray(b) : this.appendToSelectionArray(b), c = !0, this.setSelection(b));
        }
        !1 === c && (b = t.getNodeTextValue(f), this.setSelectionArray(b), this.setSelection(b));
      }
      if ("action" == t.getElementName(f) || "Action" == t.getElementName(f)) {
        e = f.childNodes;
        c = !1;
        for (g = 0;g < e.length;g++) {
          b = e[g], "value" == t.getElementName(b) && (b = t.getNodeTextValue(b), 1 > g ? this.setActionArray(b) : this.appendToActionArray(b), c = !0, this.setAction(b));
        }
        !1 === c && (b = t.getNodeTextValue(f), this.setActionArray(b), this.setAction(b));
      }
      if ("internalArguments" == t.getElementName(f) || "Input" == t.getElementName(f)) {
        b = f.childNodes;
        k = [];
        var e = new CTATHTMLManager, c = new CTATArgument, g = 0, l = null;
        k.push(c);
        for (var h = 0;h < b.length;h++) {
          if (l = b[h], "value" == t.getElementName(l)) {
            var m = t.getElementChildren(l);
            null !== m ? (this.ctatdebug("Parsing SAI input ..."), this.ctatdebug("Childnodes: " + m.length), 1 === m.length ? (l = e.htmlDecode(t.getNodeTextValue(l)), this.ctatdebug("Setting new value to: " + l), c.setValue(l)) : (l = e.htmlDecode(t.getNodeTextValue(l)), this.ctatdebug("Setting new value to: " + l), c.setValue(l), c.setName(t.getElementAttr("name")), c.setType(t.getElementAttr("type")), c.setFormat(t.getElementAttr("format")), g++)) : (l = e.htmlDecode(t.getNodeTextValue(l)), this.ctatdebug("Setting new value to: " + 
            l), c.setValue(l));
            1 > h ? this.setInputArray(l) : this.appendToInputArray(l);
          }
        }
      }
      if ("prompt" == t.getElementName(f) || "Prompt" == t.getElementName(f)) {
        this.ctatdebug("Parsing prompt ..."), this.setPrompt(t.getNodeTextValue(f));
      }
    }
    this.checkDefaultArgument();
  };
  this.toXMLString = function(a) {
    this.ctatdebug("toXMLString ()");
    return a ? this.toLSxmlString() : this.toTSxmlString();
  };
  this.toLSxmlString = function() {
    this.ctatdebug("toLSxmlString ()");
    var a;
    a = "<selection>" + this.getName();
    for (var b = 0;b < l.length;b++) {
      a += "</selection><selection>" + l[b];
    }
    a += "</selection><action>" + this.getAction();
    for (b = 0;b < m.length;b++) {
      a += "</action><action>" + m[b];
    }
    a += "</action><input>";
    for (b = 0;b < k.length;b++) {
      a += "<![CDATA[" + k[b].getValue() + "]]\x3e";
    }
    return a + "</input>";
  };
  this.toTSxmlString = function() {
    this.ctatdebug("toTSxmlString ()");
    var a;
    a = "<Selection><value>" + this.getName();
    for (var b = 0;b < l.length;b++) {
      a += "</value><value>" + l[b];
    }
    a += "</value></Selection><Action><value>" + this.getAction();
    for (b = 0;b < m.length;b++) {
      a += "</value><value>" + m[b];
    }
    a += "</value></Action><Input>";
    if (1 < k.length) {
      for (b = 0;b < k.length;b++) {
        var d = k[b];
        a += '<value fmt="text" name="' + d.getName() + '" type="' + d.getType() + '"><![CDATA[' + d.getValue() + "]]\x3e</value>";
      }
    } else {
      a += "<value><![CDATA[" + this.getInput() + "]]\x3e</value>";
    }
    return a + "</Input>";
  };
  this.toSerializedString = function() {
    var a;
    a = "" + ("<selection>" + this.getSelection() + "</selection><action>" + this.getAction() + "</action><internalArguments>");
    for (var b = 0;b < k.length;b++) {
      var d = k[b];
      a += '<value fmt="text" name="' + d.getName() + '" type="' + d.getType() + '">' + d.getValue() + "</value>";
    }
    return a + "</internalArguments>";
  };
  this.setAddedSelections = function(a) {
    l = a;
  };
  this.setAddedActions = function(a) {
    m = a;
  };
  this.clone = function() {
    var a = new CTATSAI(this.getSelection(), this.getAction(), this.getInput(), this.getPrompt());
    a.setAddedSelections(l.slice(0));
    a.setAddedActions(m.slice(0));
    for (var b = 0;b < this.getArguments().length;++b) {
      a.setArgument(b, this.getArgument(b).clone());
    }
    a.setSelectionArray(this.getSelectionArray().slice());
    a.setActionArray(this.getActionArray().slice());
    a.setInputArray(this.getInputArray().slice());
    this.ctatdebug("CTATSAI.clone() this " + this + ", clone " + a + ", clone inputArray " + a.getInputArray());
    return a;
  };
  var w = !1;
  if (Array.isArray(a) && Array.isArray(b) && (Array.isArray(c) || null == c) && (this.setSelectionArray(a), this.setActionArray(b), this.setInputArray(c), w = !0, 0 < a.length && 0 < b.length)) {
    this.setSAI(a[0], b[0], null == c ? null : c[0], "String", e);
    return;
  }
  null !== a && "" !== a && this.setSelection(a);
  null !== a && (this.setSAI(a, b, c, "String", e), w || (this.setSelectionArray(Array.isArray(a) ? a : [a]), this.setActionArray(Array.isArray(b) ? b : [b]), this.setInputArray(Array.isArray(c) ? c : [c]), w = !0));
  this.isDone = function() {
    var a, b;
    return null == (a = v.getSelection()) || null == (b = v.getAction()) ? !1 : "done" == a.toString().toLowerCase() && "buttonpressed" == b.toString().toLowerCase();
  };
};
CTATSAI.prototype = Object.create(CTATBase.prototype);
CTATSAI.prototype.constructor = CTATSAI;
"undefined" !== typeof module && (module.exports = CTATSAI);
var CTATMessage = function(a) {
  CTATBase.call(this, "CTATMessage", "message");
  CTATMessage.makeTransactionId = function() {
    return (new CTATGuid).guid();
  };
  var b = a, c = null, e = null;
  void 0 == a && (b = null);
  e = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  b && (this.ctatdebug("messageParser " + e + ", messageObj " + b), b.children && this.ctatdebug(b.children));
  var g = "ungraded", d = !1, f = !1, h = new CTATSkillSet, k = "", l = "", m = "", n = "", p = "", u = null, t = !1;
  this.assignSAI = function(a) {
    f = !0;
    u = a;
  };
  this.setTransactionID = function(a) {
    l = a;
  };
  this.getTransactionID = function() {
    return l;
  };
  this.setGradeResult = function(a) {
    g = a;
  };
  this.getGradeResult = function() {
    return g;
  };
  this.getXMLObject = function() {
    return b;
  };
  this.getSkillsObject = function() {
    return h;
  };
  this.getSuccessMessage = function() {
    return m;
  };
  this.getBuggyMsg = function() {
    return n;
  };
  this.getHighlightMsg = function() {
    return p;
  };
  this.parse = function() {
    this.ctatdebug("parse ()");
    if (null !== b) {
      this.ctatdebug("messageParser: " + e);
      this.ctatdebug("Root name: " + e.getElementName(b));
      "tool_message" == e.getElementName(b) ? (this.ctatdebug("Detected tool message"), k = "tool_message") : "message" != e.getElementName(b) ? (this.ctatdebug("Detected log message"), d = !0, k = e.getElementName(b)) : (this.ctatdebug("Detected regular message"), d = !1, this.parseMessageType());
      this.parseTransactionID();
      this.parseSAI();
      for (var a = e.getElementChildren(b), f = 0;f < a.length;f++) {
        var g = a[f];
        "properties" == e.getElementName(g) && (ctatdebug("Found a 'properties' element ... "), c = e.getElementChildren(g));
      }
      this.ctatdebug("Message " + k + ", with transaction id: " + l);
    }
  };
  this.parseSAI = function() {
    this.ctatdebug("parseSAI ()");
    var a = "", c = "", g = "", l = "", t = [], y = [], A = [];
    if ("tool_message" == k) {
      this.ctatdebug("Parsing s, a and i");
      a = e.getElementChildren(b);
      for (c = 0;c < a.length;c++) {
        if (g = a[c], "tool_message" == e.getElementName(g)) {
          for (g = e.getElementChildren(g), l = 0;l < g.length;l++) {
            t = g[l], "event_descriptor" == e.getElementName(t) && (u = new CTATSAI, u.fromXMLInternal(t));
          }
        }
      }
      f = !0;
    } else {
      if (d) {
        this.ctatdebug("isLogMessage ...");
        for (var r = e.getElementChildren(b), B = 0;B < r.length;B++) {
          var q = r[B];
          if ("event_descriptor" == e.getElementName(q)) {
            for (var q = e.getElementChildren(q), E = 0;E < q.length;E++) {
              var F = q[E];
              "selection" == e.getElementName(F) && (a = e.getNodeTextValue(F), t.push(F));
              "action" == e.getElementName(F) && (c = e.getNodeTextValue(F), y.push(F));
              "input" == e.getElementName(F) && (g = e.getNodeTextValue(F), A.push(F));
              "prompt" == e.getElementName(F) && (l = e.getNodeTextValue(F));
            }
          }
        }
      } else {
        for (this.ctatdebug("!isLogMessage ..."), r = e.getElementChildren(b), B = 0;B < r.length;B++) {
          if (q = r[B], "properties" == e.getElementName(q)) {
            for (q = e.getElementChildren(q), E = 0;E < q.length;E++) {
              F = q[E], this.ctatdebug("Nodename: " + e.getElementName(F)), "Skills" == e.getElementName(F) && h.parseByValue(F), "SuccessMsg" == e.getElementName(F) && (m = a = e.getNodeTextValue(F)), "BuggyMsg" == e.getElementName(F) && (n = e.getNodeTextValue(F)), "Selection" == e.getElementName(F) && (a = e.getNodeTextValue(F), t.push(F)), "Action" == e.getElementName(F) && (c = e.getNodeTextValue(F), y.push(F)), "Input" == e.getElementName(F) && (g = e.getNodeTextValue(F), A.push(F)), "prompt" == 
              e.getElementName(F) && (l = e.getNodeTextValue(F)), "HighlightMsgText" == e.getElementName(F) && (p = e.getNodeTextValue(F));
            }
          }
        }
      }
      this.ctatdebug("SAI: " + a + "," + c + "," + g);
      "" !== a && null !== a ? (u = new CTATSAI(a, c, g, l), u.setArrayFromElements(t), u.setArrayFromElements(y), u.setArrayFromElements(A), f = !0) : (this.ctatdebug("No SAI found"), f = !1);
      this.ctatdebug("parseSAI () done, hassai: " + f + ", (" + a + "," + c + "," + g + "," + l + ")");
    }
  };
  this.parseTransactionID = function() {
    this.ctatdebug("parseTransactionID()");
    if ("tool_message" != k) {
      if (!d) {
        for (var a = e.getElementChildren(b), f = 0;f < a.length;f++) {
          var c = a[f];
          if ("properties" == e.getElementName(c)) {
            for (var c = e.getElementChildren(c), g = 0;g < c.length;g++) {
              var h = c[g];
              "transaction_id" == e.getElementName(h) && (l = e.getNodeTextValue(h));
            }
          }
        }
      }
      this.ctatdebug("parseTransactionID() done, id: " + l);
    }
  };
  this.parseMessageType = function() {
    this.ctatdebug("parseMessageType()");
    for (var a = e.getElementChildren(b), d = 0;d < a.length;d++) {
      var f = a[d];
      if ("properties" == e.getElementName(f)) {
        for (var f = e.getElementChildren(f), c = 0;c < f.length;c++) {
          var g = f[c];
          "MessageType" == e.getElementName(g) && (k = e.getNodeTextValue(g));
        }
      }
    }
    this.ctatdebug("parseMessageType() -> " + k);
  };
  this.getMessageType = function() {
    return k;
  };
  this.getTransactionID = function() {
    return l;
  };
  this.getSAI = function() {
    return f ? u : new CTATSAI;
  };
  this.getSelection = function() {
    return f ? u.getSelection() : "";
  };
  this.getAction = function() {
    return f ? u.getAction() : "";
  };
  this.getInput = function() {
    return f ? u.getInput() : "";
  };
  this.getSelectionArray = function() {
    return f ? u.getSelectionArray() : [];
  };
  this.getActionArray = function() {
    return f ? u.getActionArray() : [];
  };
  this.getInputArray = function() {
    return f ? u.getInputArray() : [];
  };
  this.getXML = function() {
    return b;
  };
  this.getXMLString = function(a) {
    if (b.xml) {
      return b.xml;
    }
    if (XMLSerializer) {
      return (new XMLSerializer).serializeToString(b);
    }
    alert("ERROR: Extremely old browser");
    return "";
  };
  this.getIndicator = function() {
    return "AssociatedRules" != k ? "" : this.getProperty("Indicator");
  };
  this.getIndicatorSub = function() {
    return "AssociatedRules" != k ? "" : this.getProperty("IndicatorSub");
  };
  this.setProperty = function(a, b) {
    this.ctatdebug("setProperty (" + a + "," + b + ")");
    if (null !== c) {
      for (var d = 0;d < c.length;d++) {
        e.getElementName(c[d]);
      }
    } else {
      this.ctatdebug("Internal error: no messageProperties object available");
    }
  };
  this.getProperty = function(a) {
    if (!d) {
      if (null !== c) {
        for (var b = 0;b < c.length;b++) {
          var f = c[b];
          if (e.getElementName(f) == a) {
            return e.getNodeTextValue(f);
          }
        }
      } else {
        this.ctatdebug("Internal error: no messageProperties object available");
      }
    }
    return "";
  };
  this.hasProperty = function(a) {
    a = this.getProperty(a);
    return !d && "" !== a;
  };
  this.hasSAI = function() {
    return f;
  };
  this.isEndOfTransaction = function() {
    return "true" == this.getProperty("end_of_transaction") ? !0 : !1;
  };
  this.isLogMessageType = function() {
    return d;
  };
  this.hasStudentSAI = function() {
    return !1;
  };
  this.getStudentSelection = function() {
    return null.getSelection();
  };
  this.getStudentAction = function() {
    return null.getAction();
  };
  this.getStudentInput = function() {
    return null.getInput();
  };
  this.getStudentSAI = function() {
    return null;
  };
  this.getToolSelection = function() {
    return "";
  };
  l = CTATMessage.makeTransactionId();
  this.parse();
  this.init = function(a) {
    this.setMessageType(a);
  };
  this.setSelection = function(a) {
    u && u.setSelection(a);
    this.setProperty("SELECTION", a);
  };
  this.setAction = function(a) {
    u && u.setAction(a);
    this.setProperty("ACTION", a);
  };
  this.setInput = function(a) {
    u && u.setInput(a);
    this.setProperty("INPUT", a);
  };
  this.lockTransactionId = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      throw new CTATExampleTracerException("lockTranactionId() argument " + a + " must be a valid id");
    }
    this.setProperty(CTATMessage.TRANSACTION_ID_TAG, a);
    t = !0;
  };
  this.setMessageType = function(a) {
    this.setProperty(CTATMessage.MESSAGE_TYPE, a);
    k = a;
  };
  this.setTransactionId = function(a) {
    if (!t) {
      if (null === a || "undefined" === typeof a || 1 > a.length) {
        a = CTATMessage.makeTransactionId();
      }
      this.setProperty(CTATMessage.TRANSACTION_ID_TAG, a);
    }
  };
  CTATMessage.create = function(a, b) {
    var d = new CTATMessage;
    d.init(a);
    return d;
  };
};
Object.defineProperty(CTATMessage, "MESSAGE_TYPE", {enumerable:!1, configurable:!1, writable:!1, value:"MessageType"});
Object.defineProperty(CTATMessage, "TRANSACTION_ID_TAG", {enumerable:!1, configurable:!1, writable:!1, value:"transaction_id"});
CTATMessage.prototype = Object.create(CTATBase.prototype);
CTATMessage.prototype.constructor = CTATMessage;
"undefined" !== typeof module && (module.exports = CTATMessage);
var CTATTutoringServiceMessageBuilder = function() {
  CTATBase.call(this, "CTATTutoringServiceMessageBuilder", "__undefined__");
  this.createStartProblemMessage = function(a) {
    this.ctatdebug("createStartProblemMessage ()");
    return "<message><verb>NotePropertySet</verb><properties><MessageType>StartProblem</MessageType><ProblemName>" + a + "</ProblemName></properties></message>";
  };
  this.createInterfaceIdentificationMessage = function(a) {
    this.ctatdebug("createInterfaceIdentificationMessage (" + a + ")");
    return "<message><verb>NotePropertySet</verb><properties><MessageType>InterfaceIdentification</MessageType><Guid>" + a + "</Guid></properties></message>";
  };
  this.createInterfaceDescriptionMessage = function(a, b, c) {
    this.ctatdebug("createInterfaceDescriptionMessage ()");
    a = "<message><verb>NotePropertySet</verb><properties><MessageType>MessageBundle</MessageType><messages><message><verb>NotePropertySet</verb><properties><MessageType>InterfaceDescription</MessageType><WidgetType>CTATCommShell</WidgetType>";
    a += "<CommName>theShell</CommName>";
    a += "<UpdateEachCycle>false</UpdateEachCycle>";
    a += "<jessDeftemplates><value>(deftemplate CTATCommShell (slot_name))</value></jessDeftemplates>";
    a += '<jessInstances><value>(assert (CTATCommShell (name CTATCommShell) (value "" )))</value></jessInstances>';
    a += "<serialized>";
    a += '<CTATCommShell name="theShell" x="0" y="0" width="' + b + '" height="' + c + '"></CTATCommShell>';
    a += "</serialized>";
    a += "</properties></message>";
    a += "</messages></properties></message>";
    return "" + a;
  };
  this.createSetPreferencesMessage = function(a) {
    this.ctatdebug("createSetPreferencesMessage ()");
    var b = flashVars.getRawFlashVars(), c;
    c = "<message><verb>NotePropertySet</verb><properties><MessageType>SetPreferences</MessageType>" + ("<log_service_url>" + b.log_service_url + "</log_service_url>");
    var e = !1, g = !1, d = b.Logging;
    this.ctatdebug("Parsing and processing logMethod: " + d);
    switch(d) {
      case "ServiceToLogServer":
        e = !0;
        break;
      case "ServiceToDisk":
        g = !0;
        break;
      case "ServiceToDiskAndLogServer":
        g = e = !0;
        break;
      case "ClientToLogServer":
        g = e = !0;
    }
    c = c + ("<log_to_remote_server>" + e + "</log_to_remote_server><log_to_disk>" + g + "</log_to_disk>") + ("<log_to_disk_directory>" + b.log_to_disk_directory + "</log_to_disk_directory>");
    c += "<logging>" + b.Logging + "</logging>";
    c += "<user_guid>" + b.user_guid + "</user_guid>";
    c += "<problem_name>" + b.problem_name + "</problem_name>";
    c += "<question_file><![CDATA[" + encodeURI(b.question_file) + "]]\x3e</question_file>";
    c += "<class_name>" + b.class_name + "</class_name>";
    c += "<school_name>" + b.school_name + "</school_name>";
    c += "<instructor_name>" + b.instructor_name + "</instructor_name>";
    c += "<session_id>" + b.session_id + "</session_id>";
    c += "<source_id>" + b.source_id + "</source_id>";
    c += "<sui><![CDATA[" + b.sui + "]]\x3e</sui>";
    c += "<problem_state_status>" + b.problem_state_status + "</problem_state_status>";
    c += "<curriculum_service_url>" + b.curriculum_service_url + "</curriculum_service_url>";
    c += "<restore_problem_url>" + b.restore_problem_url + "</restore_problem_url>";
    null !== skillSet && (c += skillSet.toSetPreferencesXMLString());
    c += "<CommShellVersion>" + a + "</CommShellVersion>";
    c += "</properties></message>";
    return "" + c;
  };
  this.createInterfaceActionMessage = function(a, b) {
    this.ctatdebug("createInterfaceActionMessage ()");
    var c;
    c = "<message><verb>NotePropertySet</verb><properties><MessageType>InterfaceAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    c += "</properties></message>";
    return "" + c;
  };
  this.createUntutoredActionMessage = function(a, b) {
    this.ctatdebug("createUntutoredActionMessage (" + a + ")");
    var c;
    c = "<message><verb>NotePropertySet</verb><properties><MessageType>UntutoredAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    c += "</properties></message>";
    return "" + c;
  };
  this.createProblemSummaryRequestMessage = function() {
    return "<message><verb>NotePropertySet</verb><properties><MessageType>ProblemSummaryRequest</MessageType></properties></message>";
  };
  this.createProblemRestoreEndMessage = function() {
    return "<message><verb>NotePropertySet</verb><properties><MessageType>ProblemRestoreEnd</MessageType></properties></message>";
  };
  this.createInCorrectActionMessage = function(a, b) {
    this.ctatdebug("createInCorrectActionMessage ()");
    var c;
    c = "<message><verb>SendNoteProperty</verb><properties><MessageType>InCorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    c += "</properties></message>";
    return "" + c;
  };
  this.createCorrectActionMessage = function(a, b) {
    this.ctatdebug("createCorrectActionMessage ()");
    var c;
    c = "<message><verb>SendNoteProperty</verb><properties><MessageType>CorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    c += "</properties></message>";
    return "" + c;
  };
  this.createAssociatedRulesMessage = function(a, b, c, e, g, d) {
    a = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType>" + ("<Indicator>" + a + "</Indicator>") + b.toXMLString();
    c = c.toXMLString().replace("<Selection>", "<StudentSelection>").replace("<Action>", "<StudentAction>").replace("<Input>", "<StudentInput>");
    c = c.replace("</Selection>", "</StudentSelection>").replace("</Action>", "</StudentAction>").replace("</Input>", "</StudentInput>");
    a += c;
    return "" + a;
  };
};
CTATTutoringServiceMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATTutoringServiceMessageBuilder.prototype.constructor = CTATTutoringServiceMessageBuilder;
CTAT.Component.Base.SAIHandler = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Graphical.call(this, a, b, c, e, g, d, f);
  var h = new CTATSAI(this.getName(), CTAT.Component.Base.SAIHandler.DefaultAction, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt), k = this.setName;
  this.setName = function(a) {
    k(a);
    h.setSelection(this.getName());
  };
  this.getSAI = function() {
    return h;
  };
  this.setSAI = function(a, b, d) {
    a instanceof CTATSAI ? h = a : (a = null === a || void 0 === a ? this.getName() : a, h = new CTATSAI(a, b, d, CTAT.Component.Base.SAIHandler.DefaultPrompt));
  };
  this.setInput = function(a) {
    h instanceof CTATSAI ? h.setInput(a) : h = new CTATSAI(this.getName(), CTAT.Component.Base.SAIHandler.DefaultAction, a, CTAT.Component.Base.SAIHandler.DefaultPrompt);
  };
  this.setAction = function(a) {
    h instanceof CTATSAI ? h.setAction(a) : h = new CTATSAI(this.getName(), a, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt);
  };
  this.setActionInput = function(a, b) {
    this.setAction(a);
    this.setInput(b);
  };
  this.setSelection = function(a) {
    h instanceof CTATSAI ? h.setSelection(a) : h = new CTATSAI(a, CTAT.Component.Base.SAIHandler.DefaultAction, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt);
  };
  this.updateSAI = function() {
  };
  this.executeSAI = function(a) {
    this.ctatdebug("executeSAI ()");
    var b = null, b = a instanceof CTATMessage ? a.getSAI() : a;
    if (b instanceof CTATSAI) {
      var d = b.getAction();
      this.ctatdebug("Processing " + d + "(" + b.getInput() + ") on: " + b.getSelection());
      if ("function" == typeof this[d]) {
        b = b.getArgumentsTyped();
        this.ctatdebug("JSON args: " + JSON.stringify(b));
        try {
          this.ctatdebug("Executing " + d + "(" + b + "," + typeof a + ")..."), b.push(a), this[d].apply(this, b);
        } catch (f) {
          return this.ctatdebug("ERROR: failed to execute action: " + f.message), !1;
        }
        this.component && (a = new CustomEvent("CTAT_EXECUTE_SAI", {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
        return !0;
      }
      this.ctatdebug("ERROR: Unsupported action: " + d + " from " + b.toLSxmlString());
      return !1;
    }
    this.ctatdebug("ERROR: Non-SAI sent to executeSAI(" + typeof a + ")");
    return !1;
  };
};
CTAT.Component.Base.SAIHandler.DefaultAction = "ButtonPressed";
CTAT.Component.Base.SAIHandler.DefaultInput = "-1";
CTAT.Component.Base.SAIHandler.DefaultPrompt = "";
CTAT.Component.Base.SAIHandler.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTAT.Component.Base.SAIHandler.prototype.constructor = CTAT.Component.Base.SAIHandler;
CTAT.Component.Base.Tutorable = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.SAIHandler.call(this, a, b, c, e, g, d, f);
  var h = !0, k = !0, l = !0, m = CTAT.Component.Base.Tutorable.Options.TutorComponent.TUTOR, n = !0, p = this, u = !1;
  this.setTutorComponent = function(a) {
    m = a;
    a = CTAT.Component.Base.Tutorable.Options.TutorComponent;
    switch(m) {
      case a.TUTOR:
        l = h = k = !0;
        break;
      case a.TUTOR_NO_FEEDBACK:
        h = k = !0;
        l = !1;
        break;
      case a.DO_NOT_TUTOR:
        h = !1, k = !0;
    }
  };
  this.setParameterHandler("tutorComponent", this.setTutorComponent);
  this.data_ctat_handlers.tutor = function(a) {
    h = CTATGlobalFunctions.toBoolean(a);
  };
  this.data_ctat_handlers["show-feedback"] = function(a) {
    l = CTATGlobalFunctions.toBoolean(a);
  };
  this.getTutorComponent = function() {
    var a = CTAT.Component.Base.Tutorable.Options.TutorComponent;
    return h && k && l ? a.TUTOR : h && k && !l ? a.TUTOR_NO_FEEDBACK : !h && k ? a.DO_NOT_TUTOR : m;
  };
  this.getDisableOnCorrect = function() {
    return n;
  };
  this.setDisableOnCorrect = function(a) {
    n = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("DisableOnCorrect", this.setDisableOnCorrect);
  this.data_ctat_handlers["disable-on-correct"] = function(a) {
    n = CTATGlobalFunctions.toBoolean(a);
  };
  var t = !0;
  this.getShowHintHighlight = function() {
    return t;
  };
  this.setShowHintHighlight = function(a) {
    t = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("ShowHintHighlight", this.setShowHintHighlight);
  this.data_ctat_handlers["show-hint-highlight"] = function(a) {
    t = CTATGlobalFunctions.toBoolean(a);
  };
  var v = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  this.getComponentStatus = function() {
    return v;
  };
  this.setComponentStatus = function(a) {
    v = a;
  };
  this.isCorrect = function() {
    return v === CTAT.Component.Base.Tutorable.Options.Status.CORRECT;
  };
  this.isIncorrect = function() {
    return v === CTAT.Component.Base.Tutorable.Options.Status.INCORRECT;
  };
  this.isNotGraded = function() {
    return v === CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  };
  this.setCorrect = function(a) {
    this.setNotGraded();
    "CTATTableGoogle" != this.getClassName() && this.executeSAI(a);
    v = CTAT.Component.Base.Tutorable.Options.Status.CORRECT;
    !0 === n && this.setEnabled(!1);
    !1 === CTATGlobals.suppressStudentFeedback && l && this.showCorrect(a);
    this.ctatdebug("setCorrect() post showCorrect");
    this.component && (a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.correct, {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
  };
  this.setIncorrect = function(a) {
    this.ctatdebug("setIncorrect()");
    this.setNotGraded();
    "CTATTableGoogle" != this.getClassName() && this.executeSAI(a);
    v = CTAT.Component.Base.Tutorable.Options.Status.INCORRECT;
    !1 === CTATGlobals.suppressStudentFeedback && l && this.showInCorrect(a);
    this.component && (a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.incorrect, {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
  };
  this.setNotGraded = function() {
    this.ctatdebug("setNotGraded ()");
    this.setHintHighlight(!1);
    if (!this.isNotGraded() && (v = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED, this.removeCorrect(), this.removeInCorrect(), this.component)) {
      var a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.ungrade, {detail:{component:this}, bubbles:!0, cancelable:!0});
      this.component.dispatchEvent(a);
    }
  };
  this.showHintHighlight = function(a, b) {
    this.component.classList.remove("CTAT--correct");
    this.component.classList.remove("CTAT--incorrect");
    a ? this.component.classList.add("CTAT--hint") : this.component.classList.remove("CTAT--hint");
  };
  this.setHintHighlight = function(a, b) {
    this.ctatdebug("setHintHighlight (" + a + ")");
    if (t) {
      var d = CTATGlobalFunctions.toBoolean(a);
      if (this.component) {
        var f = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.highlight, {detail:{isHighlighted:d, component:this}, bubbles:!0, cancelable:!0});
        this.getComponent().dispatchEvent(f);
      }
      d !== u && (u = d, this.showHintHighlight(d, b));
    }
  };
  this.moveHintHighlight = function(a, b) {
    this.ctatdebug("moveHintHighlight (" + a + ")");
    CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus;
    CTATGlobals.Tab.Focus = p;
    p.component.focus ? CTATGlobals.Tab.Focus.getComponent().focus() : CTATGlobals.Tab.Focus.getDivWrap().focus();
    if (t) {
      var d = CTATGlobalFunctions.toBoolean(a);
      if (this.component) {
        var f = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.highlight, {detail:{isHighlighted:d, component:this}, bubbles:!0, cancelable:!0});
        this.getComponent().dispatchEvent(f);
      }
      d !== u && (u = d, this.showHintHighlight(d, b));
    }
  };
  this.highlight = this.setHintHighlight.bind(this, !0);
  this.unhighlight = this.setHintHighlight.bind(this, !1);
  this.showCorrect = function(a) {
    this.ctatdebug("showCorrect(" + a + ")");
    this.getComponent().classList.remove("CTAT--incorrect");
    this.getComponent().classList.remove("CTAT--hint");
    this.getComponent().classList.add("CTAT--correct");
  };
  this.removeCorrect = function() {
    this.getComponent() && this.getComponent().classList.remove("CTAT--correct");
  };
  this.showInCorrect = function(a) {
    this.ctatdebug("showInCorrect(" + incorrectColor + ")");
    this.getComponent().classList.remove("CTAT--correct");
    this.getComponent().classList.remove("CTAT--hint");
    this.getComponent().classList.add("CTAT--incorrect");
  };
  this.removeInCorrect = function() {
    this.getComponent() && this.getComponent().classList.remove("CTAT--incorrect");
  };
  this.resetTutoring = function() {
    this.showHintHighlight(!1);
    this.removeCorrect();
    this.removeInCorrect();
    v = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  };
  this.grade = function() {
    this.updateSAI();
    this.processAction(!0);
  };
  this.processAction = function(a, b) {
    this.ctatdebug("processAction(" + a + "," + b + ")");
    var d = CTATShellTools.findComponentByClass("CTATDoneButton");
    d && d instanceof CTAT.Component.Base.Tutorable && d != this && d.setNotGraded();
    this.ctatdebug("processAction() finished checking doneButton");
    a = void 0 === a || null === a ? !1 : a;
    b = void 0 === b || null === b ? !1 : b;
    "" !== this.getComponentGroup() ? CTATShellTools.findComponent(this.getComponentGroup()).forEach(function(a) {
      a.setNotGraded();
    }) : this.setNotGraded();
    this.ctatdebug("processAction() finished setNotGraded");
    commShell && (a ? commShell.processComponentAction(this.getSAI(), !0, !0) : b ? commShell.processComponentAction(this.getSAI(), !1, !0) : commShell.processComponentAction(this.getSAI(), h, k));
    this.ctatdebug("processAction() finished call to commShell.processComponentAction");
    this.component && (d = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.action, {detail:{sai:this.getSAI(), component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(d));
  };
};
CTAT.Component.Base.Tutorable.Options = {TutorComponent:{TUTOR:"Tutor", TUTOR_NO_FEEDBACK:"Tutor but no visual feedback", DO_NOT_TUTOR:"Do not tutor"}, Status:{CORRECT:"CORRECT", INCORRECT:"INCORRECT", NOTGRADED:"NOTGRADED"}};
CTAT.Component.Base.Tutorable.EventType = {correct:"CTAT_CORRECT", incorrect:"CTAT_INCORRECT", highlight:"CTAT_HIGHLIGHT", ungrade:"CTAT_NOTGRADED", action:"CTAT_ACTION"};
CTAT.Component.Base.Tutorable.prototype = Object.create(CTAT.Component.Base.SAIHandler.prototype);
CTAT.Component.Base.Tutorable.prototype.constructor = CTAT.Component.Base.Tutorable;
CTAT.Component.Base.Clickable = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Tutorable.call(this, a, b, c, e, g, d, f);
  var h = this;
  this.processClick = function(a) {
    h.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === h.getEnabled() ? h.processAction() : h.ctatdebug("Component is disabled, not grading");
  };
  this.setClickable = function(a) {
    h.setEnabled(a);
  };
};
CTAT.Component.Base.Clickable.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTAT.Component.Base.Clickable.prototype.constructor = CTAT.Component.Base.Clickable;
var CTATButtonBasedComponent = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Clickable.call(this, a, b, c, e, g, d, f);
  this.setDefaultWidth(60);
  this.setDefaultHeight(30);
  var h = this, k = "";
  this.ctatdebug("CTATButtonBasedComponent (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.setActionInput("ButtonPressed", "-1");
  this.setText = function(a) {
    h.ctatdebug("setText (" + a + ")");
    k = a;
    null !== h.getComponent() && (h.getComponent().textContent = k);
  };
  this.setStyleHandler("labelText", this.setText);
  this.getText = function() {
    return k;
  };
  this.processClick = function(a) {
    h.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === h.getEnabled() ? (null !== CTATGlobals.Tab.Focus && ("CTATTextArea" == CTATGlobals.Tab.Focus.getClassName() || "CTATTextInput" == CTATGlobals.Tab.Focus.getClassName() || "CTATTextField" == CTATGlobals.Tab.Focus.getClassName() ? CTATGlobals.Tab.Focus.processAction() : h.ctatdebug("Info: CTATGlobals.Tab.Focus==null")), h.processAction()) : h.ctatdebug("Component is disabled, not grading");
  };
  this.ButtonPressed = function() {
  };
};
CTATButtonBasedComponent.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATButtonBasedComponent.prototype.constructor = CTATButtonBasedComponent;
var CTATImageButtonComponent = function(a, b, c, e, g, d, f) {
  CTATButtonBasedComponent.call(this, a, b, c, e, g, d, f);
  var h = "", k = "", l = "", m = "", n = !1, p = "Image to Component", u = this;
  this.getDefaultImage = function() {
    return h;
  };
  this.setDefaultImage = function(a) {
    a && (h = a);
  };
  this.setStyleHandler("normalName", this.setDefaultImage);
  this.getHoverImage = function() {
    return l;
  };
  this.setHoverImage = function(a) {
    a && (l = a);
  };
  this.setStyleHandler("hoverName", this.setHoverImage);
  this.setClickedImage = function(a) {
    a && (k = a);
  };
  this.setStyleHandler("clickName", this.setClickedImage);
  this.getClickedImage = function() {
    return k;
  };
  this.setDisabledImage = function(a) {
    a && (m = a);
  };
  this.setStyleHandler("disabledName", this.setDisabledImage);
  this.getDisabledImage = function() {
    return m;
  };
  this.setScaling = function(a) {
    p = a;
  };
  this.setStyleHandler("Scaling", this.setScaling);
  this.getScaling = function() {
    return p;
  };
  this.assignImages = function(a, b, d, f) {
    u.ctatdebug("assignImages ()");
    h = a;
    k = b;
    l = d;
    m = f;
    null !== u.getComponent() && u.assignActiveImage(h);
  };
  this.assignImageURL = function(a) {
    this.assignImages(a, a, a, a);
  };
  this.assignActiveImage = function(a) {
    if (null !== u.getComponent() && (u.getComponent().src = a, u.getComponent().style.opacity = this.getTransparencyValue(), "Component to Image" == p)) {
      var b = new Image;
      b.src = a;
      u.setWidth(b.width);
      u.setHeight(b.height);
    }
  };
  this.setEnabled = function(a) {
    u.ctatdebug("setEnabled (" + a + ")");
    u.assignEnabled(a);
    null === u.getComponent() ? u.ctatdebug("Error: pointer is null!") : (u.getComponent().disabled = !a, !1 === u.getEnabled() ? u.assignActiveImage(m) : u.assignActiveImage(h), u.ctatdebug("setEnabled () -> " + u.getEnabled()));
  };
  this.processMouseOver = function(a) {
    !0 !== n && (n = !0, !0 === u.getEnabled() ? u.assignActiveImage(l) : u.ctatdebug("Error component is disabled"), n = !1);
  };
  this.processMouseOut = function(a) {
    !0 !== n && (n = !0, !0 === u.getEnabled() && u.assignActiveImage(h), n = !1);
  };
};
CTATImageButtonComponent.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATImageButtonComponent.prototype.constructor = CTATImageButtonComponent;
CTAT.Component.Base.SVG = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Clickable.call(this, a, b, c, e, g, d, f);
  var h = null;
  this.initSVG = function() {
    this.setInitialized(!0);
    var a = CTATGlobals.NameSpace.svg, b = CTATGlobals.NameSpace.xml, d = CTATGlobals.NameSpace.xlink, f = CTATGlobals.NameSpace.ev, c = document.createDocumentFragment();
    h = document.createElementNS(a, "svg");
    c.appendChild(h);
    h.classList.add("CTAT-gen-component");
    h.classList.add("CTAT-svg");
    h.setAttributeNS(b, "xmlns", a);
    h.setAttributeNS(b, "xmlns:xlink", d);
    h.setAttributeNS(b, "xmlns:ev", f);
    a = document.createElementNS(a, "defs");
    h.appendChild(a);
    this.getDivWrap().appendChild(c);
    this.setComponent(h);
  };
  this.genName = function(a) {
    return this.getName() + "_" + a;
  };
  this.getBoundingBox = function() {
    var a = new DOMRect(0, 0, this.getWidth(), this.getHeight()), b = this.getComponent(), d = window.getComputedStyle(b), b = parseInt(d.getPropertyValue("padding-left")), f = parseInt(d.getPropertyValue("padding-right")), c = parseInt(d.getPropertyValue("padding-bottom")), e = parseInt(d.getPropertyValue("padding-right")), g = parseInt(d.getPropertyValue("border-left-width")), h = parseInt(d.getPropertyValue("border-right-width")), w = parseInt(d.getPropertyValue("border-bottom-width")), d = parseInt(d.getPropertyValue("border-right-width"));
    a.width -= b + e + g + d;
    a.height -= f + c + h + w;
    return a;
  };
};
CTAT.Component.Base.SVG.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTAT.Component.Base.SVG.prototype.constructor = CTAT.Component.Base.SVG;
var CTATTextBasedComponent = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.Tutorable.call(this, a, b, c, e, g, d, f);
  var h = this, k = "", l = !0, m = 255, n = !0;
  this.setAction("UpdateTextField");
  this.backgrade = !0;
  this.assignText = function(a) {
    k = a;
    this.setInput(a);
  };
  this.UpdateTextArea = this.UpdateTextField = function(a) {
    this.setText(a);
  };
  this.setTabOnEnter = function(a) {
    l = CTATGlobalFunctions.toBoolean(a);
  };
  this.setStyleHandler("TabOnEnter", this.setTabOnEnter);
  this.data_ctat_handlers["tab-on-enter"] = this.setTabOnEnter;
  this.assignEditable = function(a) {
    n = a;
  };
  this.setMaxCharacters = function(a) {
    m = a;
  };
  this.setStyleHandler("MaxCharacters", this.setMaxCharacters);
  this.getText = function() {
    return k;
  };
  this.getEditable = function() {
    return n;
  };
  this.getTabOnEnter = function() {
    return l;
  };
  this.getMaxCharacters = function() {
    return m;
  };
  this.setEditable = function(a) {
    h.assignEditable(CTATGlobalFunctions.toBoolean(a));
    null !== h.getComponent() && (!0 === h.getEditable() ? h.getComponent().contentEditable = "true" : h.getComponent().contentEditable = "false");
  };
  this.setStyleHandler("Enabled", this.setEditable);
  this.setEnabled = function(a) {
    h.assignEnabled(a);
    null !== h.getComponent() && (h.getComponent().disabled = !a, this.setEditable(a));
  };
  var p = this.processAction.bind(this);
  this.processAction = function(a, b) {
    this.updateSAI();
    CTATGlobalFunctions.isBlank(this.getValue()) || p(a, b);
  };
  this.processKeypress = function(a) {
    h.ctatdebug("processKeypress ()");
    var b = a.target.getAttribute("id");
    h.ctatdebug(b);
    var d = h.getComponentFromID(b);
    if (null === d) {
      h.ctatdebug("Error: component reference is null");
    } else {
      switch(h.ctatdebug(d.getName() + " keydown (" + ("google" == CTATConfig.platform ? 0 : window.event ? window.event.keyCode : a.which) + " -> " + a.eventPhase + ") ID: " + b), a.which) {
        case 37:
          h.ctatdebug("left arrow key pressed!");
          break;
        case 39:
          h.ctatdebug("right arrow key pressed!");
          break;
        case 13:
          return l ? (h.component.blur(), CTATGlobals.Tab.Focus = null, h.processAction(), !1) : !0;
        case 0:
          h.component.blur();
          CTATGlobals.Tab.Focus = null;
          h.processAction();
          break;
        default:
          h.ctatdebug('Key pressed! "' + a.which + '"');
      }
    }
  };
  this.updateSAI = function() {
    this.setInput(this.getValue());
  };
};
CTATTextBasedComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATTextBasedComponent.prototype.constructor = CTATTextBasedComponent;
CTAT.Component.Base.UnitDisplay = function(a, b, c, e, g, d, f) {
  CTAT.Component.Base.SVG.call(this, a, b, c, e, g, d, f);
  var h = "1/2+1/4+(0*1/8)";
  this.setActionInput("SetPieces", h);
  var k = "#FF00FF", l = 1, m = "#FF00FF", n = .2, p = "black", u = 1;
  this.getPieceBorderColor = function() {
    return p;
  };
  this.setPieceBorderColor = function(a) {
    p = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getPieceBorderThickness = function() {
    return u;
  };
  this.setPieceBorderThickness = function(a) {
    u = parseInt(a);
    isNaN(u) && (u = 0);
    return this;
  };
  var t = [], v = this;
  this.generateClassname = function() {
    return this.getName() + " UnitPart";
  };
  this.getPieces = function() {
    return t;
  };
  var w = function(a) {
    if (a.hasAttributeNS(null, "data-selected")) {
      return CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected"));
    }
    a.setAttributeNS(null, "data-selected", !0);
    return !0;
  };
  this.getPiecesBySelected = function(a) {
    for (var b = this.getPieces(), d = [], f, c = 0;c < b.length;c++) {
      f = b[c], w(f) === a && d.push(f);
    }
    return d;
  };
  this.getSelectedPieces = this.getPiecesBySelected.bind(this, !0);
  this.getDeselectedPieces = this.getPiecesBySelected.bind(this, !1);
  this.getColor = function() {
    return k;
  };
  this.getColorAlpha = function() {
    return l;
  };
  this.getDeselectedColor = function() {
    return m;
  };
  this.getDeselectedColorAlpha = function() {
    return n;
  };
  this.setColor = function(a) {
    k = CTATGlobalFunctions.formatColor(a);
    a = this.getSelectedPieces();
    for (var b = 0;b < a.length;b++) {
      a[b].setAttributeNS(null, "fill", k);
    }
  };
  this.setColorAlpha = function(a) {
    l = Number(a);
    l = isNaN(l) ? 1 : l;
    a = this.getSelectedPieces();
    for (var b = 0;b < a.length;b++) {
    }
  };
  this.setDeselectedColor = function(a) {
    m = CTATGlobalFunctions.formatColor(a);
    a = this.getDeselectedPieces();
    for (var b = 0;b < a.length;b++) {
      a[b].setAttributeNS(null, "fill", m);
    }
  };
  this.setDeselectedColorAlpha = function(a) {
    n = Number(a);
    isNaN(n) && (n = .2);
    a = this.getDeselectedPieces();
    for (var b = 0;b < a.length;b++) {
    }
  };
  this.valueOf = function() {
    return this.evaluate();
  };
  this.getValue = function() {
    return h;
  };
  this.setValue = function(a) {
    h = String(a);
    this.setInput(h);
    this.clear();
    this.drawPieces();
    return h;
  };
  this.setParameterHandler("Value", this.setValue);
  this.data_ctat_handlers.value = function(a) {
    this.setValue(a);
  };
  this.drawPieces = function() {
  };
  this.evaluate = function() {
    return this.parseValue().reduce(function(a, b) {
      return b.selected ? a.add(b) : a;
    }, new CTAT.Math.Fraction);
  };
  this.numActive = function() {
    return this.getSelectedPieces().length;
  };
  this.parseValue = function() {
    var a = [];
    h.split("+").forEach(function(b) {
      var d = !0;
      -1 != b.search(/(\(\s*0\s*\*)|(\*\s*0\s*\))/) && (d = !1, b = b.replace(/(\(\s*0\s*\*)|(\*\s*0\s*\))/, ""), b = b.replace(/[() ]/g, ""));
      b = new CTAT.Math.Fraction(b);
      b.selected = d;
      0 < b && a.push(b);
      return b;
    });
    return a;
  };
  this.updateValue = function() {
    return h = this.getPieces().map(function(a) {
      return D(a.getAttributeNS(null, "data-value"), CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected")));
    }).join("+");
  };
  var x = function(a, b) {
    var d = CTATGlobalFunctions.toBoolean(b);
    CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected"));
    !0 === d ? a.setAttributeNS(null, "data-selected", !0) : a.setAttributeNS(null, "data-selected", !1);
  };
  this.clickHandler = function(a) {
    !0 === v.getEnabled() && (a = CTATGlobalFunctions.toBoolean(this.getAttributeNS(null, "data-selected")), x(this, !a), v.setActionInput("SetPieces", v.updateValue()), v.processAction());
  };
  this.updateSAI = function() {
    v.setActionInput("SetPieces", v.updateValue());
  };
  this.addPieceElem = function(a, b, d) {
    a.setAttributeNS(null, "data-selected", d);
    a.setAttributeNS(null, "data-value", b.toString());
    a.dataValue = b;
    this.getEnabled() && (a.style.cursor = "pointer");
    a.addEventListener("click", this.clickHandler);
    t.push(a);
  };
  var C = this.setEnabled;
  this.setEnabled = function(a) {
    C(a);
    t.forEach(function(b) {
      b.style.cursor = a ? "pointer" : "default";
    });
  };
  this.clear = function() {
    t = [];
  };
  var D = function(a, b) {
    var d = a.toString();
    !1 === b && (d = "(0*" + d + ")");
    return d;
  };
  this.AddPiece = function(a, b) {
    if (a) {
      var d = new CTAT.Math.Fraction(a);
      if (0 < CTAT.Math.round(d.valueOf())) {
        var f = h.split("+");
        f.push(D(d, b));
        v.setValue(f.join("+"));
      }
    }
  };
  this.AddToValue = function(a, b) {
    if (a) {
      var d = new CTAT.Math.Fraction(a);
      if (0 < CTAT.Math.round(d.valueOf())) {
        var f = h.split("+");
        f.push(D(d, b));
        h = f.join("+");
      }
    }
    return h;
  };
  var y = -1, A = function(a) {
    isNaN(a) && this.get_denominator();
    a = Math.max(a, 1);
    1 < y && (a = Math.min(a, y));
    return a;
  }.bind(this);
  this.set_max_denominator = function(a) {
    a = parseInt(a);
    isNaN(a) || (y = a);
  };
  this.set_denominator = function(a) {
    v.setHintHighlight(!1);
    var b = "string" === typeof a ? parseInt(a) : a;
    if (!isNaN(b) && (b = A(b), this.get_denominator() != a)) {
      var d = v.evaluate();
      v.clear();
      a = [];
      d.set_denominator(b);
      for (var f = new CTAT.Math.Fraction(1, b), c = Math.floor(d.numerator), e = b - c, g = 0;g < c;g++) {
        a.push(D(f, !0));
      }
      b = new CTAT.Math.Fraction(d.numerator - c, b);
      b.equals(0) || (a.push(D(b, !0)), a.push(D(f.subtract(b), !1)), e--);
      for (b = 0;b < e;b++) {
        a.push(D(f, !1));
      }
      this.setValue(a.join("+"));
      v.setActionInput("SetPieces", h);
      v.processAction();
      return h;
    }
  };
  this.get_denominator = function() {
    return t.reduce(function(a, b, d, f) {
      return Math.min(a, b.dataValue.denominator);
    }, Infinity);
  };
  this.change_denominator = function(a) {
    return this.set_denominator(this.get_denominator() + Number(a));
  };
  this.set_number_pieces = function(a) {
    v.setHintHighlight(!1);
    a = "string" === typeof a ? parseInt(a) : a;
    if (!isNaN(a)) {
      a = A(a);
      var b = v.numActive();
      v.clear();
      for (var d = [], f = new CTAT.Math.Fraction(1, a), c = 0;c < a;c++) {
        d.push(D(f, 0 < b)), b--;
      }
      this.setValue(d.join("+"));
      v.setActionInput("SetPieces", h);
      v.processAction();
      return h;
    }
  };
  this.change_number_pieces = function(a) {
    this.set_number_pieces(t.length + a);
  };
  this.SetPieces = function(a) {
    v.setValue(a);
  };
  var r = function(a) {
    if (0 !== Object.keys(B).length) {
      if (a instanceof CTAT.Component.Base.Tutorable) {
        if (a != v) {
          if (B.hasOwnProperty(a.getName())) {
            return B[a.getName()];
          }
          if (B.hasOwnProperty(a.getComponentGroup())) {
            return B[a.getComponentGroup()];
          }
        }
      } else {
        if (a instanceof CTATSAI) {
          if (a.getSelection() != v.getName() && B.hasOwnProperty(a.getSelection())) {
            return B[a.getSelection()];
          }
        } else {
          if (a instanceof String) {
            if (a != v.getName() && B.hasOwnProperty(a)) {
              return B[a];
            }
          } else {
            if (a instanceof Element && a != v.getComponent() && B.hasOwnProperty(a.id)) {
              return B[a.id];
            }
          }
        }
      }
    }
    return null;
  };
  document.addEventListener(CTAT.Component.Base.Tutorable.EventType.action, function(a) {
    var b = a.detail.sai;
    a = r(a.detail.component);
    b && null !== a && a(b);
  }, !1);
  var B = {};
  this.set_numerator = function(a) {
    return this.change_numerator(a - this.getSelectedPieces().length);
  };
  this.change_numerator = function(a) {
    0 !== a && (0 < a ? t.every(function(b) {
      !1 === w(b) && (x(b, !0), a--);
      return 0 < a;
    }) : (t.reverse(), t.every(function(b) {
      !0 === w(b) && (x(b, !1), a++);
      return 0 > a;
    }), t.reverse()));
  };
  a = function(a, b, d) {
    var f = parseInt(d.getInput());
    if (!isNaN(f)) {
      switch(d.getAction()) {
        case "ButtonPressed":
          a.call(this, f);
          break;
        case "Update":
        ;
        case "UpdateTextField":
        ;
        case "UpdateTextArea":
          b.call(this, f);
      }
    }
  };
  var q = {numerator:{items:[], callback:a.bind(this, this.change_numerator, this.set_numerator)}, denominator:{items:[], callback:a.bind(this, this.change_denominator, this.set_denominator)}, partition:{items:[], callback:a.bind(this, this.change_number_pieces, this.set_number_pieces)}, value:{items:[], callback:function(a) {
    switch(a.getAction()) {
      case "SetPieces":
      ;
      case "UpdateTextField":
      ;
      case "UpdateTextArea":
        v.setValue(a.getInput());
    }
  }}}, E = function() {
    B = {};
    var a, b = function(a, b) {
      b = b.trim();
      0 < b.length && (B[b] = a);
    }, d;
    for (d in q) {
      a = q[d], a.items.forEach(b.bind(this, a.callback));
    }
  };
  this.setNumeratorControllers = function(a) {
    q.numerator.items = a.split(/\s*;\s*/);
    E();
    return this;
  };
  this.setParameterHandler("NumeratorControllers", this.setNumeratorControllers);
  this.setDenominatorControllers = function(a) {
    q.denominator.items = a.split(/\s*;\s*/);
    E();
    return this;
  };
  this.setParameterHandler("DenominatorControllers", this.setDenominatorControllers);
  this.setPartitionControllers = function(a) {
    q.partition.items = a.split(/\s*;\s*/);
    E();
    return this;
  };
  this.setParameterHandler("PartitionControllers", this.setPartitionControllers);
};
CTAT.Component.Base.UnitDisplay.prototype = Object.create(CTAT.Component.Base.SVG.prototype);
CTAT.Component.Base.UnitDisplay.prototype.constructor = CTAT.Component.Base.UnitDisplay;
var CTATAudioButton = function(a, b, c, e, g) {
  CTATButtonBasedComponent.call(this, "CTATAudioButton", "audiobutton", a, b, c, e, g);
  var d = this;
  d.setActionInput("play", "-1");
  var f = null, h = "";
  this.setParameterHandler("SoundFile", function(a) {
    h = a;
  });
  this.ctatdebug("CTATAudioButton (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    d.setSAI(d.getName(), "ButtonPressed", "-1");
    var a = document.createElement("button");
    a.value = d.getName();
    a.name = d.getName();
    a.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    a.setAttribute("onkeypress", "return noenter(event)");
    a.textContent = d.getText();
    a.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    d.setInitialized(!0);
    d.setComponent(a);
    d.addComponentReference(d, a);
    d.getDivWrap().appendChild(a);
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.addSafeEventListener("click", d.processClick, a);
    d.addSafeEventListener("focus", d.processFocus, a);
    f = document.createElement("audio");
    f.addEventListener("load", function() {
      d.ctatdebug("Audio loaded");
      d.setEnabled(!0);
    }, !0);
  };
  this.reset = function() {
    d.configFromDescription();
    d.processSerialization();
    d.setEnabled(!0);
  };
  this.ButtonPressed = function() {
    d.ctatdebug("ButtonPressed ()");
  };
  this.processClick = function(a) {
    d.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === d.getEnabled() ? (d.ctatdebug("Playing audio file: " + h), f.setAttribute("src", h), f.load(), f.play(), d.processAction()) : d.ctatdebug("Component is disabled, not grading");
  };
  this.play = function() {
    f.setAttribute("src", h);
    f.load();
    f.play();
  };
  this.playClip = function(a) {
    f.setAttribute("src", a);
    f.load();
    f.play();
  };
  this.pause = function() {
    f.pause();
  };
};
CTATAudioButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATAudioButton.prototype.constructor = CTATAudioButton;
CTAT.ComponentRegistry.addComponentType("CTATAudioButton", CTATAudioButton);
var CTATButton = function(a, b, c, e, g) {
  CTATButtonBasedComponent.call(this, "CTATButton", "aButton", a, b, c, e, g);
  var d = this, f = null;
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    d.setActionInput("ButtonPressed", "-1");
    f = document.createElement("button");
    f.type = "button";
    f.name = d.getName();
    f.value = "-1";
    f.id = CTATGlobalFunctions.gensym.div_id();
    f.setAttribute("onkeypress", "return noenter(event)");
    f.classList.add("CTAT-button");
    d.setInitialized(!0);
    if (d.getText()) {
      f.textContent = d.getText();
    } else {
      if (d.getDivWrap() && d.getDivWrap().innerHTML) {
        var a = d.getDivWrap().innerHTML;
        d.getDivWrap().innerHTML = "";
        f.innerHTML = a;
      }
    }
    d.setComponent(f);
    d.addComponentReference(d, f);
    d.getDivWrap().appendChild(f);
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.addSafeEventListener("click", d.processClick, f);
    d.addSafeEventListener("focus", d.processFocus, f);
  };
  this.render = function() {
  };
  this.reset = function() {
    d.configFromDescription();
    d.processSerialization();
    d.setEnabled(!0);
  };
};
CTATButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATButton.prototype.constructor = CTATButton;
CTAT.ComponentRegistry.addComponentType("CTATButton", CTATButton);
var CTATComboBox = function(a, b, c, e, g) {
  CTAT.Component.Base.Clickable.call(this, "CTATComboBox", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var d = this, f = null;
  this.setAction("UpdateComboBox");
  var h = ",";
  this.setStyleHandler("SplitCharacter", function(a) {
    h = a;
    f && (f.innerHTML = "", this.addLabels(k, h));
  }.bind(this));
  var k = "---,x,y,z";
  this.setStyleHandler("Labels", function(a) {
    k = a;
    f && (f.innerHTML = "", this.addLabels(k, h));
  }.bind(this));
  this.setStyleHandler("DropDownSize", null);
  this.setStyleHandler("DropDownWidth", null);
  this.init = function() {
    d.setInitialized(!0);
    f = document.createElement("select");
    f.name = d.getName();
    f.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    f.setAttribute("onkeypress", "return noenter(event)");
    f.onchange = this.processComboSelection;
    f.classList.add("CTAT-combobox");
    f.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    a ? f.innerHTML = a : this.addLabels(k, h);
    d.assignEnabled(!0);
    !0 === d.getEnabled() ? f.disabled = !1 : f.disabled = !0;
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.addComponentReference(d, f);
    d.setComponent(f);
    d.getDivWrap().appendChild(f);
    d.render();
    f.addEventListener("focus", d.processFocus);
  };
  this.getHTMLComponent = function() {
    return f;
  };
  this.addLabels = function(a, b) {
    for (var d = a.split(b ? b : h), f = 0;f < d.length;f++) {
      this.addItem(d[f]);
    }
  };
  this.addItem = function(a) {
    d.ctatdebug("addItem (" + a + ")");
    var b = document.createElement("option");
    b.setAttribute("value", a);
    b.textContent = a;
    b.classList.add("CTAT-combobox--option");
    f.appendChild(b);
  };
  this.valid_selection = function() {
    return 0 <= f.selectedIndex && !CTATGlobalFunctions.isBlank(f.value);
  };
  this.processComboSelection = function() {
    d.ctatdebug("processComboSelection ()");
    d.setInput(f.options[f.selectedIndex].value);
    d.valid_selection() ? d.processAction() : this.ctatdebug("Empty component, nothing to grade");
  };
  this.UpdateComboBox = function(a) {
    f.value = a;
  };
};
CTATComboBox.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATComboBox.prototype.constructor = CTATComboBox;
CTAT.ComponentRegistry.addComponentType("CTATComboBox", CTATComboBox);
var CTATFractionBar = function(a, b, c, e, g) {
  CTAT.Component.Base.UnitDisplay.call(this, "CTATFractionBar", "aFractionBar", a, b, c, e, g);
  var d = CTATGlobals.NameSpace.svg;
  this.init = function() {
    this.initSVG();
    this.baseGroup = document.createElementNS(d, "g");
    this.getComponent().appendChild(this.baseGroup);
    this.getComponent().classList.add("CTAT-fraction-bar");
    this.drawPieces();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("focus", this.processFocus);
  };
  this.drawPieces = function() {
    if (this.baseGroup) {
      for (var a = this.parseValue(), b = 0, c = document.createDocumentFragment(), e = 0;e < a.length;e++) {
        var g = a[e], n = 100 * g, p = document.createElementNS(d, "rect");
        p.classList.add("CTAT-fraction-bar--piece");
        p.setAttributeNS(null, "height", "100%");
        p.setAttributeNS(null, "width", n + "%");
        p.setAttributeNS(null, "y", 0);
        p.setAttributeNS(null, "x", b + "%");
        this.addPieceElem(p, g, g.selected);
        b += n;
        c.appendChild(p);
      }
      this.baseGroup.innerHTML = "";
      this.baseGroup.appendChild(c);
      var u = this.baseGroup.getBBox().width - 1;
      Array.prototype.slice.call(this.baseGroup.childNodes).forEach(function(a) {
        if ("rect" == a.nodeName) {
          var b = window.getComputedStyle(a), d = parseFloat(b.getPropertyValue("padding-left")), f = parseFloat(b.getPropertyValue("stroke-width")), b = a.getBBox();
          a.setAttributeNS(null, "y", b.y + f / 2);
          a.setAttributeNS(null, "height", b.height - f);
          var c = b.x + f / 2, f = b.width - f;
          1 > b.x ? f -= d / 2 : (c += d / 2, f = b.x + b.width >= u ? f - d / 2 : f - d);
          a.setAttributeNS(null, "x", c);
          a.setAttributeNS(null, "width", f);
        }
      });
    }
  };
  this.setShowFractionLabel = function(a) {
    CTATGlobalFunctions.toBoolean(a);
  };
  this.setStyleHandler("showFractionLabel", this.setShowFractionLabel);
};
CTATFractionBar.prototype = Object.create(CTAT.Component.Base.UnitDisplay.prototype);
CTATFractionBar.prototype.constructor = CTATFractionBar;
CTAT.ComponentRegistry.addComponentType("CTATFractionBar", CTATFractionBar);
var CTATGroupingComponent = function(a, b, c, e, g) {
  CTAT.Component.Base.Tutorable.call(this, "CTATGroupingComponent", "__undefined__", a, b, c, e, g);
  var d = this;
  d.isTabIndexable = !1;
  var f = null;
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    d.addCSSAttribute("z-index", CTATGlobalFunctions.gensym.z_index());
    d.setInitialized(!0);
  };
  this.postProcess = function() {
    d.ctatdebug("postProcess ()");
    var a = this.getGrDescription().parameters, b;
    for (b in a) {
      var c = a[b];
      d.ctatdebug("Checking parameter name: " + b);
      "TargetMovieClip" == b && (d.ctatdebug("Loading sub element: " + c.trim() + " ..."), c = findMovieClip(c), null !== c && (d.ctatdebug("Found target movieclip, storing for future reference ..."), f = c));
    }
  };
  this.setTempLock = function(a) {
    d.ctatdebug("setTemplock (" + a + ")");
    null === f && d.ctatdebug("Error: no target MovieClip assigned to this grouping component");
    return !0;
  };
  this.move = function(a, b) {
    d.ctatdebug("move (" + a + "," + b + ")");
    null !== f ? (f.getDivWrapper().style.left = a, f.getDivWrapper().style.top = b) : d.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.size = function(a, b) {
    this.setSize(a, b);
  };
  this.setSize = function(a, b) {
    d.ctatdebug("setSize (" + a + "," + b + ")");
    null !== f ? (f.getDivWrapper().style.width = a + "px", f.getDivWrapper().style.height = b + "px") : d.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.SetVisible = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    d.ctatdebug("SetVisible (" + a + ")", "graphics");
    null !== f ? !0 === a ? f.getDivWrapper().style.display = "block" : f.getDivWrapper().style.display = "none" : d.ctatdebug("Error: no target MovieClip assigned to this grouping component");
    d.ctatdebug("SetVisible () Done");
  };
  this.setVisible = function(a) {
    var b = CTATGlobalFunctions.toBoolean(a);
    d.ctatdebug("setVisible (" + a + ")", "graphics");
    null !== f ? !0 === b ? f.getDivWrapper().style.display = "block" : f.getDivWrapper().style.display = "none" : d.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.configFromDescription();
};
CTATGroupingComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATGroupingComponent.prototype.constructor = CTATGroupingComponent;
CTAT.ComponentRegistry.addComponentType("CTATComponentContainerReference", CTATGroupingComponent);
var CTATImageButton = function(a, b, c, e, g) {
  CTATImageButtonComponent.call(this, "CTATImageButton", "__undefined__", a, b, c, e, g);
  var d = this, f = null, h = null, k = null;
  this.configFromDescription();
  this.init = function() {
    f = new Image;
    f.name = d.getName();
    f.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    f.setAttribute("onkeypress", "return noenter(event)");
    f.style.opacity = this.getTransparencyValue();
    d.setComponent(f);
    d.addComponentReference(d, f);
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.setInitialized(!0);
    d.getDivWrap().appendChild(f);
    d.assignActiveImage(d.getDefaultImage());
    d.addCSSAttribute("z-index", CTATGlobalFunctions.gensym.z_index());
    d.addCSSAttribute("width", d.getWidth());
    d.addCSSAttribute("height", d.getHeight());
    d.render();
    h = document.createElement("div");
    h.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    h.setAttribute("style", "pointer-events:none; position: absolute;left:0px; top: 0px; z-index: " + CTATGlobalFunctions.gensym.z_index() + ";width: " + d.getWidth() + "px;height: " + d.getHeight() + "px; text-align: center; vertical-align: middle; line-height: " + d.getHeight() + "px; ");
    h.textContent = this.getText();
    d.getDivWrap().appendChild(h);
    k = document.createElement("div");
    k.setAttribute("style", "position: absolute;left:0px; top: 0px; z-index: " + CTATGlobalFunctions.gensym.z_index() + ";width: " + d.getWidth() + "px;height: " + d.getHeight() + "px; opacity : 0.0; filter: alpha(opacity=0); background-color: #ffffff");
    d.getDivWrap().appendChild(k);
    d.addSafeEventListener("click", d.processClick, k);
    d.addSafeEventListener("focus", d.processFocus, k);
    d.addSafeEventListener("mouseover", d.processMouseOver, k);
    d.addSafeEventListener("mouseout", d.processMouseOut, k);
  };
};
CTATImageButton.prototype = Object.create(CTATImageButtonComponent.prototype);
CTATImageButton.prototype.constructor = CTATImageButton;
CTAT.ComponentRegistry.addComponentType("CTATImageButton", CTATImageButton);
var CTATControllerButton = function(a, b, c, e, g) {
  CTATImageButton.call(this, a, b, c, e, g);
  this.setClassName("CTATControllerButton");
  var d = 1;
  this.setParameterHandler("delta", function(a) {
    a = Number(a);
    isNaN(a) || (d = a);
    this.setInput(d);
  });
  this.updateSAI = function() {
    this.setInput(d);
  };
};
CTATControllerButton.prototype = Object.create(CTATImageButton.prototype);
CTATControllerButton.prototype.constructor = CTATControllerButton;
CTAT.ComponentRegistry.addComponentType("CTATControllerButton", CTATControllerButton);
var CTATJumble = function(a, b, c, e, g) {
  CTAT.Component.Base.Tutorable.call(this, "CTATJumble", "aJumble", a, b, c, e, g);
  var d = "", f = "center", h = 0, k = 10, l = !1, m = this;
  m.setActionInput("SetOrder", d);
  var n = null;
  this.init = function() {
    m.setInitialized(!0);
    n = document.createElement("div");
    n.classList.add("CTAT-jumble");
    this.setComponent(n);
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    this.getDivWrap().appendChild(n);
    m.addComponentReference(m, m.getDivWrap());
    a ? (n.innerHTML = a, $(n).children().addClass("CTAT-jumble--item").attr({unselectable:"on", draggable:!0}).each(function() {
      this.addEventListener("dragstart", u, !1);
      this.addEventListener("dragenter", v, !1);
      this.addEventListener("dragover", t, !1);
      this.addEventListener("dragleave", w, !1);
      this.addEventListener("drop", x, !1);
      this.addEventListener("dragend", D, !1);
    })) : this.init_items(d);
    this.component.addEventListener("focus", this.processFocus);
  };
  var p = null, u = function(a) {
    a.target.style.opacity = "0.4";
    p = a.target;
    a.dataTransfer.effectAllowed = "move";
    a.dataTransfer.setData("text/html", a.target.innerHTML);
  }, t = function(a) {
    a.preventDefault && a.preventDefault();
    a.dataTransfer.dropEffect = "move";
    return !1;
  }, v = function(a) {
    this.classList.add("CTAT-jumble--item--over");
  }, w = function(a) {
    this.classList.remove("CTAT-jumble--item--over");
  }, x = function(a) {
    a.stopPropagation && a.stopPropagation();
    if (p != this) {
      p.innerHTML = this.innerHTML;
      var b = p.id;
      p.id = this.id;
      this.innerHTML = a.dataTransfer.getData("text/html");
      this.id = b;
      m.setInput(m.getOrder());
      m.processAction();
    }
    return !1;
  }, C = [], D = function(a) {
    this.style.opacity = 1;
    C.forEach(function(a) {
      a.classList.remove("CTAT-jumble--item--over");
    });
  };
  this.init_items = function(a) {
    if (n) {
      var b = document.createDocumentFragment();
      C = [];
      a = a.split(";");
      for (var d = a.length, f = 0;f < d;f++) {
        var c = document.createElement("div");
        c.textContent = a[f];
        c.id = this.getName() + f;
        c.setAttribute("unselectable", "on");
        c.setAttribute("draggable", !0);
        c.classList.add("CTAT-jumble--item");
        c.addEventListener("dragstart", u, !1);
        c.addEventListener("dragenter", v, !1);
        c.addEventListener("dragover", t, !1);
        c.addEventListener("dragleave", w, !1);
        c.addEventListener("drop", x, !1);
        c.addEventListener("dragend", D, !1);
        b.appendChild(c);
        C.push(c);
      }
      n.innerHTML = "";
      n.appendChild(b);
    }
  };
  this.getTextItems = function() {
    return d;
  };
  this.getAlignment = function() {
    return f;
  };
  this.getOrientation = function() {
    return this.orientation;
  };
  this.getAnimationSpeed = function() {
    return h;
  };
  this.getBorderPadding = function() {
    return borderPadding;
  };
  this.getCellPadding = function() {
    return k;
  };
  this.getShowInsertionMarker = function() {
    return l;
  };
  this.setTextItems = function(a) {
    d = a;
    this.init_items(d);
  };
  this.setAlignment = function(a) {
    f = a;
  };
  this.setOrientation = function(a) {
    this.orientation = a;
  };
  this.setAnimationSpeed = function(a) {
    h = a;
  };
  this.setBorderPadding = function(a) {
    borderPadding = a;
  };
  this.setCellPadding = function(a) {
    k = a;
  };
  this.setShowInsertionMarker = function(a) {
    l = a;
  };
  this.setParameterHandler("textItems", this.setTextItems);
  this.SetOrder = function(a) {
  };
  this.getOrder = function() {
    for (var a = n.children, b = [], f = 0;f < a.length;f++) {
      var c = a[f];
      c.draggable && b.push(c.id);
    }
    return d = b.join(";");
  };
};
CTATJumble.HORIZONTAL = "Horizontal";
CTATJumble.VERTICAL = "Vertical";
CTATJumble.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATJumble.prototype.constructor = CTATJumble;
CTAT.ComponentRegistry.addComponentType("CTATJumble", CTATJumble);
var CTATNumberLine = function(a, b, c, e, g) {
  CTAT.Component.Base.SVG.call(this, "CTATNumberLine", "aNumberLine", a, b, c, e, g);
  var d = CTAT.Math.Fraction, f = CTATGlobals.NameSpace.svg;
  a = function(a, b, c, e, g) {
    this.numberline = a;
    this.step = new d(b);
    this.size = c;
    this.origin = new d(0);
    this.tick_class = e ? e : null;
    this.label_class = g ? g : null;
    this.g = null;
    this.setStep = function(a) {
      this.step = new d(a);
    };
    this.setSize = function(a) {
      a = Number(a);
      isNaN(a) && (a = c);
      this.size = a;
    };
    this.setOrigin = function(a) {
      this.origin = new d(a);
    };
    this.generate = function() {
      if (this.numberline) {
        var a = new d, b = document.createDocumentFragment(), c = document.createElementNS(f, "g");
        c.setAttributeNS(null, "data-step-size", this.step.toString());
        c.setAttributeNS(null, "pointer-events", "none");
        this.tick_class && c.classList.add(this.tick_class);
        b.appendChild(c);
        console.log(this.step, 0 < this.step);
        if (0 < this.step) {
          a.set(this.origin).reduce();
          for (console.log(a, this.numberline.Maximum, this.numberline.Minimum);a <= this.numberline.Maximum;) {
            a >= this.numberline.Minimum && c.appendChild(this.numberline.genTickmark(a, null, this.size)), a = a.add(this.step);
          }
          a.set(this.origin).reduce();
          for (a = a.subtract(this.step);a >= this.numberline.Minimum;) {
            a <= this.numberline.Maximum && c.appendChild(this.numberline.genTickmark(a, label, this.size)), a = a.subtract(this.step);
          }
        }
        return b;
      }
    };
  };
  var h = new a(this, new d(1), 30, "CTAT-number-line--large-tickmark", "CTAT-number-line--large-tickmark-label");
  this.setLargeTickSize = function(a) {
    h.setSize(s);
    this.render();
    return this;
  };
  this.setParameterHandler("LargeTickmarkSize", this.setLargeTickSize);
  this.setParameterHandler("LargeTickmarkStep", function(a) {
    h.setStep(a);
    this.render();
    return this;
  });
  var k = new a(this, new d(1, 2), 20, "CTAT-number-line--small-tickmark", "CTAT-number-line--small-tickmark-label");
  this.setSmallTickSize = function(a) {
    k.setSize(s);
    this.render();
    return this;
  };
  this.setParameterHandler("SmallTickmarkSize", this.setSmallTickSize);
  this.setParameterHandler("SmallTickmarkStep", function(a) {
    k.setStep(a);
    this.render();
    return this;
  });
  var l = new a(this, new d(0), 25, "CTAT-number-line--denominator-tickmark", "CTAT-number-line--denominator-tickmark-label");
  this.setParameterHandler("DenominatorTickmarkSize", function(a) {
    l.setSize(a);
    this.render();
    return this;
  });
  this.X_Axis = new function(a, b, d, f) {
    var c = {};
    this.svg_group = null;
    var e = a;
    Object.defineProperty(this, "start", {get:function() {
      return e;
    }, set:function(a) {
      c = {};
      e = a;
    }});
    Object.defineProperty(this, "min_loc", {get:function() {
      if (!c.hasOwnProperty("min_loc")) {
        var a = this.start.clone(), b = CTAT.Geom.Point.polar(20, this.angle()), a = a.add(b);
        a.x = CTAT.Math.round(a.x);
        a.y = CTAT.Math.round(a.y);
        c.min_loc = a;
      }
      return c.min_loc;
    }});
    var g = b;
    Object.defineProperty(this, "end", {get:function() {
      return g;
    }, set:function(a) {
      c = {};
      g = a;
    }});
    Object.defineProperty(this, "max_loc", {get:function() {
      if (!c.hasOwnProperty("max_loc")) {
        var a = this.end.clone(), b = CTAT.Geom.Point.polar(20, this.angle()), a = a.add(b.scale(-1));
        a.x = CTAT.Math.round(a.x);
        a.y = CTAT.Math.round(a.y);
        c.max_loc = a;
      }
      return c.max_loc;
    }});
    var l = d;
    Object.defineProperty(this, "min", {get:function() {
      return l;
    }, set:function(a) {
      c = {};
      l = a;
    }});
    var h = f;
    Object.defineProperty(this, "max", {get:function() {
      return h;
    }, set:function(a) {
      c = {};
      h = a;
    }});
    Object.defineProperty(this, "length", {get:function() {
      c.hasOwnProperty("length") || (c.length = CTAT.Math.round(this.min_loc.distance(this.max_loc)));
      return c.length;
    }});
    this.isHorizontal = function() {
      return this.start.y === this.end.y;
    };
    this.isVertical = function() {
      return this.start.x === this.end.x;
    };
    Object.defineProperty(this, "range", {get:function() {
      return this.max.subtract(this.min);
    }});
    Object.defineProperty(this, "step_size", {get:function() {
      return CTAT.Geom.Point.equals(this.min_loc, this.max_loc) ? this.length : CTAT.Math.round(this.length / this.range);
    }});
    this.s_vec = function() {
      return this.max_loc.add(this.min_loc.scale(-1));
    };
    this.slope = function() {
      var a = this.s_vec();
      return a.y / a.x;
    };
    this.step = function() {
      c.hasOwnProperty("step") || (c.step = this.s_vec().normalize(this.step_size));
      return c.step;
    };
    this.scalar = function() {
      c.hasOwnProperty("scalar") || (c.scalar = this.range / this.length);
      return c.scalar;
    };
    this.zero = function() {
      c.hasOwnProperty("zero") || (c.zero = this.min_loc.add(this.step().scale(-this.min)), c.zero.x = CTAT.Math.round(c.zero.x), c.zero.y = CTAT.Math.round(c.zero.y));
      return c.zero;
    };
    this.angle = function() {
      if (!c.hasOwnProperty("angle")) {
        var a = this.end.add(this.start.scale(-1));
        c.angle = Math.atan2(a.y, a.x);
      }
      return c.angle;
    };
    this.angle_deg = function() {
      return CTAT.Math.rad2deg(this.angle());
    };
    this.getPosition = function(a) {
      a = this.zero().add(this.step().scale(1 * a));
      a.x = CTAT.Math.round(a.x);
      a.y = CTAT.Math.round(a.y);
      return a;
    };
    this.projected_point = function(a) {
      var b = this.s_vec(), d = a.add(this.min_loc.scale(-1)), d = 0 + (b.y * d.x - b.x * d.y) / (b.y * b.y + b.x * b.x);
      return a.add(new DOMPoint(-d * b.y, d * b.x));
    };
    this.getProjectedPoint = function(a) {
      a = this.projected_point(a);
      return a.distance(this.max_loc) > this.length ? this.min_loc : a.distance(this.min_loc) > this.length ? this.max_loc : a;
    };
    this.getAxisValue = function(a) {
      return CTAT.Math.round(l + this.scalar() * this.min_loc.distance(this.getProjectedPoint(a)));
    };
  }(new DOMPoint(0, 0), new DOMPoint(0, 0), new d(0), new d(3));
  Object.defineProperty(this, "Maximum", {get:function() {
    return this.X_Axis.max;
  }, set:function(a) {
    this.X_Axis.max = new d(a);
  }});
  this.setMaximum = function(a) {
    this.Maximum = a;
  };
  this.setParameterHandler("Maximum", this.setMaximum);
  this.data_ctat_handlers.maximum = this.setMaximum;
  Object.defineProperty(this, "Minimum", {get:function() {
    return this.X_Axis.min;
  }, set:function(a) {
    this.X_Axis.min = new d(a);
  }});
  this.setMinimum = function(a) {
    this.Minimum = a;
  };
  this.setParameterHandler("Minimum", this.setMinimum);
  this.data_ctat_handlers.minimum = this.setMinimum;
  var m = 1;
  Object.defineProperty(this, "Max_Points", {get:function() {
    return m;
  }, set:function(a) {
    a = parseInt(a);
    isNaN(a) || (m = a);
  }});
  this.setMaxPoints = function(a) {
    this.Max_Points = a;
  };
  this.setParameterHandler("Max_Points", this.setMaxPoints);
  this.data_ctat_handlers["max-points"] = this.setMaxPoints;
  var n = 7;
  this.setPointSize = function(a) {
    n = Number(a);
    v && (v.setAttributeNS(null, "r", n), $(this._point_group).find("circle").each(function() {
      $(this).attr("r", n);
    }));
  };
  this.setStyleHandler("PointSize", this.setPointSize);
  this.data_ctat_handlers["point-size"] = this.setPointSize;
  var p = !1;
  this.setSnapToTickMark = function(a) {
    p = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("SnapToTickmark", this.setSnapToTickMark);
  this.data_ctat_handlers.snap = this.setSnapToTickMark;
  this.theta = 0;
  Object.defineProperty(this, "Orientation", {get:function() {
    return 180 * this.theta / Math.PI;
  }, set:function(a) {
    a = Number(a);
    isNaN(a) && (a = 0);
    this.theta = Math.PI * a / 180;
  }});
  this.setOrientation = function(a) {
    this.Orientation = a;
    this.render();
  };
  this.setParameterHandler("Orientation", this.setOrientation);
  this.data_ctat_handlers.rotation = this.setOrientation;
  this._tickmarks = [];
  this.genTickmark = function(a, b, d) {
    var c = document.createDocumentFragment();
    if (!this._tickmarks.some(function(b) {
      return b.data.equals(a);
    })) {
      var e = document.createElementNS(f, "line"), g = this.X_Axis.getPosition(a), l = CTAT.Geom.Point.polar(d / 2, this.theta + Math.PI / 2).add(g);
      d = CTAT.Geom.Point.polar(-d / 2, this.theta + Math.PI / 2).add(g);
      e.setAttributeNS(null, "x1", l.x);
      e.setAttributeNS(null, "y1", l.y);
      e.setAttributeNS(null, "x2", d.x);
      e.setAttributeNS(null, "y2", d.y);
      e.setAttributeNS(null, "data-value", a.toString());
      e.data = a;
      e.location = g;
      e.label = null;
      this._tickmarks.push(e);
      c.appendChild(e);
      if ("" !== b) {
        g = document.createElementNS(f, "text");
        g.classList.add("CTAT-number-line--tickmark-label");
        g.setAttributeNS(null, "text-anchor", "middle");
        c.appendChild(g);
        if (null === b || void 0 === b) {
          if (1 == a.denominator) {
            g.appendChild(document.createTextNode(String(a.numerator))), g.setAttributeNS(null, "x", d.x), g.setAttributeNS(null, "y", d.y);
          } else {
            b = "" + String(a.numerator);
            l = "" + String(a.denominator);
            g.style.fontSize = "0.6em";
            g.setAttributeNS(null, "text-align", "center");
            var h = document.createElementNS(f, "tspan"), k = document.createElementNS(f, "tspan");
            h.appendChild(document.createTextNode(b));
            k.appendChild(document.createTextNode(l));
            g.appendChild(h);
            g.appendChild(k);
            h.setAttributeNS(null, "text-anchor", "middle");
            h.setAttributeNS(null, "x", 0);
            h.setAttributeNS(null, "dy", "-1em");
            k.setAttributeNS(null, "text-anchor", "middle");
            k.setAttributeNS(null, "x", 0);
            k.setAttributeNS(null, "dy", "1em");
            b.length > l.length ? h.style.textDecoration = "underline" : k.style.textDecoration = "overline";
            g.setAttributeNS(null, "transform", "translate" + CTAT.Geom.Point.to2DString(d, !0));
          }
        } else {
          g.appendChild(document.createTextNode(b.toString())), c.appendChild(tlabel), g.setAttributeNS(null, "x", d.x), g.setAttributeNS(null, "y", d.y);
        }
        e.label = g;
      }
    }
    return c;
  };
  var u = function() {
    if (null != this.X_Axis && null != this.X_Axis.svg_group) {
      var a = this.getBoundingBox(), b = window.getComputedStyle(this._axis_line_group), b = parseInt(b.getPropertyValue("stroke-width")), a = CTAT.Geom.Rectangle.inflate(a, -b, -b), d = new DOMPoint(a.width / 2, a.height / 2), c = d.add(CTAT.Geom.Point.polar(Math.min(40, a.height, a.width) / 4, this.theta)), e = Math.sin(this.theta), g = -Math.cos(this.theta), m = e * d.x + g * d.y, t = -a.height * g, n = -e * a.width, b = new DOMPoint(a.left, d.y), d = new DOMPoint(a.right, d.y);
      if (0 < Math.abs(CTAT.Math.round(t))) {
        var t = new DOMPoint(a.left, (m - e * a.left) / g), u = new DOMPoint(a.right, (m - e * a.right) / g);
        if (a.contains(t) || a.contains(u)) {
          c.distance(t) < c.distance(u) ? (b = u, d = t) : (b = t, d = u);
        }
      }
      0 < Math.abs(CTAT.Math.round(n)) && (n = new DOMPoint((m - g * a.top) / e, a.top), e = new DOMPoint((m - g * a.bottom) / e, a.bottom), a.containsPoint(n) || a.containsPoint(e)) && (c.distance(n) < c.distance(e) ? (b = e, d = n) : (b = n, d = e));
      if (this.X_Axis.start.x != b.x || this.X_Axis.start.y != b.y || this.X_Axis.end.x != d.x || this.X_Axis.end.y != d.y) {
        this.X_Axis.start = b, this.X_Axis.end = d, this.X_Axis.svg_group.innerHTML = "", a = document.createDocumentFragment(), c = document.createElementNS(f, "line"), c.setAttributeNS(null, "x1", b.x), c.setAttributeNS(null, "y1", b.y), c.setAttributeNS(null, "x2", d.x), c.setAttributeNS(null, "y2", d.y), a.appendChild(c), c = document.createElementNS(f, "path"), c.setAttributeNS(null, "d", "M 10,6 L 0,0 L 10,-6"), c.setAttributeNS(null, "transform", "translate(" + CTAT.Geom.Point.to2DString(b) + 
        ") rotate(" + this.Orientation + ")"), a.appendChild(c), b = document.createElementNS(f, "path"), b.setAttributeNS(null, "d", "M -10,6 L 0,0 L -10,-6"), b.setAttributeNS(null, "transform", "translate(" + CTAT.Geom.Point.to2DString(d) + ") rotate(" + this.Orientation + ")"), a.appendChild(b), this.X_Axis.svg_group.appendChild(a);
      }
      this._tickmarks = [];
      b = document.createDocumentFragment();
      b.appendChild(h.generate());
      b.appendChild(k.generate());
      b.appendChild(l.generate());
      this._tick_mark_group.innerHTML = "";
      this._tick_mark_group.appendChild(b);
      $(this._point_group).find("circle").each(function() {
      });
      b = this._point_group.children;
      for (d = 0;d < b.length;d++) {
        a = b[d], c = this.X_Axis.getPosition(a.value), e = new DOMPoint(a.cx.baseVal.value, a.cy.baseVal.value), 1 < c.distance(e) && (a.cx.baseVal.value = c.x, a.cy.baseVal.value = c.y);
      }
    }
  }.bind(this), t = 0, v = null, w = new DOMPoint(-30, -30), x = !1, C = function(a) {
    w.x = a.clientX;
    w.y = a.clientY;
  }, D = function(a) {
    cancelAnimationFrame(t);
    v.style.visibility = "hidden";
    x = !1;
  }, y = function(a) {
    if (!0 === this.getEnabled()) {
      this.setHintHighlight(!1);
      var b;
      p ? (a = B(a.clientX, a.clientY), b = a.location, a = a.data) : (a = A(a.clientX, a.clientY), b = this.X_Axis.getProjectedPoint(a), a = this.X_Axis.getAxisValue(a));
      var d = document.createElementNS(f, "circle");
      d.classList.add("CTAT-number-line--point");
      d.setAttributeNS(null, "cx", b.x);
      d.setAttributeNS(null, "cy", b.y);
      d.setAttributeNS(null, "r", n);
      d.value = a;
      if (this._point_group.children.length >= this.Max_Points) {
        b = [].slice.call(this._point_group.children);
        var c = b.filter(function(a, b, d) {
          return a.status == CTAT.Component.Base.Tutorable.Options.Status.INCORRECT;
        });
        0 < c.length ? this._point_group.removeChild(c[0]) : (b = b.filter(function(a, b, d) {
          return a.status != CTAT.Component.Base.Tutorable.Options.Status.CORRECT;
        }), 0 < b.length && this._point_group.removeChild(b[0]));
      }
      this._point_group.appendChild(d);
      this.setActionInput("AddPoint", a.toString());
      this.processAction();
    }
  }.bind(this);
  this.init = function() {
    this.initSVG();
    this.component.classList.add("CTAT-number-line");
    this._axis_line_group = document.createElementNS(f, "g");
    this._axis_line_group.classList.add("CTAT-number-line--axis");
    this._tick_mark_group = document.createElementNS(f, "g");
    this._tick_mark_group.classList.add("CTAT-number-line--tickmark");
    this._point_group = document.createElementNS(f, "g");
    v = document.createElementNS(f, "circle");
    v.setAttributeNS(null, "r", n);
    v.classList.add("CTAT-number-line--cursor");
    v.setAttributeNS(null, "transform", "translate(-30,-30)");
    this.component.appendChild(this._axis_line_group);
    this.component.appendChild(this._tick_mark_group);
    this.component.appendChild(this._point_group);
    this.component.appendChild(v);
    this.X_Axis.svg_group = this._axis_line_group;
    u();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("mousemove", C);
    this.component.addEventListener("mouseleave", D);
    var a = this.getEnabled;
    this.component.addEventListener("mouseenter", function() {
      !0 === a() && (x = !0, v.style.visibility = null, t = requestAnimationFrame(q));
    });
    this.addSafeEventListener("click", y);
    this.component.addEventListener("focus", this.processFocus);
  };
  var A = function(a, b) {
    this.svgPoint = this.svgPoint ? this.svgPoint : this.component.createSVGPoint();
    this.svgPoint.x = a;
    this.svgPoint.y = b;
    var d = this._axis_line_group.getScreenCTM().inverse();
    this.svgPoint = this.svgPoint.matrixTransform(d);
    var c = this.component.createSVGPoint();
    c.y = $(this.component).offset().top;
    c.x = $(this.component).offset().left;
    var c = c.matrixTransform(d), f = $(this.component), d = c.x + parseInt(f.css("borderLeftWidth")) + parseInt(f.css("paddingLeft")) + parseInt(f.css("marginLeft")), c = c.y + parseInt(f.css("borderTopWidth")) + parseInt(f.css("paddingTop")) + parseInt(f.css("marginTop"));
    return new DOMPoint(this.svgPoint.x - d, this.svgPoint.y - c);
  }.bind(this), r = function(a, b) {
    return this.getProjectedPoint(A(a, b));
  }.bind(this.X_Axis), B = function(a, b) {
    for (var d = r(a, b), c = null, f = Number.POSITIVE_INFINITY, e, g, l = 0;l < this._tickmarks.length;l++) {
      e = this._tickmarks[l], g = d.distance(e.location), g < f && (c = e, f = g);
    }
    return c;
  }, q = function() {
    if (x && !0 === this.getEnabled()) {
      if (p) {
        var a = B(w.x, w.y);
        v.setAttributeNS(null, "transform", "translate" + CTAT.Geom.Point.to2DString(a.location, !0));
      } else {
        v.setAttributeNS(null, "transform", "translate" + CTAT.Geom.Point.to2DString(r(w.x, w.y), !0));
      }
      t = requestAnimationFrame(q);
    }
  }.bind(this);
  this.render = function() {
    u();
  };
  this.calcXCoordinate = function(a) {
    a = new d(a);
    var b = this.getWidth() - 30, b = Math.abs(b - 30), c = max.subtract(min);
    return 30 + a.subtract(min).divide(c) / b;
  };
  this.calcNum = function(a) {
    var b = this.getWidth() - 30, b = Math.abs(b - 30);
    a = max.subtract(min).multiply((a - 30) / b);
    return min.add(a);
  };
  this.showCorrect = function(a) {
    a.getInput();
    a = a.getAction();
    switch(a) {
      case "AddPoint":
        if (0 < this._point_group.children.length) {
          var b = [].slice.call(this._point_group.children), b = b[b.length - 1];
          b.classList.remove("CTAT--incorrect");
          b.classList.remove("CTAT--hint");
          b.classList.add("CTAT--correct");
        }
        break;
      case "Points":
        for (var d in this._point_group.children) {
          b.classList.remove("CTAT--incorrect"), b.classList.remove("CTAT--hint"), b.classList.add("CTAT--correct");
        }
        break;
      default:
        console.log("Unhandled Action in", this.getName(), a);
    }
  };
  this.showInCorrect = function(a) {
    a.getInput();
    a = a.getAction();
    switch(a) {
      case "AddPoint":
        if (0 < this._point_group.children.length) {
          var b = [].slice.call(this._point_group.children), b = b[b.length - 1];
          b.classList.remove("CTAT--correct");
          b.classList.remove("CTAT--hint");
          b.classList.add("CTAT--incorrect");
        }
        break;
      case "Points":
        for (var d in this._point_group.children) {
          b.classList.remove("CTAT--correct"), b.classList.remove("CTAT--hint"), b.classList.add("CTAT--incorrect");
        }
        break;
      default:
        console.log("Unhandled Action in", this.getName(), a);
    }
  };
  this.set_minimum = function(a) {
    this.Minimum = a;
    this.render();
  };
  this.set_maximum = function(a) {
    this.Maximum = a;
    this.render();
  };
  this.set_max_user_entries = function(a) {
    this.setMaxPoints(parseInt(a));
  };
  this.set_large_step = function(a) {
    h.setStep(a);
    this.render();
  };
  this.set_small_step = function(a) {
    k.setStep(a);
    this.render();
  };
  this.set_precision = function(a) {
    this.setPrecision(parseInt(a));
    this.render();
  };
  this.AddPoint = function(a) {
  };
  this.Points = function(a) {
    a = a.split(";");
    for (var b in a) {
    }
  };
  this.set_denominator = function(a) {
  };
  this.setMaxControllers = function(a) {
  };
  this.setParameterHandler("MaxValueControllers", this.setMaxControllers);
  this.setMinControllers = function(a) {
  };
  this.setParameterHandler("MinValueControllers", this.setMinControllers);
  this.setLargeTickControllers = function(a) {
  };
  this.setParameterHandler("LargeTickmarkControllers", this.setLargeTickControllers);
  this.setSmallTickControllers = function(a) {
  };
  this.setParameterHandler("SmallTickmarkControllers", this.setSmallTickControllers);
  this.setDenominatorControllers = function(a) {
  };
  this.setParameterHandler("DenominatorTickmarkControllers", this.setDenominatorControllers);
};
CTATNumberLine.prototype = Object.create(CTAT.Component.Base.SVG.prototype);
CTATNumberLine.prototype.constructor = CTATNumberLine;
CTAT.ComponentRegistry.addComponentType("CTATNumberLine", CTATNumberLine);
var CTATNumericStepper = function(a, b, c, e, g) {
  CTAT.Component.Base.Tutorable.call(this, "CTATNumericStepper", "__undefined__", a, b, c, e, g);
  this.setAction("Update");
  var d = document.createElement("input");
  d.type = "number";
  this.setParameterHandler("maximum", function(a) {
    a = Number(a);
    isNaN(a) || (d.max = a);
  });
  this.setParameterHandler("minimum", function(a) {
    a = Number(a);
    isNaN(a) || (d.min = a);
  });
  this.setParameterHandler("stepSize", function(a) {
    a = Number(a);
    isNaN(a) || (d.step = a);
  });
  this.update_value = function(a) {
    a = Number(a);
    isNaN(a) || (d.value = a, this.setInput(a));
  };
  this.setParameterHandler("value", this.update_value);
  this.updateSAI = function() {
    this.setInput(d.value);
  };
  this.Update = this.update_value;
  this.handle_change = function(a) {
    this.updateSAI();
    this.processAction();
  }.bind(this);
  this.init = function() {
    d.id = this.getName() + "_spinner";
    d.addEventListener("change", this.handle_change);
    d.classList.add("CTAT-numeric-stepper");
    this.setComponent(d);
    this.setInitialized(!0);
    this.getDivWrap().appendChild(d);
    this.component.addEventListener("focus", this.processFocus);
  };
};
CTATNumericStepper.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATNumericStepper.prototype.constructor = CTATNumericStepper;
CTAT.ComponentRegistry.addComponentType("CTATNumericStepper", CTATNumericStepper);
var CTATPieChart = function(a, b, c, e, g) {
  CTAT.Component.Base.UnitDisplay.call(this, "CTATPieChart", "aPieChart", a, b, c, e, g);
  var d = 3, f = 3, h = this, k, l, m, n = null, p = CTATGlobals.NameSpace.svg;
  this.init = function() {
    this.initSVG();
    this.baseGroup = document.createElementNS(p, "g");
    this.getComponent().appendChild(this.baseGroup);
    this.getComponent().classList.add("CTAT-pie-chart");
    k = document.createElementNS(p, "filter");
    k.id = this.genName("Shadow");
    l = "#" + k.id;
    m = "url(" + l + ")";
    k.setAttributeNS(null, "width", "200%");
    k.setAttributeNS(null, "height", "200%");
    n = document.createElementNS(p, "feOffset");
    n.setAttributeNS(null, "in", "SourceAlpha");
    n.setAttributeNS(null, "result", "offOut");
    n.setAttributeNS(null, "dx", f);
    n.setAttributeNS(null, "dy", f);
    k.appendChild(n);
    var a = document.createElementNS(p, "feGaussianBlur");
    a.setAttributeNS(null, "in", "offOut");
    a.setAttributeNS(null, "result", "blurOut");
    a.setAttributeNS(null, "stdDeviation", 4);
    k.appendChild(a);
    a = document.createElementNS(p, "feBlend");
    a.setAttributeNS(null, "in", "SourceGraphic");
    a.setAttributeNS(null, "in2", "blurOut");
    a.setAttributeNS(null, "mode", "normal");
    k.appendChild(a);
    this.getComponent().getElementsByTagName("defs")[0].appendChild(k);
    0 < f && this.baseGroup.setAttributeNS(null, "filter", m);
    this.drawPieces();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("focus", this.processFocus);
  };
  this.drawPieces = function() {
    if (this.baseGroup) {
      var a = window.getComputedStyle(this.getComponent()), a = parseFloat(a.getPropertyValue("stroke-width")), b = this.getBoundingBox(), c = Math.min(b.width / 2, b.height / 2) - (a + f + 4), e = new DOMPoint(b.width / 2, b.height / 2), a = this.parseValue(), g = document.createDocumentFragment();
      a.reduce(function(a, b, f, l) {
        if (1 <= b.valueOf()) {
          f = document.createElementNS(p, "circle"), f.classList.add("CTAT-pie-chart--piece"), f.cx.baseVal.value = e.x, f.cy.baseVal.value = e.y, f.r.baseVal.value = c, this.addPieceElem(f, b, b.selected), g.appendChild(f);
        } else {
          f = document.createElementNS(p, "path");
          f.classList.add("CTAT-pie-chart--piece");
          g.appendChild(f);
          window.getComputedStyle(f);
          var k = 2 * Math.PI * a.valueOf();
          l = e.add(CTAT.Geom.Point.polar(c, k));
          b.reduce();
          var m = e.add(CTAT.Geom.Point.polar(c, 2 * Math.PI * b.valueOf() + k)), t = e.clone();
          if (0 < d && d < c) {
            k = CTAT.Geom.Point.polar(d, k + Math.PI * b.valueOf());
            t = t.add(k);
            l = l.add(k);
            var n = function(a, b, d) {
              return a.distance(b) < a.distance(d) ? b : d;
            };
            l = CTAT.Geom.Point.circle_intersection(t, l, e, c).reduce(n.bind(this, l));
            m = m.add(k);
            m = CTAT.Geom.Point.circle_intersection(t, m, e, c).reduce(n.bind(this, m));
          }
          k = CTAT.Geom.Point.to2DString;
          t = "M " + k(t);
          n = new DOMPoint(c, c);
          t += " L " + k(l);
          t += " A " + k(n) + " 0 " + (.5 < b.valueOf() ? 1 : 0) + ",1 " + k(m);
          f.setAttributeNS(null, "d", t + " Z");
          h.addPieceElem(f, b, b.selected);
        }
        return a.add(b);
      }, new CTAT.Math.Fraction);
      this.baseGroup.innerHTML = "";
      this.baseGroup.appendChild(g);
    }
  };
  this.getExplode = function() {
    return d;
  };
  this.getDropShadowDistance = function() {
    return f;
  };
  this.setExplode = function(a) {
    a = Number(a);
    if (!isNaN(a)) {
      var b = a !== d;
      d = a;
      b && this.drawPieces();
    }
    return this;
  };
  this.setStyleHandler("explode", this.setExplode);
  this.data_ctat_handlers.explode = function(a) {
    this.setExplode(a);
  };
  this.setDropShadowDistance = function(a) {
    f = parseInt(a);
    f = isNaN(f) ? 0 : f;
    n && (n.setAttributeNS(null, "dx", f), n.setAttributeNS(null, "dy", f), 0 >= f && this.baseGroup ? this.baseGroup.removeAttributeNS(null, "filter") : this.baseGroup.hasAttributeNS(null, "filter") || this.baseGroup.setAttributeNS(null, "filter", m));
  };
  this.data_ctat_handlers["shadow-distance"] = function(a) {
    this.setDropShadowDistance(a);
  };
};
CTATPieChart.prototype = Object.create(CTAT.Component.Base.UnitDisplay.prototype);
CTATPieChart.prototype.constructor = CTATPieChart;
CTAT.ComponentRegistry.addComponentType("CTATPieChart", CTATPieChart);
var CTATSubmitButton = function(a, b, c, e, g) {
  CTATButton.call(this, a, b, c, e, g);
  this.setClassName("CTATSubmitButton");
  var d = this, f = {};
  this.setParameterHandler("target_components", function(a) {
    a = String(a).split(/\s*;\s*/);
    f = {};
    a.forEach(function(a) {
      f[a] = 1;
    });
    return this;
  });
  this.data_ctat_handlers.target = function(a) {
    f = {};
    String(a).split(/\s*[;,]\s*/).forEach(function(a) {
      f[a] = 1;
    });
  };
  var h = this.init;
  this.init = function() {
    h();
    this.setParameter("tutorComponent", CTAT.Component.Base.Tutorable.Options.DO_NOT_TUTOR);
    this.component.addEventListener("focus", this.processFocus);
  };
  var k = function(a) {
    return 0 === Object.keys(f).length ? !1 : a === d ? !1 : a instanceof CTAT.Component.Base.Tutorable ? f.hasOwnProperty(a.getName()) || f.hasOwnProperty(a.getComponentGroup()) : a instanceof CTATSAI ? a.getSelection() != d.getName() && f.hasOwnProperty(a.getSelection()) : a instanceof String ? a != d.getName() && f.hasOwnProperty(a) : a instanceof Element ? a != d.getComponent() && (f.hasOwnProperty(a.id) || f.hasOwnProperty(a.getAttribute("name"))) : !1;
  };
  a = CTAT.Component.Base.Tutorable.EventType;
  document.addEventListener(a.correct, function(a) {
    a.detail.sai && k(a.detail.component) && d.isNotGraded() && d.setCorrect();
  }, !1);
  document.addEventListener(a.incorrect, function(a) {
    a.detail.sai && k(a.detail.component) && (d.setIncorrect(), d.setEnabled(!0));
  }, !1);
  document.addEventListener(a.ungrade, function(a) {
    (a = a.detail.component) && k(a) && d.setNotGraded();
  }, !1);
  document.addEventListener(a.highlight, function(a) {
    var b = a.detail.component;
    b && k(b) && d.setHintHighlight(a.detail.isHighlighted);
  }, !1);
  this.processClick = function(a) {
    if (!0 === d.getEnabled()) {
      for (var b in f) {
        a = CTATShellTools.findComponent(b), null !== a && 0 < a.length && (a = a[0], a instanceof CTAT.Component.Base.Tutorable ? a.getEnabled() && a.grade(this) : this.ctatdebug("Invalid target component: " + a));
      }
    }
  };
};
CTATSubmitButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATSubmitButton.prototype.constructor = CTATSubmitButton;
CTAT.ComponentRegistry.addComponentType("CTATSubmitButton", CTATSubmitButton);
var CTATTextArea = function(a, b, c, e, g) {
  CTATTextBasedComponent.call(this, "CTATTextArea", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(44);
  var d = this, f = null, h = null;
  this.setAction("UpdateTextArea");
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.init = function() {
    f = document.createElement("textarea");
    a && (f.name = a.name);
    f.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    f.classList.add("CTAT-text");
    f.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    d.setComponent(f);
    this.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    f.value = this.getText();
    d.setInitialized(!0);
    d.addComponentReference(d, f);
    d.getDivWrap().appendChild(f);
    $(f).keypress(d.processKeypress);
    f.addEventListener("focus", d.processFocus);
    $(f).on("input", function(a) {
      d.setNotGraded();
    });
  };
  this.processBlur = function(a) {
    d.processAction();
  };
  this.setCellContainer = function(a) {
    h = a;
  };
  this.getCellContainer = function() {
    return h;
  };
  this.setText = function(a) {
    d.ctatdebug("setText (" + a + ")");
    console.log(this.getName(), "setText", a);
    d.assignText(a);
    f.value = a;
  };
  this.reset = function() {
    d.configFromDescription();
    d.processSerialization();
    f.value = "";
  };
  this.setStyleHandler("DrawBorder", function(a) {
    d.setShowBorder(a);
    d.addCSSAttribute("border-width", d.getShowBorder() ? 1 : 0);
  });
  this.setStyleHandler("inspBackgroundColor", this.setBackgroundColor);
  this.setStyleHandler("showBorder", this.setShowBorder);
};
CTATTextArea.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextArea.prototype.constructor = CTATTextArea;
CTAT.ComponentRegistry.addComponentType("CTATTextArea", CTATTextArea);
var CTATTextField = function(a, b, c, e, g) {
  CTATTextBasedComponent.call(this, "CTATTextBasedComponent", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var d = this, f = null;
  this.setAction("UpdateTextArea");
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    f = document.createElement("div");
    f.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    f.classList.add("CTAT-text");
    f.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    d.setComponent(f);
    f.innerHTML = d.getText();
    d.setInitialized(!0);
    d.addComponentReference(d, f);
    d.getDivWrap().appendChild(f);
    d.render();
    d.addSafeEventListener("focus", d.processFocus, f);
  };
  this.setText = function(a) {
    d.ctatdebug("setText (" + a + ")");
    d.assignText(a);
    null !== f && (f.innerHTML = a);
  };
  this.setStyleHandler("ShowScrollbars", function(a) {
    !0 === CTATGlobalFunctions.toBoolean(a) ? d.modifyCSSAttribute("overflow", "scroll") : d.modifyCSSAttribute("overflow", "hidden");
  });
};
CTATTextField.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextField.prototype.constructor = CTATTextField;
CTAT.ComponentRegistry.addComponentType("CTATTextField", CTATTextField);
var CTATTextInput = function(a, b, c, e, g) {
  CTATTextBasedComponent.call(this, "CTATTextInput", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var d = this, f = null, h = null;
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.configFromDescription();
  this.init = function() {
    this.ctatdebug("init (" + d.getName() + ")");
    f = document.createElement("input");
    f.type = "text";
    a && (f.name = a.name);
    f.setAttribute("maxlength", d.getMaxCharacters());
    f.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    f.classList.add("CTAT-text");
    d.setComponent(f);
    this.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    f.value = this.getText();
    d.setInitialized(!0);
    d.addComponentReference(d, f);
    d.getDivWrap().appendChild(f);
    d.render();
    d.addSafeEventListener("keypress", d.processKeypress, f);
    d.addSafeEventListener("focus", d.processFocus, f);
    $(f).on("input", function(a) {
      d.setNotGraded();
    });
  };
  this.setCellContainer = function(a) {
    h = a;
  };
  this.getCellContainer = function() {
    return h;
  };
  this.setText = function(a) {
    d.ctatdebug("setText (" + a + ")");
    console.trace(this.getName(), "setText", a);
    d.assignText(a);
    f.value = a;
  };
  this.reset = function() {
    d.configFromDescription();
    d.processSerialization();
    f.value = "";
  };
  this.setStyleHandler("DrawBorder", function(a) {
    d.setShowBorder(a);
    d.addCSSAttribute("border-width", d.getShowBorder() ? 1 : 0);
  });
};
CTATTextInput.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextInput.prototype.constructor = CTATTextInput;
CTAT.ComponentRegistry.addComponentType("CTATTextInput", CTATTextInput);
var CTATVideo = function(a, b, c, e, g) {
  CTAT.Component.Base.Tutorable.call(this, "CTATVideo", "__undefined__", a, b, c, e, g);
  var d = 0, f = this, h = null;
  this.getAlpha = function() {
    return d;
  };
  this.setAlpha = function(a) {
    d = a;
  };
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.configFromDescription();
  this.init = function() {
    f.ctatdebug("init (" + f.getName() + ")");
    f.addCSSAttribute("z-index", CTATGlobalFunctions.gensym.z_index());
    h = document.createElement("video");
    h.src = "http://augustus.pslc.cs.cmu.edu/ProportionalDistanceExercise.mp4";
    h.controls = !0;
    h.autocontrols = !1;
    h.autoplay = !0;
    h.name = f.getName();
    h.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    h.setAttribute("onkeypress", "return noenter(event)");
    f.addComponentReference(f, h);
    f.ctatdebug("Final location: " + f.getX() + "," + f.getY() + " with text: " + f.getText());
    f.setInitialized(!0);
    f.getDivWrap().appendChild(h);
    h.addEventListener("focus", this.processFocus);
  };
  this.PlayMedia = function(a) {
    h.src = a;
  };
  this.showControls = function(a) {
    h.controls = a;
  };
  this.play = function(a) {
    var b = "0";
    a && (b = "number" === typeof a ? String(a) : "string" === typeof a ? a : "0");
    h.currentTime = b;
    h.play();
  };
  this.stop = this.pause = function(a) {
    h.pause();
    var b = "0";
    a && (b = "number" === typeof a ? String(a) : "string" === typeof a ? a : "0");
    h.currentTime = b;
  };
};
CTATVideo.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATVideo.prototype.constructor = CTATVideo;
CTAT.ComponentRegistry.addComponentType("CTATVideo", CTATVideo);
var CTATDefaultLangagePack = {HORIZONTAL:"LR", VERTICAL:"TB", LOADING:"Please wait while the tutor is being loaded", NEXTPROBLEM:"Retrieving the Next Problem...", TUTORDISCONNECTED:"The tutor has disconnected. Please refresh the page.", OUTOFORDER:"You need to do other steps first, before doing the step you just worked on. You might request a hint for more help.", DONE:"Done", HINT:"Hint", NEXT:"Next", PREVIOUS:"Previous"}, CTATLanguageManager = function(a, b, c) {
  CTATBase.call(this, "CTATLanguageManager", a);
  this.getString = function(a) {
    return "undefined" !== typeof CTATLanguagePack && CTATLanguagePack[a] ? CTATLanguagePack[a] : CTATDefaultLangagePack[a];
  };
};
CTATLanguageManager.prototype = Object.create(CTATBase.prototype);
CTATLanguageManager.prototype.constructor = CTATLanguageManager;
var CTATScrim = function() {
  function a() {
    f = !1;
    r.scrimDown();
  }
  function b(a) {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), r.ctatdebug("errScrimUp (" + a + ")"), 1 == g ? 1 == u && (u = !1, getSafeElementById(ctatcontainer).removeChild(y)) : 1 == f && (u = !0), r.scrimUp(a));
  }
  function c(a, b) {
    r.ctatdebug("makeHTMLButton ()");
    var d = document.createElement("input");
    d.type = "button";
    d.value = b;
    null != a ? (r.ctatdebug("clickHandle!=null"), d.onclick = a) : (r.ctatdebug("clickHandle==null"), d.onclick = r.defaultClickHandler);
    d.id = b;
    d.setAttribute("class", "scrimButton");
    return d;
  }
  CTATBase.call(this, "CTATScrim", "__undefined__");
  var e = !1, g = !1, d = !0, f = !1, h = !1, k = !0, l = !0, m = "", n = !1, p = !1, u = !1, t = null, v = null, w = new CTATCanvasComponent("CTAT Scrim"), x = [], C = null, D = null, y = null, A = null, r = this;
  this.scrimUp = function(b) {
    if ("google" != CTATConfig.platform) {
      if (r.ctatdebug("scrimUp ()"), r.ctatdebug("Message: " + b), 1 == e ? (m = 1 == d ? b : m + (" \n " + b), w.removeComponent()) : (m = b, e = !0), r.ctatdebug("drawScrim ()"), "google" == CTATConfig.platform) {
        r.ctatdebug("This is not available for now when we're in this environment");
      } else {
        if ($('<div id="scrim" class="ctatpageoverlay"></div>').appendTo("body"), $("#scrim").css("z-index", 1E3), "google" != CTATConfig.platform && ($("#scrim").append('<div class="css3-windows-7"><div class="fenster"><h4 class="titel">CTAT Info Panel</h4><div id="scrimpanel" class="inhalt"><br>' + m + "<br><br></div></div></div>"), !0 === u && (y = c(a, "close"), $(y).appendTo("#scrimpanel")), !0 === n && (C = c(t, "yes"), $(C).appendTo("#scrimpanel")), !0 === p && (D = c(v, "no"), $(D).appendTo("#scrimpanel")), 
        1 == d)) {
          r.ctatdebug("Adding spinner ...");
          $("#scrimpanel").append("<br>");
          b = $('<div id="scrim_spin">');
          b.css("width", "100%");
          b.css("position", "relative");
          $("#scrimpanel").append(b);
          try {
            var f = (new Spinner({className:"scrim_spinner"})).spin();
            $("#scrim_spin").append(f.el);
          } catch (g) {
            (g instanceof ReferenceError || g instanceof TypeError) && r.ctatdebug('Spinner is not available, please include it in the build or add <script src="node_modules/spin.js/spin.min.js">\x3c/script> to the html file.', g, typeof g);
          }
        }
      }
    }
  };
  this.waitScrimUp = function() {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), r.ctatdebug("waitScrimUp ()"), d = !0, r.scrimUp(CTATGlobals.languageManager.getString("LOADING")));
  };
  this.nextProblemScrimUp = function() {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), r.ctatdebug("nextProblemScrimUp ()"), r.scrimUp(CTATGlobals.languageManager.getString("NEXTPROBLEM")));
  };
  this.OKScrimUp = function(a, b) {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), r.ctatdebug("OKScrimUp (" + a + "," + b + ")"), r.scrimUp(a), A = c(b, spaceUsedUp, "OK"), $(A).appendTo("#scrimpanel"));
  };
  this.confirmScrimUp = function(a, b, d) {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), r.ctatdebug("confirmScrimUp (" + a + "," + b + "," + d + ")"), p = n = !0, v = d, t = b, r.scrimUp(a));
  };
  this.errorScrimUp = function(a) {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), 0 == k ? (r.ctatdebug("we don't know if we're in authorTime or not yet so we're just going to hold onto the messasge"), x.push("ERROR: " + a), g = !0) : 0 == l ? r.ctatdebug("We're not in authorTime, student's don't need to see our design mistakes") : (g = !0, b("ERROR: " + a)));
  };
  this.warningScrimUp = function(a) {
    "google" != CTATConfig.platform && (1 == e && r.scrimDownForced(), 0 == k ? (r.ctatdebug("we don't know if we're in authorTime or not yet so we're just going to hold onto the messasge"), x.push("WARNING: " + a), f = !0) : 0 == l ? r.ctatdebug("We're not in authorTime, student's don't need to see our design mistakes") : (f = !0, b("WARNING: " + a)));
  };
  this.handleTSDisconnect = function() {
    h = !0;
    r.scrimUp(CTATGlobals.languageManager.getString("TUTORDISCONNECTED"));
  };
  this.scrimDown = function() {
    "google" != CTATConfig.platform && (0 == e ? r.ctatdebug("The scrim isn't up, returning") : 1 == g ? r.ctatdebug("The scrim is up to describe errors to the user, leave it up!") : 1 == f ? r.ctatdebug("The scrim is up to display warnings to the user, leave it up!") : 1 == h ? r.ctatdebug("The scrim is up for a connection issue leave it up!") : r.scrimDownForced());
  };
  this.scrimDownForced = function() {
    $("#scrim").remove();
    w.removeComponent();
    d = e = !1;
    m = "";
  };
  this.defaultClickHandler = function() {
    r.ctatdebug("defaultClickHandler ()");
    r.scrimDown();
  };
  this.setInAuthorTime = function(a) {
    r.ctatdebug("setting inAuthorTime = " + a);
    k = !0;
    l = a;
    if (!a) {
      f = g = !1, u && null.removeChild(y);
    } else {
      if (g || f) {
        for (var d in x) {
          b(d);
        }
      }
    }
  };
  this.getInAuthorTime = function() {
    return l;
  };
};
CTATScrim.prototype = Object.create(CTATBase.prototype);
CTATScrim.prototype.constructor = CTATScrim;
$(document).ready(function() {
  ctatdebug("$ready ()");
  CTATGlobals.languageManager = new CTATLanguageManager;
  CTATScrim.scrim = new CTATScrim;
  0 == noScrim && CTATScrim.scrim.waitScrimUp();
});
var bundleFormatter = "", inBundle = !1, useBundling = !1, useOLIEncoding = !1, CTATCommLibrary = function(a, b, c) {
  CTATBase.call(this, "CTATCommLibrary", a);
  var e = authenticityToken = "", g = 0, d = [], f = a ? a : null, h = null == b ? !0 : b, k = !0, l = null, m = c ? c : {}, n = this, p = "http";
  this.setUseCommSettings = function(a) {
    k = a;
  };
  this.getUseCommSettings = function() {
    return k;
  };
  this.setSocketType = function(a) {
    p = a;
  };
  this.getSocketType = function() {
    return p;
  };
  this.assignHandler = function(a) {
    f = a;
  };
  this.assignMessageListener = function(a) {
    l = a;
  };
  this.encodeVariables = function(a) {
    n.ctatdebug("encodeVariables ()");
    for (var b = "", d = 0;d < a.length;d++) {
      var c = a[d];
      0 < d && (b += "&");
      b += c.name;
      b += "=";
      b += encodeURIComponent(c.value);
    }
    return b;
  };
  this.encodeVariablesOLI = function(a) {
    n.ctatdebug("encodeVariablesOLI ()");
    for (var b = "", d = 0;d < a.length;d++) {
      var c = a[d];
      0 < d && (b += "&");
      b += c.name;
      b += "=";
      b += encodeURIComponent(c.value);
    }
    return b;
  };
  this.createConnection = function(a, b) {
    n.ctatdebug("createConnection ()");
    if (!b) {
      return new CTATConnection(a);
    }
    flashVars.getRawFlashVars();
    var c = null;
    if ("websocket" == n.getSocketType()) {
      for (c = c = 0;c < d.length;c++) {
        var f = requests[c];
        if ("ws" == f.getSocketType() && f.getURL() == b) {
          return f;
        }
      }
      c = new CTATWSConnection(a);
      c.setID(g);
      c.setURL(b);
      c.assignReceiveFunction(this.processReply);
      d.push(c);
      g++;
      return c;
    }
    c = new CTATConnection(a);
    c.setID(g);
    c.setURL(b);
    c.assignReceiveFunction(this.processReply);
    d.push(c);
    g++;
    return c;
  };
  this.startBundle = function() {
    n.ctatdebug("startBundle ()");
    0 == useBundling ? this.ctatdebug("Not using bundling, bump") : (bundleFormatter = '<?xml version="1.0" encoding="UTF-8"?><message><verb/><properties><MessageType>MessageBundle</MessageType><messages>', inBundle = !0);
  };
  this.endBundle = function() {
    n.ctatdebug("endBundle ()");
    0 == useBundling ? n.ctatdebug("Not using bundling, bump") : (inBundle = !1, bundleFormatter += "</messages></properties></message>", n.sendXML(bundleFormatter));
  };
  this.setFixedURL = function(a) {
    e = a;
  };
  this.getURL = function() {
    n.ctatdebug("getURL ()");
    if ("" != e) {
      return n.ctatdebug("Returning fixedURL: " + e), e;
    }
    var a = flashVars.getRawFlashVars(), b = "http://";
    "https" == n.getSocketType() && (b = "https://");
    b = b + a.remoteSocketURL + ":" + a.remoteSocketPort;
    -1 != a.remoteSocketURL.indexOf("http") && (b = a.remoteSocketURL + ":" + a.remoteSocketPort);
    return b;
  };
  this.sendXML = function(a) {
    n.ctatdebug("Sending: " + a);
    n.ctatdebug("sendXML (" + a + ")");
    if (1 == useBundling && 1 == inBundle) {
      n.ctatdebug("Bundling ..."), bundleFormatter += a;
    } else {
      bundleFormatter = a;
      flashVars.getRawFlashVars();
      a = this.getURL();
      var b = bundleFormatter;
      -1 == bundleFormatter.indexOf("<?xml") && (b = '<?xml version="1.0" encoding="UTF-8"?>' + bundleFormatter);
      1 == this.getUseCommSettings() ? "javascript" == n.getSocketType() ? CTAT.ToolTutor.sendToTutor(b) : this.send_post(a, b) : this.send_post(a, b);
    }
  };
  this.sendXMLNoBundle = function(a) {
    n.ctatdebug("sendXMLNoBundle (" + a + ")");
    bundleFormatter = a;
    var b = this.getURL(), d = a;
    -1 == a.indexOf("<?xml") && (d = '<?xml version="1.0" encoding="UTF-8"?>' + a);
    flashVars.getRawFlashVars();
    1 == this.getUseCommSettings() ? "javascript" == n.getSocketType() ? CTAT.ToolTutor.sendToTutor(d) : this.send_post(b, d) : this.send_post(b, d);
  };
  this.sendXMLURL = function(a, b) {
    n.ctatdebug("sendXMLURL (" + b + ")");
    var d = a;
    -1 == a.indexOf("<?xml") && (d = '<?xml version="1.0" encoding="UTF-8"?>' + a);
    flashVars.getRawFlashVars();
    n.ctatdebug("Sending: " + d);
    1 == this.getUseCommSettings() ? "javascript" == n.getSocketType() ? CTAT.ToolTutor.sendToTutor(d) : this.send_post(b, d) : this.send_post(b, d);
  };
  this.sendURLVariables = function(a, b) {
    this.ctatdebug("sendURLVariables (" + a + ")");
    this.send_post_variables(a, b);
  };
  this.send = function(a) {
    n.ctatdebug("send (" + a + ")");
    if (!0 === globalCommDisabled) {
      n.ctatdebug("Communications globally disabled, please check your settings");
    } else {
      var b = new CTATConnection(null);
      b.setID(g);
      g++;
      if (null === b.getHTTPObject()) {
        return alert("Cannot create XMLHTTP instance"), !1;
      }
      d.push(b);
      b.setURL(a);
      b.assignReceiveFunction(this.processReply);
      try {
        b.getHTTPObject().open("GET", a, !0);
      } catch (c) {
        this.ctatdebug("Error in newConnection.httpObject.open: " + c.message);
        return;
      }
      try {
        b.init();
      } catch (c) {
        this.ctatdebug("Error in newConnection.init: " + c.message);
        return;
      }
      try {
        b.getHTTPObject().send(null);
      } catch (c) {
        this.ctatdebug("Error in newConnection.httpObject.send: " + c.message);
      }
    }
  };
  this.send_post_variables = function(a, b) {
    n.ctatdebug("send_post_variables (" + a + ")");
    flashVars.getRawFlashVars();
    n.getSocketType();
    var c = "", c = 0 == useOLIEncoding ? this.encodeVariables(b) : this.encodeVariablesOLI(b);
    this.ctatdebug("Sending: " + c);
    if (!0 === globalCommDisabled) {
      n.ctatdebug("Communications globally disabled, please check your settings");
    } else {
      var f = n.createConnection(m, a);
      f.setContentType("application/x-www-form-urlencoded");
      g++;
      d.push(f);
      n.ctatdebug(c);
      null != l && l.processOutgoing(c);
      f.setURL(a);
      f.setData(c);
      f.assignReceiveFunction(this.processReply);
      f.send();
    }
  };
  this.send_post = function(a, b) {
    var d = null;
    n.ctatdebug("send_post (" + a + ")");
    !0 === globalCommDisabled ? n.ctatdebug("Communications globally disabled, please check your settings") : (n.ctatdebug("Outoing on wire: " + b), flashVars.getRawFlashVars(), d = a, "websocket" == n.getSocketType() ? (d = a.replace("http:", "ws:"), d = n.createConnection(m, d), d.setData(b), n.ctatdebug(b)) : (d = n.createConnection(m, d), d.setData(b)), null != l && l.processOutgoing(b), d.send());
  };
  this.processReply = function(a) {
    n.ctatdebug("processReply (" + d.length + "," + a + ")");
    var b = 0, c = !1;
    a = [];
    for (var e = 0, e = 0;e < d.length;e++) {
      var g = d[e], m = g.getHTTPObject();
      n.ctatdebug("Testing connection entry " + e + ", readyState: " + m.readyState + ", testConnection.consumed: " + g.getConsumed());
      4 == m.readyState && 0 == g.getConsumed() ? (n.ctatdebug("Investigating request response: " + b + " -> " + m.status + ", for: " + g.getURL()), c = !1, 0 === m.status && (c = !0, n.ctatdebug("Received message (status 0): " + m.responseText)), 408 == m.status && (c = !0, n.ctatdebug("Received message (status 408): " + m.responseText), h && CTATScrim.scrim.scrimDown()), 502 == m.status && (c = !0, n.ctatdebug("Received message (status 502): " + m.responseText), h && CTATScrim.scrim.errorScrimUp("Error contacting the server, please refresh the page and try again (HTTP status 502: gateway response).")), 
      200 == m.status ? (c = !0, n.ctatdebug("Processing 200 response ..."), null !== f ? (a.push(m.responseText), null != l && l.processIncoming(m.responseText)) : n.ctatdebug("Error: httphandler is null, can't process response!")) : f && f.processError && (c = !0, n.ctatdebug("Processing non-200 response, status " + m.status), f.processError(m.status, m.responseText)), !1 === c && n.ctatdebug("Error: status not handled for: " + m.status), n.ctatdebug("Marking connection as consumed ..."), g.setConsumed(!0)) : 
      (0 === m.readyState && n.ctatdebug("Received message (status 0, request not initialized)"), 1 === m.readyState && n.ctatdebug("Received message (status 1, server connection established)"), 2 === m.readyState && n.ctatdebug("Received message (status 2, request received)"), 3 === m.readyState && n.ctatdebug("Received message (status 3, processing request)"));
      b++;
    }
    n.cleanup();
    for (b = 0;b < a.length;b++) {
      c = a[b], -1 != c.indexOf("status=success") ? n.ctatdebug("Info: logging success message received, not propagating to message handler") : (n.ctatdebug("Processing incoming message: " + c), f.processMessage(c));
    }
  };
  this.cleanup = function() {
    n.ctatdebug("cleanup ()");
    for (var a = 0, b = !1, d = !1;!1 === d;) {
      b = this.checkEntries(), !1 === b ? d = !0 : a++;
    }
    n.ctatdebug("Removed " + a + " entries");
  };
  this.checkEntries = function() {
    n.ctatdebug("checkEntries (" + d.length + ")");
    for (var a = 0, b = 0, b = 0;b < d.length;b++) {
      var c = d[b];
      if (!0 === c.getConsumed()) {
        return n.ctatdebug("Removing : " + c.getID()), d.splice(a, 1), !0;
      }
      var f = c.getHTTPObject();
      n.ctatdebug("Check, readyState: " + f.readyState + ", consumed: " + c.getConsumed());
      a++;
    }
    return !1;
  };
  this.retrieveXMLFile = function(a, b, d) {
    n.ctatdebug("retrieveXMLFile (" + a + ")");
    var c = (new CTATConnection).getHTTPObject();
    c.onreadystatechange = function() {
      n.ctatdebug("onready... GET for xmlFile xmlhttp.readyState " + c.readyState + ", .status " + c.status + ", parser " + b);
      if (4 == c.readyState && 200 == c.status) {
        var f = null;
        c.responseXML ? (n.ctatdebug("parsing brd xml using something else"), f = c.responseXML.documentElement) : (n.ctatdebug("parsing brd xml using node"), f = (b = new CTATXML).parseXML(c.responseText));
        null == f ? (f = (new CTATTutorMessageBuilder).createErrorMessage("Error parsing xmlFile " + a), n.ctatdebug("error parsing xmlFile " + a + ": " + f), CTAT.ToolTutor.sendToInterface(f, !0)) : d.processXML(f);
      }
    };
    c.onerror = function() {
      var a = (new CTATTutorMessageBuilder).createErrorMessage("Load Problem Error", c.status + " " + c.statusText);
      n.ctatdebug("onerror GET for xmlFile " + a);
      CTAT.ToolTutor.sendToInterface(a, !0);
      d.processXML(null);
    };
    c.open("GET", a, !0);
    c.setRequestHeader("Content-type", "text/plain");
    c.send();
  };
  this.retrieveJSONFile = function(a, b) {
    n.ctatdebug("retrieveJSONFile (" + a + ")");
    var d = (new CTATConnection).getHTTPObject();
    d.onreadystatechange = function() {
      4 == d.readyState && 200 == d.status && (n.ctatdebug("Successfully retrieved file: " + a), b(JSON.parse(d.responseText)));
    };
    d.onerror = function() {
      n.ctatdebug("Error retrieving JSON file");
    };
    d.open("GET", a, !0);
    d.setRequestHeader("Content-type", "text/plain");
    d.send();
  };
  this.retrieveFile = function(a, b) {
    n.ctatdebug("retrieveFile (" + a + ")");
    var d = (new CTATConnection).getHTTPObject();
    d.onreadystatechange = function() {
      4 == d.readyState && 200 == d.status && (n.ctatdebug("Successfully retrieved file: " + a), b(d.responseText));
    };
    d.onerror = function() {
      n.ctatdebug("Error retrieving file");
    };
    d.open("GET", a, !0);
    d.setRequestHeader("Content-type", "text/plain");
    d.send();
  };
};
CTATCommLibrary.setAuthenticityToken = function(a) {
  Array.isArray(a) && (a = 0 < a.length ? a[0] : "");
  a && (CTATCommLibrary.authenticityToken = decodeURIComponent(a));
};
CTATCommLibrary.getAuthenticityToken = function(a) {
  return CTATCommLibrary.authenticityToken;
};
CTATCommLibrary.addAuthenticityToken = function(a) {
  return CTATCommLibrary.authenticityToken && ("" == a || 0 > a.search(/authenticity_token=/) && 0 <= a.search(/^[?]?[^?&=><]+=?[^&=]*(&[^?&=><]+=?[^&=]*)*$/)) ? "" + a + (a ? "&" : "") + "authenticity_token=" + encodeURIComponent(CTATCommLibrary.authenticityToken) : a;
};
CTATCommLibrary.prototype = Object.create(CTATBase.prototype);
CTATCommLibrary.prototype.constructor = CTATCommLibrary;
var loggingDisabled = !1, CTATLoggingLibrary = function(a) {
  CTATBase.call(this, "CTATLoggingLibrary", "logginglibrary");
  var b = this, c = !0, e = !1, g = !1, d = [], f = "undefined", h = "undefined", k = "undefined", l = "undefined", m = "undefined", n = "undefined", p = "undefined", u = "undefined", t = "UnassignedDataset", v = "UnassignedLevelName", w = "UnassignedLevelType", u = (new CTATGuid).guid();
  void 0 != a && null != a ? (e = a, 0 == e && (commLogMessageBuilder = new CTATLogMessageBuilder)) : commLogMessageBuilder = new CTATLogMessageBuilder;
  var x = new CTATCommLibrary;
  x.setName("commLoggingLibrary");
  x.setUseCommSettings(!1);
  x.assignHandler(this);
  this.generateSession = function() {
    var a = new CTATGuid;
    d.session_id = "ctat_session_" + a.guid();
    return d.session_id;
  };
  this.setLogClassName = function(a) {
    f = a;
  };
  this.setDatasetName = function(a) {
    t = a;
  };
  this.setDatasetLevelName = function(a) {
    v = a;
  };
  this.setDatasetLevelType = function(a) {
    w = a;
  };
  this.setSchool = function(a) {
    h = a;
  };
  this.setPeriod = function(a) {
    k = a;
  };
  this.setDescription = function(a) {
    l = a;
  };
  this.setInstructor = function(a) {
    m = a;
  };
  this.setProblemName = function(a) {
    n = a;
  };
  this.setProblemContext = function(a) {
    p = a;
  };
  this.setUserID = function(a) {
    u = a;
  };
  this.getLoggingCommLibrary = function() {
    return x;
  };
  this.setUseSessionLog = function(a) {
    c = a;
  };
  this.setLoggingURL = function(a) {
    b.getLoggingCommLibrary().setFixedURL(a);
  };
  this.setupExternalLibraryUsage = function() {
    b.ctatdebug("setupExternalLibraryUsage ()");
    d.class_name = f;
    d.school_name = h;
    d.period_name = k;
    d.class_description = l;
    d.instructor_name = m;
    d.dataset_name = t;
    d.problem_name = n;
    d.problem_context = p;
    d.auth_token = "";
    d.user_guid = u;
    var a = new CTATGuid;
    d.session_id = "ctat_session_" + a.guid();
    d.source_id = "tutor";
    d.dataset_level_name1 = v;
    d.dataset_level_type1 = w;
    flashVars = new CTATFlashVars;
    flashVars.assignRawFlashVars(d);
  };
  this.initCheck = function() {
    b.ctatdebug("initCheck ()");
    0 == e && 0 == g && (b.setupExternalLibraryUsage(), g = !0);
  };
  this.sendMessage = function(a) {
    b.ctatdebug("sendMessage ()");
    b.ctatdebug("Raw log message to send: " + a);
    this.sendMessageInternal(a);
  };
  this.sendMessageInternal = function(a) {
    b.ctatdebug("sendMessageInternal ()");
    if (!0 === loggingDisabled) {
      b.ctatdebug("Warning: loggingDisabled==true");
    } else {
      if (1 == e) {
        var d = flashVars.getRawFlashVars();
        if (null != d) {
          if ("ClientToService" != d.Logging && "ClientToLogServer" != d.Logging) {
            b.ctatdebug("Logging is turned off, as per: " + d.Logging);
            return;
          }
          "ClientToService" != d.Logging || "http" != d.tutoring_service_communication && "https" != d.tutoring_service_communication || (b.setLoggingURL(d.remoteSocketURL + ":" + d.remoteSocketPort), b.ctatdebug("Reconfigured the logging url to be: " + d.remoteSocketURL + ":" + d.remoteSocketPort));
        }
      }
      b.ctatdebug("Pre encoded log message: " + a);
      0 > a.indexOf("<log_session_start") && (a = commLogMessageBuilder.wrapForOLI('<?xml version="1.0" encoding="UTF-8"?><tutor_related_message_sequence version_number="4">' + a + "</tutor_related_message_sequence>"));
      b.ctatdebug("Encoded log message: " + a);
      x.sendXMLNoBundle(a);
    }
  };
  this.startProblem = function() {
    b.ctatdebug("startProblem ()");
    b.initCheck();
    this.sendMessage(commLogMessageBuilder.createContextMessage(!0));
  };
  this.logSessionStart = function() {
    b.ctatdebug("logSessionStart ()");
    b.initCheck();
    var a = flashVars.getRawFlashVars();
    void 0 != a.SessionLog && ("true" == a.SessionLog ? (b.ctatdebug("Turning SessionLog on ..."), c = !0) : (b.ctatdebug("Turning SessionLog off ..."), c = !1));
    !0 === c && this.sendMessage(commLogMessageBuilder.createLogSessionStart());
  };
  this.logSemanticEvent = function(a, d, c, f, e, g) {
    b.ctatdebug("logSemanticEvent ()");
    b.initCheck();
    var h = new Date;
    commLogMessageBuilder.resetCustomFields();
    commLogMessageBuilder.addCustomFields(e, g);
    commLogMessageBuilder.addCustomField("tool_event_time", commLogMessageBuilder.formatTimeStamp(h) + " UTC");
    a = commLogMessageBuilder.createSemanticEventToolMessage(d, a, c, f, !0);
    this.sendMessage(a);
  };
  this.logTutorResponse = function(a, d, c, f, e, g, h, l, m) {
    b.ctatdebug("logTutorResponse ()");
    b.initCheck();
    var k = new Date;
    commLogMessageBuilder.resetCustomFields();
    commLogMessageBuilder.addCustomFields(l, m);
    commLogMessageBuilder.addCustomField("tutor_event_time", commLogMessageBuilder.formatTimeStamp(k) + " UTC");
    b.ctatdebug("Formatting feedback ...");
    l = "";
    void 0 != g && null != g ? -1 != g.indexOf("'") || -1 != g.indexOf('"') || -1 != g.indexOf("<") || -1 != g.indexOf(">") || -1 != g.indexOf("&") ? (b.ctatdebug("Feedback message contains invalid characters, wrapping in CDATA ..."), l = "<![CDATA[" + g + "]]\x3e") : (b.ctatdebug("Feedback message doesn't contain any invalid characters, using as-is"), l = g) : (b.ctatdebug("No feedback provided, using empty string"), l = "");
    b.ctatdebug("Creating tutor message ...");
    a = commLogMessageBuilder.createTutorMessage(d, a, c, e, l, f, h, !0);
    this.sendMessage(a);
  };
  this.processMessage = function(a) {
    b.ctatdebug("processMessage ()");
    b.ctatdebug("Response from log server: " + a);
  };
  this.start = function() {
    b.ctatdebug("start ()");
    var a = b.generateSession();
    b.logSessionStart();
    b.startProblem();
    return a;
  };
  this.logInterfaceAttempt = function(a, d, c, f) {
    b.ctatdebug("logInterfaceAttempt ()");
    f = (new CTATGuid).guid();
    a = new CTATSAI(a, d, c);
    a.setInput(c);
    this.logSemanticEvent(f, a, "ATTEMPT", "");
    return f;
  };
  this.logInterfaceAttemptSAI = function(a, d) {
    b.ctatdebug("logInterfaceAttemptSAI ()");
    var c = (new CTATGuid).guid();
    this.logSemanticEvent(c, a, "ATTEMPT", "");
    return c;
  };
  this.logResponse = function(a, d, c, f, e, g, h, l) {
    b.ctatdebug("logResponse ()");
    d = new CTATSAI(d, c, f);
    d.setInput(f);
    f = new CTATActionEvaluationData("");
    f.setEvaluation(g);
    void 0 == l ? this.logTutorResponse(a, d, e, "", f, h) : this.logTutorResponse(a, d, e, "", f, h, l.getCustomElementNames(), l.getCustomElementTypes());
  };
  this.logResponseSAI = function(a, d, c, f, e, g) {
    b.ctatdebug("logResponse ()");
    var h = new CTATActionEvaluationData("");
    h.setEvaluation(f);
    void 0 == g ? this.logTutorResponse(a, d, c, "", h, e) : this.logTutorResponse(a, d, c, "", h, e, g.getCustomElementNames(), g.getCustomElementTypes());
  };
  this.endSession = function() {
    this.generateSession();
  };
};
CTATLoggingLibrary.prototype = Object.create(CTATBase.prototype);
CTATLoggingLibrary.prototype.constructor = CTATLoggingLibrary;
var CTATScrollPaneComponent = function(a, b, c, e, g) {
  CTAT.Component.Base.Tutorable.call(this, "CTATScrollPaneComponent", "__undefined__", a, b, c, e, g);
  var d = 0, f = this;
  f.isTabIndexable = !1;
  this.getAlpha = function() {
    return d;
  };
  this.setAlpha = function(a) {
    d = a;
  };
  this.init = function() {
    f.ctatdebug("init (" + f.getName() + ")");
    f.ctatdebug("Final location: " + f.getX() + "," + f.getY() + " with text: " + f.getText());
    f.setInitialized(!0);
    f.ctatdebug("Final location: " + f.getX() + "," + f.getY() + " with text: " + f.getText());
    commShell.addEventListener(this);
  };
  this.processCommShellEvent = function(a, b) {
    f.ctatdebug("processCommShellEvent (" + a + ")");
  };
  this.processSerialization = function() {
    f.ctatdebug("processSerialization()");
  };
  this.postProcess = function() {
    f.ctatdebug("postProcess ()");
    for (var a in this.parameters) {
      var b = this.parameters[a];
      f.ctatdebug("Checking style name: " + a);
      if ("TargetMovieClip" == a) {
        f.ctatdebug("Loading sub element: [" + b.trim() + "] ...");
        var d = findMovieClip(b.trim());
        if (null !== d) {
          if (f.ctatdebug("Found target movieclip, temporarily removing ..."), null !== d.getDivWrapper().parentNode) {
            try {
              d.getDivWrapper().parentNode.removeChild(d.getDivWrapper());
            } catch (c) {
              CTATScrim.scrim.errorScrimUp(c.message);
              break;
            }
            f.getDivWrap().setAttribute("id", "scrollsubdiv");
            f.getDivWrap().style.zIndex = CTATGlobalFunctions.gensym.z_index();
            f.ctatdebug("Adding ...");
            f.getDivWrap().appendChild(d.getDivWrapper());
            b = CTATGlobalFunctions.gensym.z_index();
            b++;
            var e = d.getDivWrapper().style.left, g = d.getDivWrapper().style.top;
            d.getDivWrapper().style.left = "0px";
            d.getDivWrapper().style.top = "0px";
            f.ctatdebug("Moving canvas from: " + e + "," + g + " to: 0,0");
            d = d.getDivWrapper().childNodes;
            for (e = 0;e < d.length;e++) {
              b++;
            }
          }
        } else {
          f.ctatdebug("Unable to find the target movieclip to reparent the content from");
        }
      }
    }
  };
  this.configFromDescription();
};
CTATScrollPaneComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATScrollPaneComponent.prototype.constructor = CTATScrollPaneComponent;
CTAT.ComponentRegistry.addComponentType("CTATScrollPaneComponent", CTATScrollPaneComponent);
var OLIComm = function(a) {
  function b(a, b) {
    return {name:a, value:b};
  }
  function c(a, b) {
    oliCommLibrary.assignHandler(oliMessageHandler);
    oliMessageHandler.setCommandName(b);
    useOLIEncoding = !0;
    oliCommLibrary.sendURLVariables(e.url, a);
    useOLIEncoding = !1;
  }
  CTATBase.call(this, "OLIComm", "OLIComm");
  this.url = a;
  var e = this;
  this.loadClientConfig = function() {
    e.ctatdebug("loadClientConfig");
    if (null == flashVars) {
      e.ctatdebug("Internal error: flashVars is null");
    } else {
      if (null == flashVars.getRawFlashVars()) {
        e.ctatdebug("Internal error: raw flashVars is null");
      } else {
        var a = [b("commandName", "loadClientConfig"), b("activityContextGuid", flashVars.getRawFlashVars().activity_context_guid), b("resourceTypeID", flashVars.getRawFlashVars().resource_type_id), b("activityMode", flashVars.getRawFlashVars().activity_mode), b("authenticationToken", flashVars.getRawFlashVars().oli_auth_token)];
        c(a, "loadClientConfig");
      }
    }
  };
  this.beginSession = function() {
    e.ctatdebug("beginSession");
    var a = [b("commandName", "beginSession"), b("activityContextGuid", flashVars.getRawFlashVars().activity_context_guid), b("activityGuid", flashVars.getRawFlashVars().activity_guid), b("userGuid", flashVars.getRawFlashVars().user_guid), b("authenticationToken", flashVars.getRawFlashVars().oli_auth_token), b("resourceTypeID", flashVars.getRawFlashVars().resource_type_id), b("activityMode", flashVars.getRawFlashVars().activity_mode)];
    c(a, "beginSession");
  };
  this.startAttempt = function() {
    e.ctatdebug("startAttempt");
    var a = [b("commandName", "startAttempt"), b("activityContextGuid", flashVars.getRawFlashVars().activity_context_guid), b("activityGuid", flashVars.getRawFlashVars().activity_guid), b("userGuid", flashVars.getRawFlashVars().user_guid), b("authenticationToken", flashVars.getRawFlashVars().oli_auth_token), b("resourceTypeID", flashVars.getRawFlashVars().resource_type_id), b("activityMode", flashVars.getRawFlashVars().activity_mode)];
    c(a, "startAttempt");
  };
  this.loadContentFile = function(a) {
    e.ctatdebug("loadContentFile");
    a = [b("commandName", "loadContentFile"), b("contentFileGuid", a), b("activityContextGuid", flashVars.getRawFlashVars().activity_context_guid), b("activityGuid", flashVars.getRawFlashVars().activity_guid), b("userGuid", flashVars.getRawFlashVars().user_guid), b("authenticationToken", flashVars.getRawFlashVars().oli_auth_token), b("resourceTypeID", flashVars.getRawFlashVars().resource_type_id), b("activityMode", flashVars.getRawFlashVars().activity_mode)];
    c(a, "loadContentFile");
  };
  this.loadFileRecord = function(a, d) {
    e.ctatdebug("loadFileRecord");
    var f = flashVars.getRawFlashVars(), f = [b("commandName", "loadFileRecord"), b("activityContextGuid", f.activity_context_guid), b("activityGuid", f.activity_guid), b("userGuid", f.user_guid), b("authenticationToken", f.oli_auth_token), b("resourceTypeID", f.resource_type_id), b("activityMode", f.activity_mode), b("attemptNumber", d ? d : f.current_attempt), b("fileName", a)];
    c(f, "loadFileRecord");
  };
  this.writeFileRecord = function(a, d, f, h, k) {
    e.ctatdebug("writeFileRecord");
    var l = flashVars.getRawFlashVars();
    a = [b("commandName", "writeFileRecord"), b("activityContextGuid", l.activity_context_guid), b("activityGuid", l.activity_guid), b("userGuid", l.user_guid), b("authenticationToken", l.oli_auth_token), b("resourceTypeID", l.resource_type_id), b("activityMode", l.activity_mode), b("attemptNumber", f ? f : l.current_attempt), b("fileName", a), b("mimeType", h ? h : "text/xml"), b("byteEncoding", k ? k : "urlencoded"), b("fileRecordData", d)];
    c(a, "writeFileRecord");
  };
  this.scoreAttempt = function(a, d) {
    e.ctatdebug("scoreAttempt");
    var f = flashVars.getRawFlashVars(), f = [b("commandName", "scoreAttempt"), b("activityContextGuid", f.activity_context_guid), b("activityGuid", f.activity_guid), b("userGuid", f.user_guid), b("authenticationToken", f.oli_auth_token), b("resourceTypeID", f.resource_type_id), b("activityMode", f.activity_mode), b("scoreId", a), b("scoreValue", d)];
    c(f, "scoreAttempt");
  };
  this.BRDAvailable = function(a, b) {
    e.ctatdebug("BRDAvailable ()");
    e.assignBRD(a);
    e.assignResourceSpec(b);
    e.ctatdebug("OLI is ready and running, returning control to ctatjsloader ...");
    OLIReady();
  };
  this.assignResourceSpec = function(a) {
    flashVars.getRawFlashVars().resource_spec = a;
  };
  this.assignBRD = function(a) {
    e.ctatdebug("assignBRD (" + a[0] + ")");
    flashVars.getRawFlashVars().question_file = a[0];
  };
};
OLIComm.prototype = Object.create(CTATBase.prototype);
OLIComm.prototype.constructor = OLIComm;
var OLIDriver = function(a) {
  CTATBase.call(this, "OLIDriver", "olidriver");
  this.url = a;
  var b = this, c = null;
  this.oliClientConfig = function(a) {
    b.ctatdebug("oliClientConfig (" + a + ")");
    flashVars.getRawFlashVars().log_service_url = a;
    oliComm.beginSession();
  };
  this.oliBeganSession = function(a, c) {
    b.ctatdebug("oliBeganSession (" + a + ", " + c + ")");
    Number(a) ? oliComm.loadContentFile(c) : oliComm.startAttempt();
  };
  this.oliLoadedContentFile = function(a) {
    b.ctatdebug("oliLoadedContentFile (" + a[0] + ")");
    b.ctatdebug("STUB!");
  };
  this.setCurrentModule = function(a) {
    currentOLIModule = a;
  };
  this.getCurrentModule = function() {
    return currentOLIModule;
  };
  this.translateResourceFile = function(a) {
    b.ctatdebug("translateResourceFile (" + a + ")");
    return b.translateOLIResourceFile(a);
  };
  this.translateOLIResourceFile = function(a) {
    b.ctatdebug("translateOLIResourceFile (" + a + ")");
    var c = flashVars.getRawFlashVars();
    return -1 == a.indexOf("webcontent") ? c.web_content_url + "webcontent/" + currentOLIModule + "/" + a : c.web_content_url + "/" + a;
  };
  this.resolveURL = function(a) {
    return flashVars.getRawFlashVars().web_content_url + "webcontent/" + currentOLIModule + "/" + a;
  };
  this.translateURL = function(a) {
    b.ctatdebug("translateURL ()");
    for (var c = flashVars.getRawFlashVars(), d = getIndicesOf("<img", a, !1), f = getIndicesOf("<a", a, !1), h = -1, k = h = -1, l = !1, m = "", h = "";0 == l;) {
      l = !0;
      if (0 == d.length && 0 == f.length) {
        return b.ctatdebug("Nothing to do here, bump"), a;
      }
      d = getIndicesOf("<img", a, !1);
      for (f = 0;f < d.length;f++) {
        h = d[f], h = a.indexOf("src", h), -1 != h && (h += 5, k = a.indexOf('"', h), -1 != k && (m = a.substr(h, k - h), b.ctatdebug("We have a valid url (img) to replace between: " + h + "," + k + ", with content: " + m), -1 == m.indexOf("http:") ? (l = !1, m = c.web_content_url + "webcontent/" + currentOLIModule + "/" + m, h = a.substr(0, h) + m + a.substr(k), b.ctatdebug("Replaced: " + h), a = h) : b.ctatdebug("The provided url is an absolute url, returning as is, bump")));
      }
      f = getIndicesOf("<a", a, !1);
      for (d = 0;d < f.length;d++) {
        h = f[d], h = a.indexOf("href", h), -1 != h && (h += 6, k = a.indexOf('"', h), -1 != k && (m = a.substr(h, k - h), b.ctatdebug("We have a valid url (href) to replace between: " + h + "," + k + ", with content: " + m), -1 == m.indexOf("http:") ? (l = !1, m = c.web_content_url + "webcontent/" + currentOLIModule + "/" + m, h = a.substr(0, h) + m + a.substr(k), b.ctatdebug("Replaced: " + h), a = h) : b.ctatdebug("The provided url is an absolute url, returning as is, bump")));
      }
      d = getIndicesOf("<img", a, !1);
      f = getIndicesOf("<a", a, !1);
    }
    console.log("Final string: " + a);
    return a;
  };
  this.forwardToClientHandler = function(a) {
    b.ctatdebug("OLIDriver.forwardToClientHandler() handler is " + typeof c);
    c && c.process && c.process(a);
  };
  this.registerClientHandler = function(a) {
    c = a;
  };
};
OLIDriver.prototype = Object.create(CTATBase.prototype);
OLIDriver.prototype.constructor = OLIDriver;
var currentOLIModule = "", OLIMessageHandler = function() {
  CTATBase.call(this, "OLIMessageHandler", "olimessagehandler");
  var a = null, b = "", c = new CTATXML, e = this, g = [];
  this.assignHandler = function(b) {
    a = b;
  };
  this.setCurrentModule = function(a) {
    currentOLIModule = a;
  };
  this.getCurrentModule = function() {
    return currentOLIModule;
  };
  this.setCommandName = function(a) {
    "string" == typeof a && (b = a);
  };
  this.processError = function(d, c) {
    e.ctatdebug("OLIMessageHandler.processError(" + d + ", " + c + ")\n  from command " + b);
    if (a) {
      a.forwardToClientHandler(c);
    } else {
      switch(b) {
        case "startAttempt":
          e.parseAttemptHistory(null);
      }
    }
  };
  this.processMessage = function(b) {
    e.ctatdebug("processMessage () length " + (b ? b : null));
    var f = c.parse(b);
    if (null == f) {
      e.ctatdebug("Error parsing oli message"), a && a.forwardToClientHandler(b);
    } else {
      var g = c.getElementName(f);
      switch(g) {
        case "super_activity_client":
          e.parseClientConfig(f);
          break;
        case "super_activity_session":
          e.parseBeginSession(f);
          break;
        case "attempt_history":
          e.parseAttemptHistory(f);
          break;
        case "ctat":
          e.parseResourceFile(f, b);
          break;
        case "file_record":
          e.parseFileRecord(f);
          break;
        default:
          a ? a.forwardToClientHandler(b) : e.ctatdebug("Unknown xml recieved with root " + g);
      }
    }
  };
  this.parseClientConfig = function(b) {
    e.ctatdebug("parseClientConfig ()");
    var f = flashVars.getRawFlashVars();
    b = c.getElementChildren(b);
    for (var g = null, k = 0;k < b.length;k++) {
      var l = b[k], m = c.getElementName(l);
      "resource_type" != m && "base" != m && ("authentication" == m && "review" != f.activity_mode ? f.user_guid = c.getElementAttr(l, "user_guid") : "logging" == m && (f.log_session_id = c.getElementAttr(l, "session_id"), f.source_id = c.getElementAttr(l, "source_id"), g = c.getElementChildren(l), g = c.getNodeTextValue(g[0])));
    }
    a.oliClientConfig(g);
  };
  this.parseBeginSession = function(b) {
    e.ctatdebug("parseBeginSession ()");
    var f = b.getElementsByTagName("file")[0];
    if (void 0 == f) {
      e.ctatdebug("can't find resource file");
    } else {
      var g = flashVars.getRawFlashVars(), k = b.getElementsByTagName("web_content")[0];
      g.web_content_url = c.getElementAttr(k, "href");
      k = c.getElementAttr(f, "guid");
      g.resource_file_id = k;
      if (f = b.getElementsByTagName("section")[0]) {
        g.class_name = c.getElementAttr(f, "admit_code"), g.class_description = c.getElementAttr(f, "title"), g.school_name = c.getElementAttr(f, "institution");
      }
      (f = b.getElementsByTagName("instructors")[0]) && (f = c.getElementChildren(f)) && (g.instructor = c.getElementAttr(f[0], "guid"));
      (f = b.getElementsByTagName("user")[0]) && "review" != g.activity_mode && (g.user_guid = c.getElementAttr(f, "guid"));
      if (f = b.getElementsByTagName("activity")[0]) {
        if (g.activity_guid = c.getElementAttr(f, "guid"), f = f.getElementsByTagName("item_info")[0]) {
          if (f = f.getElementsByTagName("resource_info")[0]) {
            if (f = f.getElementsByTagName("file")[0]) {
              if (f = c.getElementAttr(f, "href")) {
                firstSlash = f.indexOf("/"), this.setCurrentModule(f.substr(0, firstSlash));
              }
            }
          }
        }
      }
      if (f = b.getElementsByTagName("file_record")[0]) {
        g.file_record_file_name = c.getElementAttr(f, "file_name");
        for (var f = c.getElementChildren(f), l = 0;l < f.length;l++) {
          var m = f[l];
          "record_context" == String(c.getElementName(m)).toLowerCase() && c.getElementAttr(m, "activity_guid") == g.activity_guid && (g.file_record_attempt = c.getElementAttr(m, "attempt")) && (g.problem_state_status = "incomplete");
        }
      }
      b = e.setAttemptFromAttemptHistory(b.getElementsByTagName("attempt_history")[0]);
      a.oliBeganSession(b, k);
    }
  };
  this.parseAttemptHistory = function(d) {
    var c = flashVars.getRawFlashVars();
    d = e.setAttemptFromAttemptHistory(d, "1");
    "startAttempt" == b && a.oliBeganSession(d, c.resource_file_id);
  };
  this.setAttemptFromAttemptHistory = function(a, b) {
    e.ctatdebug("setAttemptFromAttemptHistory(" + a + ", " + b + ")");
    var g = flashVars.getRawFlashVars(), k = a ? a.getElementsByTagName("activity_attempt") : [], l = null;
    return 1 > k.length || !(l = k[k.length - 1]) ? (e.ctatdebug("can't find activity_attempt in attempt_history"), null != b ? g.current_attempt = b : "") : g.current_attempt = c.getElementAttr(l, "number");
  };
  this.parseResourceFile = function(a, b) {
    e.ctatdebug("parseResourceFile ()");
    g = [];
    for (var h = c.getElementChildren(a), k = flashVars.getRawFlashVars(), l = 0;l < h.length;l++) {
      var m = h[l], n = c.getElementName(m);
      "interface" == n ? (m = c.getNodeTextValue(m), n = oliDriver.translateResourceFile(m), e.ctatdebug("Building BRD url from web_content_url: " + k.web_content_url + " and OLI-provided url: " + m + " = " + n), g.push(n)) : "title" == n && (k.problem_name = c.getNodeTextValue(m));
    }
    oliComm.BRDAvailable(g, b);
  };
  this.parseFileRecord = function(a) {
    e.ctatdebug("parseFileRecord()");
    var b = Number(c.getElementAttr(a, "date_created")), g = c.getElementAttr(a, "file_size");
    a = c.getElementAttr(a, "file_name");
    console.log("OLI writeFileRecord at", isNaN(b) ? null : new Date(b), "wrote", a, ", size", g);
  };
};
OLIMessageHandler.prototype = Object.create(CTATBase.prototype);
OLIMessageHandler.prototype.constructor = OLIMessageHandler;
var CTATNameTranslator = function() {
  CTATBase.call(this, "CTATNameTranslator", "translator");
  var a = !1, b = this;
  this.setPassthrough = function(b) {
    a = b;
  };
  this.getPassthrough = function() {
    return a;
  };
  this.manufactorJSON = function(a, e) {
    b.ctatdebug("manufactorJSON (" + a + "," + e + ")");
    var g = a.split(":");
    if (1 == g.length) {
      return b.ctatdebug("No range in aRange, returning basic JSON ..."), "";
    }
    var d = this.getA1Row(g[0]), f = this.getA1Col(g[0]), h = this.getA1Row(g[1]), k = this.getA1Col(g[1]);
    b.ctatdebug("Manufacturing json from: [" + d + "," + f + "] to: [" + h + "," + k + "]");
    g = "[";
    d = parseInt(h) - parseInt(d);
    f = parseInt(k) - parseInt(f);
    d++;
    f++;
    b.ctatdebug("X range: " + d + ", Y range: " + f);
    for (h = 0;h < d;h++) {
      0 < h && (g += ",");
      g += "[";
      for (k = 0;k < f;k++) {
        0 < k && (g += ","), g += '"', g += e, g += '"';
      }
      g += "]";
    }
    return g + "]";
  };
  this.translateFromCTAT = function(c, e) {
    if (!0 === a) {
      return c;
    }
    var g = c.toLowerCase();
    b.ctatdebug("translateFromCTAT (" + g + ")");
    var d = 0, f = 0, f = "";
    if (-1 != g.indexOf(".r")) {
      var h = g.split("."), d = h[1].split("r");
      0 >= d.length && (d = h[1].split("c"));
      if (0 >= d.length) {
        b.ctatdebug("Info: incoming name does not need translation");
      } else {
        return f = d[1], d = d[0].substr(1), b.ctatdebug("Original row (1st format): " + d + " original col: " + f), f = 1 == e ? colName(f, !1) + d : h[0] + "." + colName(f, !1) + d, b.ctatdebug("Translated: " + f), f;
      }
    } else {
      if (0 == g.indexOf("r")) {
        var h = g.indexOf("c"), k = parseInt(g.substr(1, h - 1)), g = parseInt(g.substr(h + 1)), d = k + 1, f = g;
        b.ctatdebug("Original row (2nd format) (columnindex: " + h + "): " + k + " -> " + d + ", original col: " + g + " -> " + f);
        f = colName(f, !1) + d;
        b.ctatdebug("Translated: " + f);
        return f;
      }
      b.ctatdebug("Info: incoming name does not need translation");
    }
    return g;
  };
  this.translateToCTAT = function(b) {
    if (1 == a) {
      return b;
    }
    var e = this.letterToColumn(b.substr(0, 1)) - 1;
    return "R" + (parseInt(b.substr(1)) - 1) + "C" + e;
  };
  this.columnToLetter = function(a) {
    for (var b, g = "";0 < a;) {
      b = (a - 1) % 26, g = String.fromCharCode(b + 65) + g, a = (a - b - 1) / 26;
    }
    return g;
  };
  this.letterToColumn = function(a) {
    for (var b = 0, g = a.length, d = 0;d < g;d++) {
      b += (a.charCodeAt(d) - 64) * Math.pow(26, g - d - 1);
    }
    return b;
  };
  this.getA1Row = function(a) {
    return parseInt(a.substr(1)) - 1;
  };
  this.getA1Col = function(a) {
    return this.letterToColumn(a.substr(0, 1)) - 1;
  };
};
CTATNameTranslator.prototype = Object.create(CTATBase.prototype);
CTATNameTranslator.prototype.constructor = CTATNameTranslator;
var CTATShellTools = {ctat_base:new CTATBase("CTATShellTools", "shelltools"), components:{}, component_descriptions:{}, registerComponentDescription:function(a) {
  CTATShellTools.component_descriptions[a.name] = a;
}, listComponents:function() {
  CTATShellTools.ctat_base.ctatdebug("listComponents ()");
  var a = CTATShellTools.component_descriptions, b;
  for (b in a) {
    var c = a[b];
    CTATShellTools.ctat_base.ctatdebug("Obtaining component for " + c.name + " with type: " + c.type);
    c = c.getComponentPointer();
    null !== c ? CTATShellTools.ctat_base.ctatdebug("Component: " + c.getName() + " of instance: " + c.getClassName()) : CTATShellTools.ctat_base.ctatdebug("Error: component pointer is null");
  }
}, feedback_components:[], registerFeedbackComponent:function(a, b, c, e, g) {
  CTATShellTools.feedback_components.push({component:a, next:b, prev:c, showHints:e, showFeedback:g});
}, showNextHint:function() {
  CTATShellTools.feedback_components.forEach(function(a) {
    a.next && a.next.bind(a.component)();
  });
}, showPrevHint:function() {
  CTATShellTools.feedback_components.forEach(function(a) {
    a.prev && a.prev.bind(a.component)();
  });
}, showFeedback:function(a) {
  CTATShellTools.feedback_components.forEach(function(b) {
    b.showFeedback && b.showFeedback.bind(b.component)(a);
  });
}, showHints:function(a) {
  CTATShellTools.feedback_components.forEach(function(b) {
    b.showHints && b.showHints.bind(b.component)(a);
  });
}, getCurrentMs:function() {
  return (new Date).valueOf();
}, getNameFromGroup:function(a) {
  CTATShellTools.ctat_base.ctatdebug("getNameFromGroup (" + a + ")");
  var b = a.split(" ");
  return 1 == b.length ? a : b[0].substring(0, b[0].length - 1);
}, findComponent:function(a, b) {
  var c = CTATShellTools.component_descriptions;
  CTATShellTools.ctat_base.ctatdebug("findComponent(" + a + ")");
  var c = CTATShellTools.component_descriptions, e = [], g = null, g = -1 < a.indexOf(".") ? $('[id="' + a + '"]') : $("#" + a);
  if (0 < g.length) {
    var d = [];
    g.each(function() {
      $(this).data("CTATComponent") && d.push($(this).data("CTATComponent"));
    });
    if (0 < d.length) {
      return d;
    }
  }
  g = $('div[data-ctat-component]:has(input[name="' + a + '"])');
  if (0 < g.length) {
    var f = [];
    g.each(function() {
      $(this).data("CTATComponent") && f.push($(this).data("CTATComponent"));
    });
    if (0 < f.length) {
      return f;
    }
  }
  for (var h in c) {
    g = c[h];
    if (null === g || null === g.name) {
      return null;
    }
    if (g.name == a) {
      if (null == g.getComponentPointer()) {
        return null;
      }
      e = [];
      e.push(g.getComponentPointer());
      return e;
    }
    g.groupName == a && e.push(g.getComponentPointer());
  }
  return null === e ? -1 != a.indexOf(".") ? (c = a.split("."), this.findComponent(c[0])) : e : 0 === e.length && -1 != a.indexOf(".") ? (c = a.split("."), this.findComponent(c[0])) : e;
}, findComponentInstance:function(a, b) {
  var c = CTATShellTools.findComponent(a, b);
  return 1 == c.length ? c[0] : c;
}, findComponentByClass:function(a) {
  var b = CTATShellTools.component_descriptions, c;
  for (c in b) {
    var e = b[c];
    if (null === e) {
      return null;
    }
    if (null !== e.getComponentPointer() && e.getComponentPointer().getClassName() == a) {
      return e.getComponentPointer();
    }
  }
  a = $("." + a);
  return 0 < a.length ? a.first().data("CTATComponent") : null;
}};
var CTATMessageHandler = function() {
  CTATBase.call(this, "CTATMessageHandler", "messagehandler");
  var a = null, b = this, c = [], e = null, e = CTATConfig.parserType_is_XML() ? new CTATXML : new CTATJSON;
  this.assignHandler = function(d) {
    b.ctatdebug("assignHandler ()");
    a = d;
  };
  this.reset = function() {
    b.ctatdebug("reset ()");
    c = [];
  };
  this.getInStartState = function() {
    return inStartState;
  };
  var g = !1;
  this.receiveFromTutor = function(a) {
    this.processMessage(a);
  };
  this.processMessage = function(a) {
    b.ctatdebug("Incoming message: " + a);
    b.ctatdebug("processMessage (" + lastMessage + ")");
    if (!0 !== g) {
      if (CTATConfig.parserType_is_JSON() && -1 != a.indexOf("<?xml")) {
        alert("Error: CTAT is configured to parse JSON but it received an XML message, disabling comm capabilities ..."), g = !0;
      } else {
        if (CTATConfig.parserType_is_XML() && 0 === a.indexOf("{")) {
          alert("Error: CTAT is configured to parse XML but it received a JSON message, disabling comm capabilities ..."), g = !0;
        } else {
          var c = null;
          b.ctatdebug("Attempting parse ...");
          c = e.parse(a);
          null === c ? b.ctatdebug("Error parsing message: " + a) : this.parseElement(c);
        }
      }
    }
  };
  this.parseElement = function(a) {
    var c = e.getElementName(a);
    b.ctatdebug("parseElement (" + c + ")");
    "CTATResponseMessages" != c && "StartStateMessages" != c && "MessageBundle" != c || this.processMessageBundle(a);
    "message" == c && this.processSingleMessage(a);
  };
  this.processMessageBundle = function(a) {
    var c = e.getElementName(a);
    b.ctatdebug("processMessageBundle (" + c + ")");
    a = e.getElementChildren(a);
    if (null === a) {
      b.ctatdebug("Error parsing bundle");
    } else {
      for (ctatdebug("Processing " + a.length + " objects in bundle"), c = 0;c < a.length;c++) {
        this.parseElement(a[c]);
      }
    }
  };
  this.processSingleMessage = function(d) {
    b.ctatdebug("processSingleMessage (" + e.getElementName(d) + ")");
    var f = new CTATMessage(d);
    d = e.getElementChildren(d);
    b.ctatdebug("Generated CTATMessage, now doing regular processing ...");
    for (var g = 0;g < d.length;g++) {
      var k = d[g];
      if ("properties" == e.getElementName(k)) {
        b.ctatdebug("Parsing properties ...");
        for (var l = e.getElementChildren(k), m = 0;m < l.length;m++) {
          var n = l[m];
          if ("MessageType" == e.getElementName(n)) {
            n = e.getNodeTextValue(n);
            b.ctatdebug("MessageType: " + n);
            "StateGraph" == n && this.processStateGraph(k);
            "StartProblem" == n && (b.ctatdebug("Setting inStartState to true"), inStartState = !0, this.processStartProblem(l));
            "InterfaceIdentification" == n && this.processInterfaceIdentification(l);
            "InterfaceDescription" == n && this.processInterfaceDescription(l);
            "SendWidgetLock" == n && b.ctatdebug("Found: SendWidgetLock");
            if ("StartStateEnd" == n) {
              b.ctatdebug("Found: StartStateEnd");
              CTATShellTools.listComponents();
              null !== a ? a.processStartState() : this.ctatdebug("Error: no message handler object available to process start state");
              try {
                b.processStartStateActions();
              } catch (C) {
                b.ctatdebug("Caught in the act: " + C.message);
              }
              inStartState = !1;
            }
            "CorrectAction" == n && (b.ctatdebug("Found: CorrectAction"), !0 === this.getInStartState() ? c.push(f) : a.processCorrectAction(f));
            "InCorrectAction" == n && (b.ctatdebug("Found: InCorrectAction"), !0 === inStartState ? c.push(f) : (b.ctatdebug("Handing incorrect message to messagehandler ..."), a.processInCorrectAction(f)));
            "HighlightMsg" == n && (b.ctatdebug("Found: HighlightMsg"), a.processHighlightMsg(f));
            "UnHighlightMsg" == n && (b.ctatdebug("Found: UnHighlightMsg"), a.processUnHighlightMsg(f));
            if ("AssociatedRules" == n) {
              b.ctatdebug("Found: AssociatedRules (" + l.length + ")");
              for (var p = "", u = "", t = 0;t < l.length;t++) {
                var v = l[t];
                "TutorAdvice" == e.getElementName(v) && (p = e.getNodeTextValue(v));
                "Actor" == e.getElementName(v) && e.getNodeTextValue(v);
                "Indicator" == e.getElementName(v) && (u = e.getNodeTextValue(v));
                "StepID" == e.getElementName(v) && e.getNodeTextValue(v);
                "LogAsResult" == e.getElementName(v) && e.getNodeTextValue(v);
                "tool_selection" == e.getElementName(v) && e.getNodeTextValue(v);
                "Skills" == e.getElementName(v) && (b.ctatdebug("Processing skills ..."), null === skillSet && (b.ctatdebug("Interesting, there isn't a skillSet object yet. Creating ..."), skillSet = new CTATSkillSet), skillSet.parseByValue(v));
              }
              a.processAssociatedRules(f, u, p);
            }
            "BuggyMessage" == n && (b.ctatdebug("Found: BuggyMessage"), a.processBuggyMessage(f));
            "SuccessMessage" == n && (b.ctatdebug("Found: SuccessMessage"), a.processSuccessMessage(f));
            "InterfaceAction" == n && (b.ctatdebug("Found: InterfaceAction"), !0 === inStartState ? (b.ctatdebug("inStartState==true => storing for later playback ..."), c.push(f)) : a.processInterfaceAction(f));
            "InterfaceIdentification" == n && b.ctatdebug("Found: InterfaceIdentification");
            "AuthorModeChange" == n && (b.ctatdebug("Found: AuthorModeChange"), a.globalReset());
            "ResetAction" == n && (b.ctatdebug("Found: ResetAction"), a.globalReset());
            if ("ShowHintsMessage" == n) {
              b.ctatdebug("Found: ShowHintsMessage");
              p = !1;
              u = [];
              for (t = 0;t < l.length;t++) {
                if (v = l[t], "HintsMessage" == e.getElementName(v)) {
                  for (var v = e.getElementChildren(v), w = 0;w < v.length;w++) {
                    var x = v[w];
                    "value" == e.getElementName(x) && (u.push(e.getNodeTextValue(x)), p = !0);
                  }
                }
              }
              !0 === p ? a.processHintResponse(f, u) : b.ctatdebug("Error: incomplete hint message received");
            }
            "ConfirmDone" == n && (b.ctatdebug("Found: ConfirmDone"), a.processConfirmDone(f));
            "VersionInfo" == n && (b.ctatdebug("Found: VersionInfo"), a.processVersionInfo(l));
            "TutoringServiceAlert" == n && (b.ctatdebug("Found: TutoringServiceAlert"), a.processTutoringServiceAlert(l));
            "TutoringServiceError" == n && (b.ctatdebug("Found: TutoringServiceError"), a.processTutoringServiceError(l));
            "ProblemSummaryResponse" == n && (b.ctatdebug("Found: ProblemSummaryResponse"), a.processProblemSummaryResponse(f));
            "ProblemRestoreEnd" == n && (b.ctatdebug("Found: ProblemRestoreEnd"), a.processProblemRestoreEnd(f));
          }
        }
      }
    }
  };
  this.processStateGraph = function(d) {
    b.ctatdebug("processStateGraph ()");
    if (void 0 === d || null === d) {
      b.ctatdebug("Error: state graph property list is undefined");
    } else {
      if (b.ctatdebug("Processing node: " + d.nodeName), null === e.getElementChildren(d)) {
        b.ctatdebug("Error: state graph property list is undefined");
      } else {
        d = e.getElementChildren(d);
        for (var c = 0;c < d.length;c++) {
          var g = d[c];
          b.ctatdebug("State graph attribute: " + e.getElementName(g));
          "caseInsensitive" == e.getElementName(g) && (caseInsensitive = "false" == e.getNodeTextValue(g) ? !1 : !0);
          "unordered" == e.getElementName(g) && (unordered = "false" == e.getNodeTextValue(g) ? !1 : !0);
          "lockWidget" == e.getElementName(g) && (lockWidget = "false" == e.getNodeTextValue(g) ? !1 : !0);
          "suppressStudentFeedback" == e.getElementName(g) && ("false" == e.getNodeTextValue(g) ? CTATGlobals.suppressStudentFeedback = !1 : CTATGlobals.suppressStudentFeedback = !0);
          "highlightRightSelection" == e.getElementName(g) && (highlightRightSelection = "false" == e.getNodeTextValue(g) ? !1 : !0);
          "confirmDone" == e.getElementName(g) && (b.ctatdebug("Confirm done: " + e.getNodeTextValue(g)), "true" == e.getNodeTextValue(g) ? CTATGlobals.confirmDone = !0 : CTATGlobals.confirmDone = !1);
          "Skills" == e.getElementName(g) && (b.ctatdebug("Processing skills ..."), null === skillSet && (skillSet = new CTATSkillSet), skillSet.parseByValue(g), a.updateSkillWindow());
        }
      }
    }
  };
  this.processStartProblem = function(d) {
    b.ctatdebug("processStartProblem ()");
    a.processStartProblem();
  };
  this.processInterfaceIdentification = function(a) {
  };
  this.processInterfaceDescription = function(a) {
    b.ctatdebug("processInterfaceDescription (" + a.length + ")");
    for (var c = "Unknown", g = "Unknown", k = null, l = 0;l < a.length;l++) {
      var m = a[l];
      b.ctatdebug("Inspecting element: " + e.getElementName(m));
      "WidgetType" == e.getElementName(m) && (b.ctatdebug("Widget type: " + e.getNodeTextValue(m)), c = e.getNodeTextValue(m));
      "CommName" == e.getElementName(m) && (b.ctatdebug("Instance name: " + e.getNodeTextValue(m)), g = e.getNodeTextValue(m));
      if ("serialized" == e.getElementName(m)) {
        b.ctatdebug("Prepareing to de-serialize component ...");
        for (var n = e.getElementChildren(m), p = 0;p < n.length;p++) {
          var u = n[p];
          -1 != e.getElementName(u).indexOf("CTAT") && (k = u);
        }
      }
      "interface" == e.getElementName(m) && (b.ctatdebug("Storing interface for post start-state reconstruction ..."), CTATGlobals.interfaceElement = m);
      "script" == e.getElementName(m) && (b.ctatdebug("Storing and loading main javascript code as defined by the BRD ..."), scriptElement = e.getNodeTextValue(m));
    }
    null !== k ? this.deserializeComponent(c, g, k) : b.ctatdebug("Error: unable to find CTAT serialization point of attachement");
    b.ctatdebug("processInterfaceDescription () done");
  };
  this.deserializeComponent = function(a, c, g) {
    b.ctatdebug("deserializeComponent (" + a + "," + c + ")");
    if (null === e.getElementAttr(g, "x")) {
      b.ctatdebug("Warning: this component does not have x,y information. Probably an older component");
    } else {
      var k = e.getElementAttr(g, "x"), l = e.getElementAttr(g, "y"), m = e.getElementAttr(g, "width"), n = e.getElementAttr(g, "height"), p = e.getElementAttr(g, "tabIndex"), u = e.getElementAttr(g, "zIndex");
      null === p && (p = -1);
      null === u && (u = 0);
      var t = new CTATComponentDescription;
      t.type = a;
      t.name = c;
      t.x = Math.floor(k);
      t.y = Math.floor(l);
      t.tabIndex = p;
      t.zIndex = u;
      t.width = Math.floor(m);
      t.height = Math.floor(n);
      CTATShellTools.registerComponentDescription(t);
      g = e.getElementChildren(g);
      for (k = 0;k < g.length;k++) {
        l = g[k];
        e.getElementName(l);
        if ("Parameters" == e.getElementName(l)) {
          for (this.ctatdebug("Processing component parameters ..."), m = e.getElementChildren(l)[0], m = e.getElementChildren(m), n = 0;n < m.length;n++) {
            var v = m[n];
            if ("CTATComponentParameter" == e.getElementName(v)) {
              this.ctatdebug("Processing parameter property (CTATComponentParameter) ...");
              for (var u = p = void 0, v = e.getElementChildren(v), w = 0;w < v.length;w++) {
                var x = v[w];
                "name" == e.getElementName(x) && (this.ctatdebug("Found parameter name: " + e.getNodeTextValue(x)), p = e.getNodeTextValue(x));
                "value" == e.getElementName(x) && (this.ctatdebug("Found parameter value: " + e.getNodeTextValue(x)), u = e.getNodeTextValue(x).trim());
              }
              this.ctatdebug("Parameter name: " + p + ", value: " + u);
              void 0 !== p && (t.params[p] = u, "group" == p && (t.groupName = u));
            }
          }
        }
        if ("Styles" == e.getElementName(l)) {
          for (this.ctatdebug("Processing component styles ..."), l = e.getElementChildren(l)[0], l = e.getElementChildren(l), m = 0;m < l.length;m++) {
            if (u = l[m], "CTATStyleProperty" == e.getElementName(u)) {
              this.ctatdebug("Processing style property (CTATStyleProperty) ...");
              p = n = "";
              u = e.getElementChildren(u);
              for (v = 0;v < u.length;v++) {
                w = u[v], "name" == e.getElementName(w) && (n = e.getNodeTextValue(w)), "value" == e.getElementName(w) && (p = e.getNodeTextValue(w).trim());
              }
              this.ctatdebug("Style (name: " + n + ", value: " + p + ")");
              "" !== n && (t.styles[n] = p);
            }
          }
        }
      }
      b.ctatdebug("deserializeComponent (" + a + "," + c + ") done");
    }
  };
  this.processStartStateActions = function() {
    b.ctatdebug("processStartStateActions (" + c.length + ")");
    if (0 == c.length) {
      b.ctatdebug("No start state messages, bump");
    } else {
      if (0 < startStateHandlers.length) {
        for (var d = 0;d < startStateHandlers.length;d++) {
          startStateHandlers[d].processStartStateActions(c);
        }
      } else {
        for (d = 0;d < c.length;d++) {
          var f = c[d];
          b.ctatdebug("Processing startstate message type: " + f.getMessageType());
          "InterfaceAction" == f.getMessageType() && a.processInterfaceAction(f);
          "CorrectAction" == f.getMessageType() && a.processCorrectAction(f);
          "InCorrectAction" == f.getMessageType() && a.processInCorrectAction(f);
          this.sleep(1E3);
        }
        if ("" != scriptElement) {
          try {
            eval(scriptElement);
          } catch (e) {
            alert("Error executing script from BRD: " + e.message);
          }
        }
      }
    }
  };
  this.sleep = function(a) {
    b.ctatdebug("sleep (" + a + ")");
  };
};
CTATMessageHandler.prototype = Object.create(CTATBase.prototype);
CTATMessageHandler.prototype.constructor = CTATMessageHandler;
var CTATCheckBox = function(a, b, c, e, g) {
  CTAT.Component.Base.Clickable.call(this, "CTATCheckBox", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var d = null, f = null, h = null, k = "top";
  this.setStyleHandler("inspBackgroundColor", null);
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("DrawBorder", null);
  this.setStyleHandler("showBorder", null);
  this.setStyleHandler("BorderColor", null);
  this.setStyleHandler("TextAlign", null);
  var l = this;
  this.setSelection(this.getComponentGroup());
  this.setAction("UpdateCheckBox");
  this.getCheckBox = function() {
    return d;
  };
  this.setCheckBox = function(a) {
    d = a;
  };
  this.getLabelPlacement = function() {
    return k;
  };
  this.setLabelPlacement = function(a) {
    k = String(a);
    if (f && d) {
      switch(k.toLowerCase()) {
        case "left":
          d.style.width = null;
          d.style.float = "right";
          break;
        case "bottom":
          d.style.float = null;
          d.style.width = "100%";
          break;
        case "top":
          h.appendChild(d);
          d.style.float = null;
          d.style.width = "100%";
          break;
        default:
          d.style.width = null, d.style.float = null;
      }
    }
  };
  this.setStyleHandler("labelPlacement", this.setLabelPlacement);
  var m = function(a) {
    this.updateSAI();
    this.processClick(a);
  };
  this.init = function() {
    l.setInitialized(!0);
    h = document.createElement("div");
    d = document.createElement("input");
    d.type = "checkbox";
    d.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    d.classList.add("CTAT-checkbox-button");
    this.getText() ? d.value = l.getText() : this.getDivWrap() && this.getDivWrap().textContent ? d.value = this.getDivWrap().textContent : d.value = d.id;
    this.getComponentGroup() ? d.name = l.getComponentGroup() : this.getDivWrap() && $(this.getDivWrap()).attr("name") ? d.name = $(this.getDivWrap()).attr("name") : d.name = "checkBoxGroup";
    l.assignEnabled(!0);
    !0 === l.getEnabled() ? d.disabled = !1 : d.disabled = !0;
    l.ctatdebug("Final location: " + l.getX() + "," + l.getY() + " with text: " + l.getText());
    l.addComponentReference(l, d);
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    l.getDivWrap().appendChild(h);
    f = document.createElement("label");
    f.htmlFor = d.id;
    this.getText() ? f.textContent = this.getText() : a && (f.innerHTML = a);
    l.setComponent(h);
    l.setLabel(f);
    h.appendChild(d);
    h.appendChild(f);
    h.classList.add("CTAT-checkbox");
    d.addEventListener("click", m.bind(this));
    d.addEventListener("focus", l.processFocus);
    this.setSelection(this.getComponentGroup());
  };
  var n = this.setText;
  this.setText = function(a) {
    l.ctatdebug("setText (" + a + ")");
    n(a);
    h && (d.value = a, f.textContent = a);
  };
  this.setStyleHandler("labelText", this.setText);
  var p = this.setEnabled;
  this.setEnabled = function(a) {
    p(a);
    d && (d.disabled = !this.getEnabled());
  };
  this.getCheckBoxInput = function() {
    return f.innerHTML + ": " + d.checked;
  };
  this.reset = function() {
    d.checked = !1;
    l.setEnabled(!0);
    l.setLabelPlacement(k);
  };
  this.UpdateCheckBox = function(a) {
    d.checked = 0 <= a.search(new RegExp("(^|;)" + f.innerHTML + "\\s*:\\s*true"));
  };
  this.SetSelected = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    d.checked = a;
  };
  this.updateSAI = function() {
    var a = $('div[data-ctat-component]:has(input[type="checkbox"][name="' + d.name + '"])').sort(function(a, b) {
      var d = a.id, c = b.id;
      return d > c ? 1 : d < c ? -1 : 0;
    }), a = $.map(a, function(a) {
      a = $(a).data("CTATComponent").getCheckBox();
      return a.value + ": " + a.checked;
    });
    this.setSelection(d.name);
    this.setInput(a.join(";"));
  };
  var u = function(a) {
    f.classList.add(a);
    d.classList.add(a);
  }, t = function(a) {
    f.classList.remove(a);
    d.classList.remove(a);
  };
  this.showCorrect = function(a) {
    t("CTAT--incorrect");
    t("CTAT--hint");
    u("CTAT--correct");
  };
  this.removeCorrect = t.bind(this, "CTAT--correct");
  this.showInCorrect = function(a) {
    t("CTAT--correct");
    t("CTAT--hint");
    u("CTAT--incorrect");
  };
  this.removeInCorrect = t.bind(this, "CTAT--incorrect");
  this.showHintHighlight = function(a) {
    t("CTAT--incorrect");
    t("CTAT--correct");
    a ? u("CTAT--hint") : t("CTAT--hint");
  };
};
CTATCheckBox.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATCheckBox.prototype.constructor = CTATCheckBox;
CTAT.ComponentRegistry.addComponentType("CTATCheckBox", CTATCheckBox);
var CTATHintWindow = function(a, b, c, e, g) {
  CTAT.Component.Base.Graphical.call(this, "CTATHintWindow", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(240);
  this.setDefaultHeight(140);
  var d = this;
  d.isTabIndexable = !1;
  var f = null, h = null, k = null, l = null, m = CTATGlobals.languageManager.getString("NEXT"), n = CTATGlobals.languageManager.getString("PREVIOUS"), p = null;
  this.data_ctat_handlers["next-content"] = function(a) {
    p = a;
    k && (k.innerHTML = a);
  };
  var u = null;
  this.data_ctat_handlers["previous-content"] = function(a) {
    u = a;
    h && (h.innerHTML = a);
  };
  var t = !1;
  this.data_ctat_handlers["use-svg"] = function(a) {
    t = CTATGlobalFunctions.stringToBoolean(a);
  };
  this.getCurrentHint = function() {
    return f.innerHTML;
  };
  this.init = function() {
    d.setInitialized(!0);
    l = document.createElement("div");
    l.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    l.setAttribute("onkeypress", "return noenter(event)");
    d.setComponent(l);
    l.classList.add("CTAT-gen-component");
    l.classList.add("CTAT-hint-window");
    d.addComponentReference(d, l);
    d.getDivWrap().appendChild(l);
    f = document.createElement("div");
    l.appendChild(f);
    f.classList.add("CTAT-hint-window--hintcontent");
    f.setAttribute("pointer-events", "none");
    if (u) {
      h = document.createElement("button"), h.classList.add("CTAT-hint-window--previous"), h.innerHTML = u;
    } else {
      if (t) {
        h = document.createElementNS(CTATGlobals.NameSpace.svg, "svg");
        h.classList.add("CTAT-hint-window--previous");
        h.setAttributeNS(null, "viewBox", "0 0 82 20");
        var a = document.createElementNS(CTATGlobals.NameSpace.svg, "path");
        a.style.fill = "none";
        a.style.strokeWidth = "3px";
        a.style.strokeLinecap = "round";
        a.setAttributeNS(null, "d", "M7 10 h12 M7 10 m4 -4 l-4 4 4 4");
        a.setAttributeNS(null, "pointer-events", "none");
        h.appendChild(a);
        n && (a = document.createElementNS(CTATGlobals.NameSpace.svg, "text"), a.setAttributeNS(null, "pointer-events", "none"), a.textContent = n, a.setAttributeNS(null, "text-anchor", "middle"), a.setAttributeNS(null, "x", "50px"), a.setAttributeNS(null, "dominant-baseline", "middle"), a.setAttributeNS(null, "y", "50%"), h.appendChild(a));
      } else {
        h = document.createElement("button"), h.classList.add("CTAT-hint-window--previous"), a = document.createElement("span"), a.style.fontWeight = "bold", a.style.marginLeft = "6px", a.style.marginRight = "4px", a.textContent = "\u25c0", h.appendChild(a), n && (a.style.cssFloat = "left", h.appendChild(document.createTextNode(n)));
      }
    }
    h.addEventListener("click", function(a) {
      CTATShellTools.showPrevHint();
    }, !1);
    l.appendChild(h);
    p ? (k = document.createElement("button"), k.classList.add("CTAT-hint-window--next"), k.innerHTML = p) : t ? (k = document.createElementNS(CTATGlobals.NameSpace.svg, "svg"), k.classList.add("CTAT-hint-window--next"), k.setAttributeNS(null, "viewBox", "0 0 82 20"), a = document.createElementNS(CTATGlobals.NameSpace.svg, "path"), a.style.fill = "none", a.style.strokeWidth = "3px", a.style.strokeLinecap = "round", a.setAttributeNS(null, "d", "M75 10 h-12 M75 10 m-4 -4 l4 4 -4 4"), a.setAttributeNS(null, 
    "pointer-events", "none"), k.appendChild(a), m && (a = document.createElementNS(CTATGlobals.NameSpace.svg, "text"), a.setAttributeNS(null, "pointer-events", "none"), a.textContent = m, a.setAttributeNS(null, "text-anchor", "middle"), a.setAttributeNS(null, "x", "34px"), a.setAttributeNS(null, "dominant-baseline", "middle"), a.setAttributeNS(null, "y", "50%"), k.appendChild(a))) : (k = document.createElement("button"), k.classList.add("CTAT-hint-window--next"), a = document.createElement("span"), 
    a.style.fontWeight = "bold", a.style.marginRight = "6px", a.textContent = "\u25b6", m && (a.style.cssFloat = "right", k.appendChild(document.createTextNode(m))), k.appendChild(a));
    k.addEventListener("click", function(a) {
      CTATShellTools.showNextHint();
    }, !1);
    l.appendChild(k);
    var b = function(a) {
      "svg" === this.tagName.toLowerCase() ? a ? this.classList.remove("CTAT-svg-button--disabled") : this.classList.add("CTAT-svg-button--disabled") : (this.disabled = !a, a || (this.classList.remove("CTAT-hint-button--hover"), this.classList.remove("CTAT-hint-button--clicked")));
    };
    [h, k].forEach(function(a) {
      a.setEnabled = b.bind(a);
      a.classList.add("CTAT-hint-window--button");
      a.classList.add("CTAT-hint-button");
      a.addEventListener("mouseenter", function(a) {
        a.target.classList.add("CTAT-hint-button--hover");
      });
      a.addEventListener("mouseleave", function(a) {
        a.target.classList.remove("CTAT-hint-button--hover");
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
      a.addEventListener("mousedown", function(a) {
        a.target.classList.add("CTAT-hint-button--clicked");
      });
      a.addEventListener("mouseup", function(a) {
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
      a.addEventListener("click", function(a) {
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
    });
    CTATShellTools.registerFeedbackComponent(this, this.goNext, this.goPrevious, this.showHint, this.showFeedback);
    d.ctatdebug("Disabling previous and next ...");
    h.setEnabled(!1);
    k.setEnabled(!1);
  };
  this.setStyleHandler("OuterBorderColor", this.setBorderColor);
  this.SetText = this.showFeedback = function(a) {
    d.ctatdebug("showFeedback (" + a + ")");
    f && (f.innerHTML = a);
    h.setEnabled(!1);
    k.setEnabled(!1);
  };
  this.showHint = function(a) {
    d.ctatdebug("showHint ()");
    null === a ? (hints = a, hintIndex = 0, f.innerHTML = "", h.setEnabled(!1), k.setEnabled(!1)) : (hints = a, hintIndex = 0, this.setEnabled(!0), h.setEnabled(!1), k.setEnabled(!1), hints ? "" === hints[hintIndex] ? d.ctatdebug("Empty hint in list, bump") : (f.innerHTML = hints[hintIndex], 1 < hints.length ? (d.ctatdebug("We have more than one hint, enabling next button"), k.setEnabled(!0)) : d.ctatdebug("We only have one hint, leaving next button disabled")) : d.ctatdebug("Null hint in list, bump"));
  };
  this.setEnabled = function(a) {
    d.assignEnabled(a);
    null === d.getComponent() ? d.ctatdebug("Error pointer.getComponent()==null") : d.getComponent().disabled = !a;
  };
  this.goPrevious = function() {
    d.ctatdebug("goPrevious ()");
    hintIndex--;
    k.setEnabled(!0);
    0 >= hintIndex ? (hintIndex = 0, h.setEnabled(!1)) : h.setEnabled(!0);
    f.innerHTML = hints[hintIndex];
    var a = new CTATGuid, b = new CTATTutoringServiceMessageBuilder, a = a.guid(), c = new CTATSAI("previousButton", "ButtonPressed", "-1");
    b.createUntutoredActionMessage(a, c);
    var c = new CTATSAI("previousButton", "ButtonPressed", "hint request");
    commLoggingLibrary.logSemanticEvent(a, c, "HINT_REQUEST", "");
    b = d.getCurrentHint();
    c = new CTATMessage;
    c.setMessageType("AssociatedRules");
    c.assignSAI(logHintSAI);
    c.setTransactionID(a);
    commShell.processAssociatedRules(c, "HintWindow", b);
  };
  this.goNext = function() {
    d.ctatdebug("goNext ()");
    hintIndex++;
    h.setEnabled(!0);
    hintIndex > hints.length - 1 && (hintIndex = hints.length - 1);
    hintIndex > hints.length - 2 ? k.setEnabled(!1) : k.setEnabled(!0);
    f.innerHTML = hints[hintIndex];
    var a = new CTATGuid, b = new CTATTutoringServiceMessageBuilder, a = a.guid(), c = new CTATSAI("nextButton", "ButtonPressed", "-1");
    b.createUntutoredActionMessage(a, c);
    var c = new CTATSAI("nextButton", "ButtonPressed", "hint request");
    commLoggingLibrary.logSemanticEvent(a, c, "HINT_REQUEST", "");
    b = d.getCurrentHint();
    c = new CTATMessage;
    c.setMessageType("AssociatedRules");
    c.assignSAI(logHintSAI);
    c.setTransactionID(a);
    commShell.processAssociatedRules(c, "HintWindow", b);
  };
};
CTATHintWindow.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATHintWindow.prototype.constructor = CTATHintWindow;
CTAT.ComponentRegistry.addComponentType("CTATHintWindow", CTATHintWindow);
var CTATRadioButton = function(a, b, c, e, g) {
  CTAT.Component.Base.Clickable.call(this, "CTATRadioButton", "__undefined__", a, b, c, e, g);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var d = this, f = null, h = null, k = null, l = CTATRadioButton.Options.Placement.right;
  this.setSelection(this.getComponentGroup());
  this.setAction("UpdateRadioButton");
  this.setStyleHandler("BackgroundColor", null);
  this.init = function() {
    d.setInitialized(!0);
    f = document.createElement("div");
    f.classList.add("CTAT-radiobutton");
    h = document.createElement("input");
    h.type = "radio";
    h.id = CTATGlobalFunctions.gensym.div_id();
    h.value = d.getName();
    this.getComponentGroup() ? h.name = d.getComponentGroup() : this.getDivWrap() && $(this.getDivWrap()).attr("name") ? h.name = $(this.getDivWrap()).attr("name") : h.name = "radioButtonGroup";
    h.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    d.assignEnabled(!0);
    !0 === d.getEnabled() ? h.disabled = !1 : h.disabled = !0;
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.addComponentReference(d, f);
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    d.getDivWrap().appendChild(f);
    k = document.createElement("label");
    k.htmlFor = h.id;
    this.getText() ? k.textContent = d.getText() : a && (k.innerHTML = a);
    d.setComponent(f);
    d.setLabel(k);
    f.appendChild(h);
    f.appendChild(k);
    d.render();
    h.addEventListener("click", function(a) {
      d.updateSAI();
      d.processAction();
    });
    d.addSafeEventListener("focus", d.processFocus, h);
    this.setSelection(this.getComponentGroup());
    this.component.addEventListener("focus", this.processFocus);
  };
  var m = this.setText;
  this.setText = function(a) {
    m(a);
    null !== f && (k.textContent = this.getText());
  };
  this.setStyleHandler("buttonLabel", this.setText);
  var n = this.setEnabled;
  this.setEnabled = function(a) {
    n(a);
    null !== h && (h.disabled = !this.getEnabled());
  };
  this.setChecked = function(a) {
    null !== h && (h.checked = a);
  };
  this.getChecked = function() {
    return h.checked;
  };
  this.getRadioInput = function() {
    return h.checked ? h.value + ": " + k.textContent : "";
  };
  this.getLabelPlacement = function() {
    return l;
  };
  this.setLabelPlacement = function(a) {
    l = String(a);
    if (k && h) {
      switch(a = CTATRadioButton.Options.Placement, l.toLowerCase()) {
        case a.left:
          h.style.width = null;
          h.style.float = "left";
          break;
        case a.bottom:
          h.style.width = "100%";
          break;
        case a.top:
          f.appendChild(h);
          h.style.width = "100%";
          break;
        default:
          h.style.width = null, h.style.float = null;
      }
    }
  };
  this.setStyleHandler("labelPlacement", this.setLabelPlacement);
  this.reset = function() {
    d.ctatdebug(" reset ( " + d.getName() + ")");
    h.checked = !1;
    d.setEnabled(!0);
  };
  this.UpdateRadioButton = function(a) {
    0 <= a.indexOf(h.value) && d.setChecked(!0);
    d.ctatdebug("UpdateRadioButton ()");
  };
  this.updateSAI = function() {
    var a = $('div[data-ctat-component]:has(input[type="radio"][name="' + h.name + '"]:checked)'), b = "";
    1 === a.length && (b = $(a[0]).data("CTATComponent").getRadioInput());
    d.setSelection(h.name);
    d.setInput(b);
  };
  var p = function(a) {
    k.classList.add(a);
    h.classList.add(a);
  }, u = function(a) {
    k.classList.remove(a);
    h.classList.remove(a);
  };
  this.showCorrect = function(a) {
    u("CTAT--hint");
    u("CTAT--incorrect");
    (a ? 0 === a.getInput().indexOf(h.value) : 1) ? p("CTAT--correct") : u("CTAT-correct");
  };
  this.removeCorrect = function() {
    u("CTAT--correct");
  };
  this.showInCorrect = function(a) {
    u("CTAT--hint");
    u("CTAT--correct");
    (a ? 0 === a.getInput().indexOf(h.value) : 1) ? p("CTAT--incorrect") : u("CTAT-incorrect");
  };
  this.removeInCorrect = u.bind(this, "CTAT--incorrect");
  this.showHintHighlight = function(a) {
    this.removeCorrect();
    this.removeInCorrect();
    a ? p("CTAT--hint") : u("CTAT--hint");
  };
};
CTATRadioButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATRadioButton.prototype.constructor = CTATRadioButton;
CTATRadioButton.Options = {Placement:{left:"left", right:"right", top:"top", bottom:"bottom"}};
CTAT.ComponentRegistry.addComponentType("CTATRadioButton", CTATRadioButton);
var CTATTable = function(a, b, c, e, g) {
  CTAT.Component.Base.Graphical.call(this, "CTATTable", "__undefined__", a, b, c, e, g);
  var d = this;
  d.isTabIndexable = !1;
  var f = null, h = !1;
  this.setParameterHandler("FirstRowIsHeader", function(a) {
    h = CTATGlobalFunctions.stringToBoolean(a);
  });
  this.setParameterHandler("PasteSingleSAI", function(a) {
    CTATGlobalFunctions.stringToBoolean(a);
  });
  this.setParameterHandler("SpreadSheetMode", function(a) {
    CTATGlobalFunctions.stringToBoolean(a);
  });
  var k = 2;
  this.set_row_count = function(a) {
    k = parseInt(a);
  };
  this.setStyleHandler("num_rows", this.set_row_count);
  this.data_ctat_handlers.num_cols = this.set_row_count;
  this.set_col_count = function(a) {
    k = parseInt(a);
  };
  this.setStyleHandler("num_cols", this.set_col_count);
  this.data_ctat_handlers.num_rows = this.set_col_count;
  var l = "";
  this.setStyleHandler("HeaderHeight", function(a) {
    parseInt(a);
  });
  this.setStyleHandler("inspBackgroundColor", this.setBackgroundColor);
  this.setStyleHandler("HeaderBackground", function(a) {
  });
  this.init = function() {
    d.ctatdebug("init (" + d.getName() + ")");
    l = CTATGlobalFunctions.gensym.div_id();
    f = document.createElement("table");
    f.setAttribute("id", l);
    f.classList.add("resizable");
    f.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    d.setComponent(f);
    d.ctatdebug("Final location: " + d.getX() + "," + d.getY() + " with text: " + d.getText());
    d.setInitialized(!0);
    d.addComponentReference(d, f);
    d.getDivWrap().appendChild(f);
    d.render();
  };
  this.adjustTableContents = function() {
    d.ctatdebug("adjustTableContents()");
    var a = null, b = null, c = null, b = 0;
    if (h) {
      for (var a = f.createTHead(), b = a.insertRow(), e = 0;2 > e;e++) {
        c = document.createElement("th"), c.classList.add("CTAT-gen-component"), b.appendChild(c);
      }
      b = 1;
    }
    for (var a = f.createTBody(), g = b;g < k;g++) {
      for (b = a.insertRow(), e = 0;2 > e;e++) {
        c = b.insertCell(), c.classList.add("CTAT-gen-component");
      }
    }
    for (a = 0;a < f.rows.length;a++) {
      for (b = f.rows[a], c = 0;c < b.cells.length;c++) {
        var l = b.cells[c], w = d.getName() + ".R" + a + "C" + c;
        CTATShellTools.findComponent(w).forEach(function(a) {
          var b = d.getGrDescription();
          b.name = w;
          a.setCellContainer(l);
          a.setGrDescription(b);
          a = a.getDivWrap();
          null != a ? (a.parentNode.removeChild(a), a.style.position = null, a.style.top = null, a.style.left = null, l.appendChild(a)) : d.ctatdebug("Error: unable to get div wrapper from component");
        });
      }
    }
  };
};
CTATTable.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATTable.prototype.constructor = CTATTable;
CTAT.ComponentRegistry.addComponentType("CTATTable", CTATTable);
var CTATVariable = function() {
  this.value = this.name = "";
};
var CTATCurriculumService = function(a) {
  CTATBase.call(this, "CTATCurriculumService", "curriculum_service");
  var b = [], c = this;
  this.reset = function() {
    b = [];
  };
  this.addVariable = function(a, c) {
    var d = new CTATVariable;
    d.name = a;
    d.value = c;
    b.push(d);
  };
  this.sendSummary = function(e) {
    c.ctatdebug("sendSummary ()");
    var g = new CTATXML, d = e.getXMLObject();
    e = d.getElementsByTagName("ProblemSummary");
    e = $("<div>").html(e[0].innerHTML).text();
    g.xmlToString(d);
    var d = flashVars.getRawFlashVars(), g = d.curriculum_service_url, f = new CTATXML, h = f.parse(e), f = f.getElementAttr(h, "CompletionStatus");
    g ? ("complete" == f && (CTATScrim.scrim.nextProblemScrimUp(), a.assignMessageListener(c)), b = [], this.addVariable("user_guid", d.user_guid), this.addVariable("session_id", d.session_id), this.addVariable("authenticity_token", d.authenticity_token), this.addVariable("school_name", d.school_name), this.addVariable("summary", e), e = d.target_frame, f = d.reuse_swf, d = d.run_problem_url, this.addVariable("targetFrame", e), this.addVariable("reuseSWF", f), c.ctatdebug("targetFrame = " + e + ", reuseSwf " + 
    f + ", runProblemUrl " + d), (!f || !Boolean(f) && d) && parent.location.replace(d), a.send_post_variables(g, b)) : "complete" == f && CTATScrim.scrim.scrimUp("Congratulations, you are done with this problem.");
  };
  this.processOutgoing = function(a) {
    c.ctatdebug('CTATCurriculumService.processOutgoing("' + a + '")');
  };
  this.processIncoming = function(a) {
    c.ctatdebug('CTATCurriculumService.processIncoming("' + a + '")');
    a && (a = jQuery.parseJSON(a)) && "undefined" != typeof a.run_problem_url && a.run_problem_url && (c.ctatdebug("CTATCurriculumService.processIncoming() run_problem_url: " + a.run_problem_url), parent && parent.location && parent.location.replace(a.run_problem_url));
  };
  this.processOutgoing = function(a) {
    c.ctatdebug('CTATCurriculumService.processOutgoing("' + a + '")');
  };
  this.updateFlashVars = function(a) {
    c.ctatdebug("UpdateFlashVars ()");
  };
  this.checkProtocol = function(a) {
    return "localhost" == a || "127.0.0.1" == a ? !0 : null === /^http[s]?:\/\/([^\/]+)\//.exec(a) || 4096 <= a.length ? !1 : !0;
  };
};
CTATCurriculumService.prototype = Object.create(CTATBase.prototype);
CTATCurriculumService.prototype.constructor = CTATCurriculumService;
var CTATCommShell = function() {
  CTATBase.call(this, "CTATCommShell", "theShell");
  var a = null, b = this, c = null, e = null, g = {}, d = null, f = null, h = null, k = [], e = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  this.init = function(d) {
    this.ctatdebug("init ()");
    var c = flashVars.getRawFlashVars(), f = "http://";
    "https" == c.tutoring_service_communication && (f = "https://");
    c.remoteSocketURL && -1 != c.remoteSocketURL.indexOf("http") && (f = "");
    a = d;
    contextGUID = (new CTATGuid).guid();
    b.ctatdebug("processSkills ()");
    skillSet = new CTATSkillSet;
    d = flashVars.getRawFlashVars();
    null != d.skills && skillSet.fromXMLString(d.skills);
    b.updateSkillWindow(null);
    null == commMessageHandler && (commMessageHandler = new CTATMessageHandler, CTAT.ToolTutor.registerInterface(commMessageHandler));
    commMessageHandler.assignHandler(this);
    commMessageBuilder = new CTATTutoringServiceMessageBuilder;
    c.deliverymode && "review" == c.deliverymode && (c.Logging = "None");
    commLogMessageBuilder = new CTATLogMessageBuilder;
    commLibrary = new CTATCommLibrary;
    commLibrary.setSocketType(flashVars.getRawFlashVars().tutoring_service_communication);
    commLibrary.assignHandler(this);
    commLMSService = new CTATCurriculumService(commLibrary);
    null == commLoggingLibrary && (commLoggingLibrary = new CTATLoggingLibrary(!0));
    commLoggingLibrary.getLoggingCommLibrary().setFixedURL(flashVars.getRawFlashVars().log_service_url);
    flashVars.setTimeZone(null);
    new CTATHTMLManager;
    "" == c.info && this.ctatdebug("There is no info flash var");
    this.ctatdebug("Connecting to: " + f + c.remoteSocketURL + ":" + c.remoteSocketPort);
    commLibrary.sendXMLURL(commMessageBuilder.createSetPreferencesMessage(version), f + c.remoteSocketURL + ":" + c.remoteSocketPort);
    commLoggingLibrary.logSessionStart();
    new CTATSAI;
  };
  this.addEventListener = function(a) {
    k.push(a);
  };
  this.propagateShellEvent = function(a, b) {
    ctatdebug("propagateShellEvent (" + a + ")");
    for (var d = 0;d < k.length;d++) {
      k[d].processCommShellEvent(a, b);
    }
  };
  this.reset = function() {
    b.ctatdebug("reset ()");
    CTATGlobals.interfaceElement = null;
    commMessageHandler.reset();
  };
  this.getMessageHandler = function() {
    return this.commMessageHandler;
  };
  this.addStartStateHandler = function(a) {
    b.ctatdebug("addStartStateHandler ()");
    null == startStateHandlers && (startStateHandlers = []);
    startStateHandlers.push(a);
  };
  this.gradeComponent = function(a) {
    this.ctatdebug("gradeComponent (" + a.getName() + "," + a.getClassName() + ")");
    var d = CTATShellTools.findComponentByClass("CTATDoneButton");
    null != d && d != a ? d.moveHintHighlight(!1, null) : b.ctatdebug("Info: no done button available to reset");
    null != nameTranslator ? nameTranslator.translateFromCTAT(a.getName()) : this.ctatdebug("Info: no name translator provided, using as-is");
    null == a ? this.ctatdebug("Internal error, provided component is null") : (this.ctatdebug("Info: we have a valid component, grading ..."), "Do not tutor" == a.getTutorComponent() ? b.processComponentAction(a.getSAI(), !1) : (this.ctatdebug("Checking for back grading: " + a.getName()), "CTATTextArea" == a.getClassName() || "CTATTextInput" == a.getClassName() || "CTATTextField" == a.getClassName() ? (this.ctatdebug("Backgrading ..."), this.ctatdebug("Grading " + a.getClassName() + " with value: " + 
    a.getValue()), !0 === CTATGlobalFunctions.isBlank(a.getValue()) ? this.ctatdebug("Empty component, nothing to grade") : (a.updateSAI(), a = a.getSAI(), b.processComponentAction(a))) : (a = "CTATTableGoogle" == a.getClassName() ? new CTATSAI(a.getCurrentSelection(), "UpdateTextArea", a.getCurrentValue()) : a.getSAI(), b.processComponentAction(a))));
  };
  this.processMessage = function(a) {
    this.ctatdebug("processMessage ()");
    commMessageHandler.processMessage(a);
    this.ctatdebug("processMessage () done");
  };
  this.processStartProblem = function() {
    this.ctatdebug("processStartProblem ()");
    "google" == CTATConfig.external && this.showFeedback("The tutor is starting, please wait ...");
  };
  this.processStartState = function() {
    this.ctatdebug("processStartState ()");
    inStartState = !0;
    null != a ? (this.ctatdebug("Calling tutor.createInterface () ..."), a.createInterface()) : (this.ctatdebug("Error: no tutor object available, calling createInterface globally ..."), window.hasOwnProperty("createInterface") && window.createInterface());
    this.ctatdebug("Logging start of problem ...");
    null != commLoggingLibrary ? commLoggingLibrary.startProblem() : this.ctatdebug("Info: no logging library available!");
    this.ctatdebug("End of start state, inspecting suppressStudentFeedback ...");
    if (!0 === CTATGlobals.suppressStudentFeedback) {
      this.ctatdebug("Hiding hint button ...");
      var d = CTATShellTools.findComponentByClass("CTATHintButton");
      null != d && d.SetVisible(!1);
    }
    "google" == CTATConfig.external ? (b.ctatdebug("Calling google app script hint request driver ..."), addCall(new RPCObject("resetOnEditQueue", "dummy", "dummy"))) : this.ctatdebug("processStartState () done");
  };
  this.sendStartProblemMessage = function() {
    b.ctatdebug("sendStartProblemMessage()");
  };
  this.sendProblemSummaryRequest = function(a) {
    b.ctatdebug("sendProblemSummaryRequest()");
    a = (new CTATTutoringServiceMessageBuilder).createProblemSummaryRequestMessage();
    commLibrary.sendXML(a);
  };
  this.sendInterfaceDescriptionMessages = function() {
    b.ctatdebug("sendInterfaceDescriptionMessages ()");
  };
  this.processSerialization = function() {
    b.ctatdebug("processSerialization()");
    b.setText(this.label);
    this.styles = b.getGrDescription().styles;
    b.ctatdebug("Processing " + this.styles.length + " styles ...");
    for (var a in this.styles) {
      "CorrectColor" == a && (correctColor = styleValue), "IncorrectColor" == a && (incorrectColor = styleValue), "HintColor" == a && (hintColor = styleValue);
    }
  };
  this.processComponentAction = function(a, d, c, f) {
    b.ctatdebug("processComponentAction(" + a.getName() + " -> " + a.getSelection() + "," + a.getAction() + "," + a.getInput() + ")");
    this.showFeedback("");
    c = (new CTATGuid).guid();
    null != commLoggingLibrary ? 0 == inStartState && (b.ctatdebug("We're not in the start state, logging the action ..."), "scrim" == a.getSelection() ? ctatdebug("Not logging any scrim actions (for now)") : "hint" == a.getSelection() || "null.nextButton" == a.getSelection() || "null.previousButton" == a.getSelection() ? commLoggingLibrary.logSemanticEvent(c, a, "HINT_REQUEST", "") : commLoggingLibrary.logSemanticEvent(c, a, "ATTEMPT", "")) : this.ctatdebug("Info: no logging library available!");
    f = new CTATTutoringServiceMessageBuilder;
    var e = "", e = !1 !== d ? f.createInterfaceActionMessage(c, a) : f.createUntutoredActionMessage(c, a);
    commLibrary.sendXML(e);
  };
  this.onEditSuccess = function(a) {
    b.ctatdebug("onEditSuccess (" + a + ")");
    null == nameTranslator ? b.ctatdebug("Error: CTAT name translator not available") : -1 != a.indexOf(":") ? (b.ctatdebug("Bump"), b.showFeedback("You're asking for a hint for multiple cells, please select only a single cell.")) : (a = nameTranslator.translateToCTAT(a), b.ctatdebug("Info A1 notiation mapped to (if needed): " + a), a = new CTATSAI("hint", "ButtonPressed", a), b.processComponentAction(a), b.propagateShellEvent("REQUESTHINT", null), b.ctatdebug("onEditSuccess () done"));
  };
  this.onFailure = function(a) {
    b.ctatdebug("onFailure (" + a.message + ")");
  };
  this.onNOPEditSuccess = function(a) {
    b.ctatdebug("onNOPEditSuccess (" + a + ")");
  };
  this.onNOPFailure = function(a) {
    b.ctatdebug("onNOPFailure (" + a.message + ")");
  };
  this.requestHint = function() {
    b.ctatdebug("requestHint(external -> " + CTATConfig.external + ")");
    var a = null;
    if ("none" == CTATConfig.external) {
      b.ctatdebug("Calling built-in hint request driver ..."), CTATGlobals.Tab.previousFocus ? (a = new CTATSAI("hint", "ButtonPressed", "hint request"), CTATGlobals.Tab.previousFocus instanceof CTAT.Component.Base.SAIHandler ? (console.log("CTATGlobals.Tab.previousFocus!==null, requesting hint for: " + CTATGlobals.Tab.previousFocus.getSAI().getSelection()), a.addSelection(CTATGlobals.Tab.previousFocus.getSAI().getSelection()), a.addAction("PreviousFocus")) : b.ctatdebug("Current focus is not a CTAT component, can't ask for a hint yet")) : 
      (b.ctatdebug("CTATGlobals.Tab.previousFocus===null"), a = new CTATSAI("hint", "ButtonPressed", "hint request")), this.processComponentAction(a), this.propagateShellEvent("REQUESTHINT", null);
    } else {
      if ("google" == CTATConfig.external) {
        b.ctatdebug("Calling google app script hint request driver ...");
        try {
          google.script.run.withSuccessHandler(b.onEditSuccess).withFailureHandler(b.onFailure).getSheetSelectedRange();
        } catch (d) {
          b.ctatdebug("google.script.run: " + d.message);
        }
      } else {
        b.ctatdebug("'external' has configuration that doesn't match anything: " + CTATConfig.external);
      }
    }
  };
  this.processDone = function() {
    b.ctatdebug("processDone()");
    if (!0 === CTATGlobals.confirmDone) {
      CTATScrim.scrim.confirmScrimUp("Are you sure you are done?", this.processDoneContinue, this.processDoneCancel);
    } else {
      var a = new CTATSAI("done", "ButtonPressed", "-1");
      b.processComponentAction(a);
    }
  };
  this.processDoneContinue = function(a) {
    b.ctatdebug("processDoneContinue()");
    CTATScrim.scrim.scrimDown();
    a = new CTATSAI("done", "ButtonPressed", "-1");
    b.processComponentAction(a);
  };
  this.processDoneCancel = function(a) {
    b.ctatdebug("processDoneCancel()");
    CTATScrim.scrim.scrimDown();
    a = (new CTATGuid).guid();
    var d = new CTATSAI("ConfirmDone", "ButtonPressed", "no");
    commLoggingLibrary.logSemanticEvent(a, d, "ATTEMPT", "");
  };
  this.processCorrectAction = function(a) {
    b.ctatdebug("processCorrectAction()");
    a.setGradeResult("correct");
    this.clearFeedbackComponents();
    null != h && (ctatdebug("Calling custom grading processor ..."), h("CORRECT", a));
    var c = a.getSelection();
    if (g[c] && null != d) {
      d("INCORRECT", a);
    } else {
      var f = CTATShellTools.findComponent(c);
      if (null != f) {
        for (ctatdebug("Processing " + f.length + " components ..."), c = 0;c < f.length;c++) {
          ctatdebug("Check " + f[c].getName()), f[c] ? f[c].setCorrect && f[c].setCorrect(a) : b.ctatdebug("Internal error, component pointer is null");
        }
      } else {
        b.ctatdebug("Error: component is null for selection " + c);
      }
    }
    this.propagateShellEvent("CORRECT", a);
  };
  this.processInCorrectAction = function(a) {
    b.ctatdebug("processInCorrectAction()");
    a.setGradeResult("incorrect");
    null != h && (ctatdebug("Calling custom grading processor ..."), h("INCORRECT", a));
    var c = a.getSelection();
    if (g[c] && null != d) {
      d("INCORRECT", a);
    } else {
      var f = CTATShellTools.findComponent(c);
      if (null != f) {
        for (c = 0;c < f.length;c++) {
          ctatdebug("Calling setIncorrect on component (" + f[c].getClassName() + ")..."), f[c].setIncorrect && f[c].setIncorrect(a);
        }
      } else {
        b.ctatdebug("Error: component is null for selection " + c);
      }
    }
    this.propagateShellEvent("INCORRECT", a);
  };
  this.processHighlightMsg = function(a) {
    b.ctatdebug("processHighlightMsg()");
    var d = a.getSelection(), c = CTATShellTools.findComponent(d);
    if (null != c) {
      for (d = 0;d < c.length;d++) {
        c[d].setHintHighlight(!0, a);
      }
    } else {
      b.ctatdebug("Error: component is null for selection " + d);
    }
    this.propagateShellEvent("HIGHLIGHT", a);
    this.showFeedback(a.getHighlightMsg());
    null != f && f(a.getHighlightMsg());
  };
  this.processUnHighlightMsg = function(a) {
    b.ctatdebug("processUnHighlightMsg()");
    var d = a.getSelection(), c = CTATShellTools.findComponent(d);
    if (null != c) {
      for (d = 0;d < c.length;d++) {
        c[d].setHintHighlight(!1, null, a);
      }
    } else {
      b.ctatdebug("Error: component is null for selection " + d);
    }
    this.propagateShellEvent("UNHIGHLIGHT", a);
  };
  this.processAssociatedRules = function(a, d, c) {
    b.ctatdebug("processAssociatedRules()");
    if (0 == commMessageHandler.getInStartState()) {
      logHintSAI = a.getSAI();
      var f = "", e = new CTATActionEvaluationData("");
      b.ctatdebug("Found tutor advice: " + c);
      "Hint" == d || "HintWindow" == d ? (ctatdebug("Preparing log message to indicate a hint response", "commShell"), e.setCurrentHintNumber(hintIndex + 1), e.setTotalHintsAvailable(hints.length), e.setEvaluation("HINT"), f = "HINT_MSG", hints[hintIndex] && (c = hints[hintIndex])) : ("Correct" == a.getIndicator() ? e.setEvaluation("CORRECT") : e.setEvaluation("INCORRECT"), f = "RESULT");
      ctatdebug("Adding custom field names ...");
      d = [];
      var g = [];
      d.push("step_id");
      g.push(a.getProperty("StepID"));
      var h = a.getSkillsObject();
      b.updateSkillWindow(h);
      var k = [];
      null != h ? k = h.getTouched() : ctatdebug("Error: skills object is null in message");
      ctatdebug("Sending log message ...");
      null != commLoggingLibrary ? commLoggingLibrary.logTutorResponse(a.getTransactionID(), logHintSAI, f, "", e, c, k, d, g) : this.ctatdebug("Info: no logging library available!");
      "done" == logHintSAI.getSelection() && "Correct" == a.getIndicator() && (a = commMessageBuilder.createProblemSummaryRequestMessage(), commLibrary.sendXML(a));
    } else {
      b.updateSkillWindow(null);
    }
    b.ctatdebug("processAssociatedRules() done");
  };
  this.processBuggyMessage = function(a) {
    b.ctatdebug("processBuggyMessage()");
    this.showFeedback(a.getBuggyMsg());
  };
  this.processSuccessMessage = function(a) {
    b.ctatdebug("processSuccessMessage()");
    this.showFeedback(a.getSuccessMessage());
  };
  this.processInterfaceAction = function(a) {
    b.ctatdebug("processInterfaceAction(" + a.getSelection() + "," + a.getAction() + "," + a.getInput() + ")", "commShell");
    b.ctatdebug("Log the message ...");
    0 == inStartState ? (b.ctatdebug("This is not a start state TPA so it should be logged", "commShell"), null != commLoggingLibrary ? commLoggingLibrary.logSemanticEvent(a.getTransactionID(), a.getSAI(), "ATTEMPT", "tutor-performed") : this.ctatdebug("Info: no logging library available!")) : b.ctatdebug("Info for incoming TPA, commMessageHandler.getInStartState (): " + commMessageHandler.getInStartState());
    if ("root" == a.getSelection()) {
      b.ctatdebug("Info: selection is 'root', we'll call the function straight up ...");
      var d = a.getAction();
      a = a.getInput();
      b.ctatdebug("Calling as: " + d + "(" + a + ")");
      try {
        window[d](a);
      } catch (c) {
        b.ctatdebug("Internal error: unable to execute function: " + c.message);
      }
    } else {
      if (d = CTATShellTools.findComponent(a.getSelection()), null == d) {
        b.ctatdebug("Internal error: unable to find pointer to component object");
      } else {
        b.ctatdebug("Call the action on the component(s) -> (" + d.length + ")...");
        for (var f = 0;f < d.length;f++) {
          b.ctatdebug("About to call " + a.getAction() + " (" + a.getInput() + ") on: " + a.getSelection());
          var e = d[f];
          e.executeSAI(a);
          b.ctatdebug("Method executed, continuing with post-processing ...");
          1 == commMessageHandler.getInStartState() && e.setEnabled(!1);
        }
        b.ctatdebug("processInterfaceAction() Done");
      }
    }
  };
  this.processInterfaceIdentification = function(a) {
    b.ctatdebug("processInterfaceIdentification()");
  };
  this.processAuthorModeChange = function(a) {
    b.ctatdebug("processAuthorModeChange()");
  };
  this.processShowHintsMessage = function(a) {
    b.ctatdebug("processShowHintsMessage()");
  };
  this.processConfirmDone = function(a) {
    b.ctatdebug("processConfirmDone()");
  };
  this.processVersionInfo = function(a) {
    b.ctatdebug("processVersionInfo()");
  };
  this.processTutoringServiceAlert = function(a) {
    b.ctatdebug("processTutoringServiceAlert()");
    for (var d = "", c = 0;c < a.length;c++) {
      var f = a[c];
      "ErrorType" == e.getElementName(f) && e.getNodeTextValue(f);
      "Details" == e.getElementName(f) && (d = e.getNodeTextValue(f));
    }
    CTATScrim.scrim.scrimUp(d);
  };
  this.processTutoringServiceError = function(a) {
    b.ctatdebug("processTutoringServiceError()");
    for (var d = "", c = "", f = 0;f < a.length;f++) {
      var g = a[f];
      "ErrorType" == e.getElementName(g) && (d = e.getNodeTextValue(g));
      "Details" == e.getElementName(g) && (c = e.getNodeTextValue(g));
    }
    CTATScrim.scrim.scrimDown();
    CTATScrim.scrim.errorScrimUp(d + " - " + c);
  };
  this.processProblemSummaryResponse = function(a) {
    b.ctatdebug("processProblemSummaryResponse()");
    var d = new CTATXML;
    if (null != c) {
      window[c](d.xmlToString(a.getXMLObject()));
    } else {
      commLMSService.sendSummary(a);
    }
    lastMessage = !0;
  };
  this.processProblemRestoreEnd = function(a) {
    b.ctatdebug("processProblemRestoreEnd()");
  };
  this.clearFeedbackComponents = function() {
    b.ctatdebug("clearFeedbackComponents ()");
    CTATShellTools.showHints(null);
  };
  this.processHintResponse = function(a, d) {
    b.ctatdebug("processHintResponse()");
    CTATShellTools.showHints(d);
    var c = a.getSAI();
    if (null != c) {
      if (c = c.getSelection(), null != c) {
        if (b.ctatdebug("Highlighting selection for hint: " + c), c = CTATShellTools.findComponent(c), null != c) {
          for (var f = 0;f < c.length;f++) {
            1 == detailedFeedback && (0 === f ? c[f].moveHintHighlight && c[f].moveHintHighlight(!0, a) : c[f].setHintHighlight && c[f].setHintHighlight(!0, a));
          }
        } else {
          b.ctatdebug("Unable to find component name in list: " + c);
        }
      } else {
        b.ctatdebug("Error: no highlight selection present in SAI");
      }
    } else {
      b.ctatdebug("Warning: no SAI found in highlight message");
    }
    detailedFeedback = !0;
    b.ctatdebug("processHintResponse() done");
  };
  this.showHighlightSelection = function(a, d) {
    b.ctatdebug("showHighlightSelection (" + a + ")");
    var c = CTATShellTools.findComponent(a);
    if (null != c) {
      for (var f = 0;f < c.length;f++) {
        1 == detailedFeedback && (0 === f ? c[f].moveHintHightlight && c[f].moveHintHighlight(!0, d) : c[f].setHintHighlight && c[f].setHintHighlight(!0, d));
      }
    } else {
      b.ctatdebug("Unable to find component name in list: " + c);
    }
  };
  this.globalReset = function() {
    b.ctatdebug("globalReset ()");
    scriptElement = "";
    CTATShellTools.listComponents();
    for (var a = 0;a < components.length;a++) {
      var d = components[a].getComponentPointer();
      null != d && (b.ctatdebug("Calling reset on regular component ..."), d.reset());
    }
    this.reset();
  };
  this.nextProblem = function(a) {
    b.ctatdebug("nextProblem ()");
    if (CTATGlobalFunctions.isBlank(a)) {
      b.ctatdebug("Message is blank, requesting next problem ..."), a = flashVars.getRawFlashVars().run_problem_url, commLibrary.send(a);
    } else {
      b.ctatdebug("Message contains html data, writing ...");
      try {
        document.close();
      } catch (d) {
        alert("Error closing document: " + d.message);
      }
      try {
        document.write(a);
      } catch (d) {
        alert("Error writing document: " + d.message);
      }
    }
  };
  this.updateSkillWindow = function(a) {
    b.ctatdebug("updateSkillWindow()");
    var d = CTATShellTools.findComponentByClass("CTATSkillWindow");
    null !== d ? null != a ? d.updateSkillSet(a) : d.drawComponent() : b.ctatdebug("Info: no skill window available");
  };
  this.processComponentFocus = function(a) {
    b.ctatdebug("processComponentFocus(" + a.getName() + "," + a.getClassName() + ")");
    "CTATTextInput" == a.getClassName() || "CTATTextField" == a.getClassName() || "CTATTextArea" == a.getClassName() ? (CTATGlobals.selectedTextInput = a, null !== mobileAPI && !0 === mobileAPI.getEnabled() && mobileAPI.processTextFocus(a.getX(), a.getY(), a.getWidth(), a.getHeight())) : CTATGlobals.selectedTextInput = null;
    b.ctatdebug("processComponentFocus() done");
  };
  this.showFeedback = function(a) {
    b.ctatdebug("showFeedback(" + a + ")");
    CTATShellTools.showFeedback(a);
    null != f && f(a);
  };
  this.assignFeedbackHandler = function(a) {
    b.ctatdebug("assignFeedbackHandler()");
    f = a;
  };
  this.gradeSAI = function(a, d, c) {
    b.ctatdebug("gradeSAI()");
    g[a] = c;
    a = new CTATSAI(a, d, c);
    b.processComponentAction(a, !0, !0);
  };
  this.assignGradingHandler = function(a) {
    b.ctatdebug("assignGradingHandler()");
    d = a;
  };
  this.assignAnonymousGradingProcessor = function(a) {
    h = a;
  };
  this.assignDoneProcessor = function(a) {
    c = a;
  };
};
CTATCommShell.prototype = Object.create(CTATBase.prototype);
CTATCommShell.prototype.constructor = CTATCommShell;
var CTATDoneButton = function(a, b, c, e, g) {
  CTAT.Component.Base.Clickable.call(this, "done", "CTATDoneButton", a, b, c, e, g);
  this.setName("done");
  this.setClassName("CTATDoneButton");
  this.setText(CTATGlobals.languageManager.getString("DONE"));
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("TextAlign", null);
  var d = this;
  this.init = function() {
    this.setInitialized(!0);
    var a = document.createElement("button");
    a.classList.add("unselectable");
    a.classList.add("CTAT-done-button");
    this.setComponent(a);
    var b = document.createElement("div");
    b.style.pointerEvents = "none";
    b.textContent = "\u2714";
    b.style.position = "relative";
    b.style.top = "-5px";
    a.appendChild(b);
    this.getText() ? (b.style.fontSize = Math.floor(2 * this.getHeight() / 3) + "px", b.style.height = "60%", b = document.createElement("div"), b.style.pointerEvents = "none", b.textContent = this.getText(), a.appendChild(b)) : (b.style.fontSize = this.getHeight() + "px", b.style.height = null);
    this.getDivWrap().appendChild(a);
    a.addEventListener("mouseenter", function(a) {
      a.target.classList.add("CTAT-done-button--hover");
    });
    a.addEventListener("mouseleave", function(a) {
      a.target.classList.remove("CTAT-done-button--hover");
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("mousedown", function(a) {
      a.target.classList.add("CTAT-done-button--clicked");
    });
    a.addEventListener("mouseup", function(a) {
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("click", function(a) {
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("click", this.processClick);
    a.addEventListener("focus", this.processFocus);
  };
  this.processClick = function(a) {
    d.getEnabled() && commShell && commShell.processDone();
  };
};
CTATDoneButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATDoneButton.prototype.constructor = CTATDoneButton;
CTAT.ComponentRegistry.addComponentType("CTATDoneButton", CTATDoneButton);
var CTATHintButton = function(a, b, c, e, g) {
  CTAT.Component.Base.Clickable.call(this, "hint", "CTATHintButton", a, b, c, e, g);
  this.setName("hint");
  this.setClassName("CTATHintButton");
  this.isTabIndexable = !1;
  this.setText(CTATGlobals.languageManager.getString("HINT"));
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("TextAlign", null);
  this.setStyleHandler("BorderColor", null);
  this.setStyleHandler("FontFace", null);
  this.setStyleHandler("TextColor", null);
  this.init = function() {
    this.setInitialized(!0);
    var a = document.createElement("button");
    this.setComponent(a);
    a.classList.add("unselectable");
    a.classList.add("CTAT-hint-button");
    var b = document.createElement("div");
    b.style.fontWeight = "bold";
    b.style.pointerEvents = "none";
    b.textContent = "?";
    a.appendChild(b);
    this.getText() ? (b.style.fontSize = Math.floor(.6 * this.getHeight()) + "px", b.style.height = "60%", b.style.position = null, b.style.top = null, b = document.createElement("div"), b.style.pointerEvents = "none", b.textContent = this.getText(), a.appendChild(b)) : (b.style.fontSize = this.getHeight() + "px", b.style.height = null, b.style.position = "relative", b.style.top = "-.08em");
    this.getDivWrap().appendChild(a);
    a.addEventListener("mouseenter", function(a) {
      a.target.classList.add("CTAT-hint-button--hover");
    });
    a.addEventListener("mouseleave", function(a) {
      a.target.classList.remove("CTAT-hint-button--hover");
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("mousedown", function(a) {
      a.target.classList.add("CTAT-hint-button--clicked");
    });
    a.addEventListener("mouseup", function(a) {
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("click", function(a) {
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("click", this.processClick);
  };
  var d = this;
  this.processClick = function(a) {
    d.getEnabled() && commShell && commShell.requestHint();
  };
};
CTATHintButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATHintButton.prototype.constructor = CTATHintButton;
CTAT.ComponentRegistry.addComponentType("CTATHintButton", CTATHintButton);
var CTATTutor = {drawing:!1, onMobile:!1};
Object.defineProperty(CTATTutor, "parser", {get:function() {
  this._parser || (CTATConfig.parserType_is_XML() ? (ctatdebug("Creating XML parser ..."), this._parser = new CTATXML) : CTATConfig.parserType_is_JSON() && (this._parser = new CTATJSON));
  return this._parser;
}});
CTATTutor.initializeHTMLComponents = function() {
  ctatdebug("initializeHTMLComponents ()");
  for (var a in CTAT.ComponentRegistry) {
    var b = CTAT.ComponentRegistry[a];
    $("." + a).each(function() {
      var a = new b;
      console.log("Attaching CTAT tutoring to " + $(this).attr("id"));
      $(this).attr("id") ? a.setName($(this).attr("id")) : (this.id = CTATGlobalFunctions.gensym.div_id(), a.setName(this.id));
      a.setDivWrapper(this);
      a.processAttributes();
      a.init();
      a.processTabOrder();
      $(this).data("CTATComponent", a);
    });
  }
  ctatdebug("initializeHTMLComponents () done");
};
function assignNameTranslator(a) {
  nameTranslator = a;
}
CTATTutor.drawTutor = function() {
  if (!0 !== this.drawing) {
    this.drawing = !0;
    for (var a in CTATShellTools.component_descriptions) {
      var b = CTATShellTools.component_descriptions[a].getComponentPointer();
      null !== b && b.drawComponent();
    }
    this.drawing = !1;
  }
};
CTATTutor.initialize = function() {
  var a = navigator.userAgent.toLowerCase();
  0 < a.search("iphone") ? CTATTutor.onMobile = !0 : 0 < a.search("ipod") ? CTATTutor.onMobile = !0 : 0 < a.search("android") && (CTATTutor.onMobile = !0);
  a = getSafeElementById("pageor");
  null !== a && !1 === CTATTutor.onMobile && (a.style.display = "none");
  ctatdebug("initialize ()");
  this.initializeHTMLComponents();
  var a = flashVars.getRawFlashVars(), b = !0;
  a && a.previewMode && 0 == a.previewMode && (b = !1);
  1 == b && (commShell = new CTATCommShell, commShell.init(CTATTutor));
};
CTATTutor.createInterface = function() {
  ctatdebug("createInterface (" + Object.keys(CTATShellTools.component_descriptions).length + ")");
  if (CTATGlobals.interfaceElement) {
    ctatdebug("Re-creating interface ...");
    var a = CTATTutor.parser.getElementChildren(CTATGlobals.interfaceElement);
    CTATTutor.createStaticInterface(null, a, null);
  }
  for (var b in CTATShellTools.component_descriptions) {
    a = CTATShellTools.component_descriptions[b];
    if (!a) {
      alert("Internal error parsing component at index " + b);
      return;
    }
    if (!a.name) {
      alert("Internal error parsing component at index " + b + " (no name attribute available)");
      return;
    }
    if (-1 == a.name.indexOf("null.")) {
      if (ctatdebug("Component: " + a.name + ", type: " + a.type), "CTATCommShell" == a.type) {
        if (commShell && commShell.setName(a.name), "CTATCommShell" == a.type) {
          ctatdebug("Tutor dimensions: " + a.width + "x" + a.height);
          var c = getSafeElementById(ctatcontainer);
          null !== c ? (ctatdebug("Setting canvas dimensions from: " + c.width + "px, " + c.height + "px, to: " + a.width + "px, " + a.height + "px"), c.width = a.width, c.height = a.height, c.style.width = a.width, c.style.height = a.height, ctatdebug("Canvas dimensions now: " + c.width + "px, " + c.height + "px")) : ctatdebug("Error: tutor canvas is null, can't adjust size");
          c = getSafeElementById(ctatcontainer);
          null !== c ? (c.style.width = a.width + "px", c.style.height = a.height + "px") : ctatdebug("Error: tutor container is null, can't adjust size");
        }
      } else {
        CTAT.ComponentRegistry.hasOwnProperty(a.type) ? (ctatdebug("Creating (" + a.type + ") :" + a.name), c = new CTAT.ComponentRegistry[a.type](a, a.x, a.y, a.width, a.height), c.setName(a.name), "CTATTextInput" != a.type && "CTATTextArea" != a.type || c.setEnabled(!0), c.setTabIndex(a.tabIndex), a.setComponentPointer(c), c.initialize(), "CTATRadioButton" != a.type && "CTATCheckBox" != a.type || c.setLabelPlacement(c.getLabelPlacement()), ctatdebug(c.getDivWrap())) : ctatdebug("ERROR: Unrecognized component type " + 
        a.type + " for " + a.name);
      }
    }
  }
  this.postProcess();
  this.drawTutor();
  ctatdebug("Tutor has been intialized from BRD, recalculating canvas position and size ...");
  CTATScrim.scrim ? CTATScrim.scrim.scrimDown() : ctatdebug("CRITICAL: CTATScrim.scrim is null!");
};
CTATTutor.postProcess = function() {
  ctatdebug("postProcess ()");
  for (var a in CTATShellTools.component_descriptions) {
    var b = CTATShellTools.component_descriptions[a].getComponentPointer();
    null !== b ? ("CTATTable" == b.getClassName() && b.adjustTableContents(), "CTATScrollPaneComponent" != b.getClassName() && "CTATComponentContainerReference" != b.getClassName() && "CTATGroupingComponent" != b.getClassName() || b.postProcess()) : ctatdebug("Error: component pointer " + a + " is null");
  }
};
CTATTutor.createStaticInterface = function(a, b, c) {
  ctatdebug("createStaticInterface ()");
  var e = getSafeElementById(ctatcontainer);
  null !== a && (e = a);
  for (a = 0;a < b.length;a++) {
    var g = b[a];
    ctatdebug(this.parser.getElementName(g));
    if ("timeline" == this.parser.getElementName(g)) {
      ctatdebug("Timeline node found, obtaining visual elements ...");
      b = this.parser.getElementChildren(g);
      this.createStaticInterface(null, b, null);
      break;
    }
    if ("ctatcomponent" == this.parser.getElementName(g)) {
      var d = this.parser.getElementAttr("instance");
      c && (ctatdebug("Registering existence of CTAT component on MovieClip container: " + d), c.addComponent(d));
    }
    var f, h, k, l;
    "shape" == this.parser.getElementName(g) && (f = this.parser.getElementAttr(g, "x"), h = this.parser.getElementAttr(g, "y"), k = this.parser.getElementAttr(g, "width"), l = this.parser.getElementAttr(g, "height"), d = this.parser.getElementAttr(g, "instance"), ctatdebug("Creating shape: " + d + " at: " + f + "," + h + "," + k + "," + l), k = "data:image/png;base64, " + this.parser.getNodeTextValue(g), l = new Image, l.setAttribute("style", "position: absolute; top: " + h + "px; left:" + f + "px; z-index:" + 
    CTATGlobalFunctions.gensym.z_index() + ";"), l.setAttribute("id", d), l.setAttribute("src", k), e.appendChild(l));
    "statictext" == this.parser.getElementName(g) && (f = this.parser.getElementAttr(g, "x"), h = this.parser.getElementAttr(g, "y"), k = this.parser.getElementAttr(g, "width"), l = this.parser.getElementAttr(g, "height"), d = this.parser.getElementAttr(g, "instance"), ctatdebug("Creating static text: " + d + " at: " + f + "," + h + "," + k + "," + l), k = "data:image/png;base64, " + this.parser.getNodeTextValue(g), l = new Image, l.setAttribute("style", "position: absolute; top: " + h + "px; left:" + 
    f + "px; z-index:" + CTATGlobalFunctions.gensym.z_index() + ";"), l.setAttribute("id", d), l.setAttribute("src", k), e.appendChild(l));
    "statictext" == this.parser.getElementName(g) && (d = this.parser.getElementAttr("instance"), ctatdebug("Creating movieclip: " + d), f = this.parser.getElementAttr(g, "x"), h = this.parser.getElementAttr(g, "y"), k = this.parser.getElementAttr(g, "width"), l = this.parser.getElementAttr(g, "height"), f = new CTATMovieClip(d, f, h, k, l), h = f.wrapComponent(e), ctatdebug("Created movieclip: " + d + " at: " + f.x + "," + f.y + "," + f.width + "," + f.height), movieclips.push(f), g = this.parser.getElementChildren(g), 
    this.createStaticInterface(h, g, f));
  }
};
CTATTutor.runTutor = function(a) {
  ctatdebug("runTutor ()");
  !0 === CTATGlobals.tutorRunning ? ctatdebug("The tutor is already running") : (skillSet = new CTATSkillSet, window.onerror = function(a, c, e) {
    var g = new CTATHTMLManager;
    ctatdebug(g.htmlEncode(a) + " in " + c + ", line " + e);
  }, centerTutorContainer(), CTATTutor.initialize(), CTATGlobals.tutorRunning = !0, ctatdebug("runTutor () ... all set"));
};
CTATTutor.getSingleParameterValues = function(a) {
  var b = [], c = [];
  c.push(parseQueryString());
  c.push(CTATGlobalFunctions.generateDefaultConfiguration());
  "undefined" != typeof flashVars && flashVars && flashVars.getRawFlashVars() && c.push(flashVars.getRawFlashVars());
  "undefined" != typeof FlashVars && FlashVars && c.push(FlashVars);
  c.forEach(function(c, g) {
    a.forEach(function(a) {
      ctatdebug("CTATTutor.getSingleParameterValues nameLists[" + g + "][" + a + "]: " + c[a]);
      var f;
      (f = c[a]) && b.push(f);
      (f = c[a.toUpperCase()]) && b.push(f);
    });
  }, b);
  ctatdebug("CTATTutor.getSingleParameterValues() returning " + b);
  return b;
};
function initTutor(a, b, c, e) {
  console.trace("initTutor() #aFlashVars " + (a ? a.length : null) + ", usingFlash " + e);
  ctatdebug("initTutor() #aFlashVars " + (a ? a.length : null) + ", usingFlash " + e);
  null == e && (e = CTATTutor.getSingleParameterValues(["student_interface", "swf_name"]).some(function(a) {
    return 0 <= a.search(/[.]swf$/i);
  }));
  e && CTATScrim.scrim.scrimDown();
  CTATCommLibrary.setAuthenticityToken(CTATTutor.getSingleParameterValues(["authenticity_token"]));
  b && (ctatcontainer = b);
  (b = document.getElementById(ctatcontainer)) && b.classList.add("CTATTutorContainer");
  b = getSafeElementById("debugtraces");
  null !== b && (useDebugging = !0 === b.checked ? !0 : !1);
  b = [];
  b = null != a && void 0 != a ? tutorPrep(a) : tutorPrep(FlashVars);
  ctatdebug("initTutor() tempFlashVars[question_file] " + b.question_file);
  "javascript" == String(b.tutoring_service_communication).toLowerCase() && ("undefined" != typeof CTATExampleTracer && CTATExampleTracer ? CTAT.ToolTutor.registerTutor(new CTATExampleTracer) : CTATScrim.scrim.warningScrimUp('Tutoring service communication parameter is "JavaScript" but class\nCTATExampleTracer is missing. Use a different ctat-*.js script.'));
  ctatdebug("initTutor ()");
  "none" == b.session_id && (b.session_id = "qa-test_" + guid());
  null == flashVars && (flashVars = new CTATFlashVars, flashVars.assignRawFlashVars(b));
  "applet" == b.tutoring_service_communication && deployJava.runApplet({id:"TSApplet", width:150, height:10}, {jnlp_href:"/ctat_applet/TSApplet.jnlp"}, "1.6");
  e || CTATTutor.runTutor(b);
}
function receiveFromTutor() {
  ctatdebug("receiveFromTutor ()");
}
function saveAndQuit() {
  ctatdebug("saveAndQuit ()");
}
function prepTutorArea() {
  console.log("prepTutorArea ()");
  initTutor(CTATGlobalFunctions.generateDefaultConfiguration());
}
window.prepTutorArea = prepTutorArea;
function assignAnonymousGradingProcessor(a) {
  commShell.assignAnonymousGradingProcessor(a);
}
function gradeAnonymousComponent(a, b, c) {
  ctatdebug("gradeAnonymousComponent ()");
  a = new CTATSAI(a, b, c);
  commShell.processComponentAction(a);
}
function testTutor(a) {
  ctatdebug("testTutor ()");
  window.onerror = function(a, c, e) {
    var g = new CTATHTMLManager;
    ctatdebug(g.htmlEncode(a) + " in " + c + ", line " + e);
  };
  tutorPrep(a);
  skillSet = new CTATSkillSet;
  flashVars = new CTATFlashVars;
  flashVars.assignRawFlashVars(a);
  (new CTATCommLibrary).send("http://augustus.pslc.cs.cmu.edu/crossdomain.xml");
}
function centerTutorContainer() {
  ctatdebug("centerTutorContainer ()");
  var a = getSafeElementById(ctatcontainer);
  if (null == a) {
    ctatdebug("Tutor container not found, bump");
  } else {
    var b = null;
    if (flashVars) {
      var b = flashVars.getRawFlashVars(), c = "550", e = "450", c = a.offsetWidth, e = a.offsetHeight;
      b && b.width && b.height && (ctatdebug("We have raw width and height variables in our flashvars: " + b.width + "," + b.height), c = b.width, e = b.height);
      b.centerTutor ? 1 == b.centerTutor && (ctatdebug("Moving tutor over by: " + ("-" + Number(c / 2) + "px 0 0 -" + Number(e / 2) + "px;")), a.style.position = "absolute", a.style.top = "0", a.style.left = "0", a.style.right = "0", a.style.bottom = "0", a.style.margin = "auto") : ctatdebug("The tutor is not configured to center the container, bump");
    } else {
      ctatdebug("No flashvars yet, bump");
    }
  }
}
function checkTutorCanvas() {
  ctatdebug("checkTutorCanvas ()");
  var a = getSafeElementById(ctatcontainer), b = getSafeElementById("main-canvas"), c = flashVars.getRawFlashVars(), e = "550", g = "450";
  a && (ctatdebug("Recording the actual CSS width and height: " + a.offsetWidth + " , " + a.offsetHeight), e = a.offsetWidth, g = a.offsetHeight);
  c && c.width && c.height && (ctatdebug("We have tutor size flashvars, using those instead: " + c.width + " , " + c.height), e = c.width, g = c.height);
  null === b ? (ctatdebug("No canvas available, creating ..."), b = document.createElement("canvas"), b.id = "main-canvas", b.innerHTML = "Your browser does not support CTAT. Please update or use another browser.", ctatdebug("Setting canvas to: 0,0," + e + " , " + g), getSafeElementById(ctatcontainer).appendChild(b)) : (ctatdebug("Setting canvas to: 0 , 0, " + e + " , " + g), b.style.top = "0", b.style.left = "0");
  b.style.width = e + "px";
  b.style.height = g + "px";
  return b;
}
;function init() {
  console.log("IncludeTutor.init()");
  CTATConfig.external = "none";
  CTATConfig.parserType = "xml";
  commMessageHandler = new CTATMessageHandler;
  CTAT.ToolTutor.registerInterface(commMessageHandler);
  initTutor();
}
;Number.EPSILON || (Number.EPSILON = 2.220446049250313E-16);
Number.MAX_SAFE_INTEGER || (Number.MAX_SAFE_INTEGER = 9007199254740991);
Number.MIN_SAFE_INTEGER || (Number.MIN_SAFE_INTEGER = -9007199254740991);
Number.isFinite || (Number.isFinite = function(a) {
  return "number" !== typeof a || a !== a || Infinity === a || -Infinity === a ? !1 : !0;
});
Number.isInteger || (Number.isInteger = function(a) {
  return "number" === typeof a && isFinite(a) && -9007199254740992 < a && 9007199254740992 > a && Math.floor(a) === a;
});
Math.cbrt || (Math.cbrt = function(a) {
  var b = Math.pow(Math.abs(a), 1 / 3);
  return 0 > a ? -b : b;
});
Math.clz32 || (Math.clz32 = function(a) {
  return (a = Number(a) >>> 0) ? 32 - a.toString(2).length : 32;
});
Math.expm1 || (Math.expm1 = function(a) {
  return Math.exp(a) - 1;
});
Math.fround || (Math.fround = function(a) {
  var b = new Float32Array(1);
  return b[0] = a, b[0];
});
Math.hypot || (Math.hypot = function() {
  for (var a = 0, b = arguments.length, c = 0;c < b;c++) {
    if (Infinity === arguments[c] || -Infinity === arguments[c]) {
      return Infinity;
    }
    a += arguments[c] * arguments[c];
  }
  return Math.sqrt(a);
});
Math.imul || (Math.imul = function(a, b) {
  var c = a & 65535, e = b & 65535;
  return c * e + ((a >>> 16 & 65535) * e + c * (b >>> 16 & 65535) << 16 >>> 0) | 0;
});
Math.log10 || (Math.log10 = function(a) {
  return Math.log(a) / Math.LN10;
});
Math.log1p || (Math.log1p = function(a) {
  return Math.log(1 + a);
});
Math.log2 || (Math.log2 = function(a) {
  return Math.log(a) / Math.LN2;
});
Math.sign || (Math.sign = function(a) {
  return isNaN(a) ? NaN : 0 === a ? a : 0 < a ? 1 : -1;
});
Math.trunc || (Math.trunc = function(a) {
  return 0 > a ? Math.ceil(a) : Math.floor(a);
});
Math.sinh || (Math.sinh = function(a) {
  a = Math.exp(a);
  return (a - 1 / a) / 2;
});
Math.cosh || (Math.cosh = function(a) {
  a = Math.exp(a);
  return (a + 1 / a) / 2;
});
Math.tanh || (Math.tanh = function(a) {
  if (Infinity === a) {
    return 1;
  }
  if (-Infinity === a) {
    return -1;
  }
  a = Math.exp(2 * a);
  return (a - 1) / (a + 1);
});
Math.asinh || (Math.asinh = function(a) {
  return -Infinity === a ? a : Math.log(a + Math.sqrt(a * a + 1));
});
Math.acosh || (Math.acosh = function(a) {
  return a + Math.sqrt(a * a - 1);
});
Math.atanh || (Math.atanh = function(a) {
  return Math.log((1 + a) / (1 - a)) / 2;
});
Array.prototype.indexOf || (Array.prototype.indexOf = function(a, b) {
  var c;
  if (null == this) {
    throw new TypeError('"this" is null or not defined');
  }
  var e = Object(this), g = e.length >>> 0;
  if (0 === g) {
    return -1;
  }
  c = +b || 0;
  Infinity === Math.abs(c) && (c = 0);
  if (c >= g) {
    return -1;
  }
  for (c = Math.max(0 <= c ? c : g - Math.abs(c), 0);c < g;) {
    if (c in e && e[c] === a) {
      return c;
    }
    c++;
  }
  return -1;
});
Array.prototype.lastIndexOf || (Array.prototype.lastIndexOf = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b, c = Object(this), e = c.length >>> 0;
  if (0 === e) {
    return -1;
  }
  b = e - 1;
  1 < arguments.length && (b = Number(arguments[1]), b != b ? b = 0 : 0 != b && b != 1 / 0 && b != -(1 / 0) && (b = (0 < b || -1) * Math.floor(Math.abs(b))));
  for (b = 0 <= b ? Math.min(b, e - 1) : e - Math.abs(b);0 <= b;b--) {
    if (b in c && c[b] === a) {
      return b;
    }
  }
  return -1;
});
Array.prototype.every || (Array.prototype.every = function(a, b) {
  var c, e;
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var g = Object(this), d = g.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  1 < arguments.length && (c = b);
  for (e = 0;e < d;) {
    var f;
    if (e in g && (f = g[e], !a.call(c, f, e, g))) {
      return !1;
    }
    e++;
  }
  return !0;
});
Array.prototype.some || (Array.prototype.some = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b = Object(this), c = b.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  for (var e = 2 <= arguments.length ? arguments[1] : void 0, g = 0;g < c;g++) {
    if (g in b && a.call(e, b[g], g, b)) {
      return !0;
    }
  }
  return !1;
});
Array.prototype.filter || (Array.prototype.filter = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b = Object(this), c = b.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  for (var e = [], g = 2 <= arguments.length ? arguments[1] : void 0, d = 0;d < c;d++) {
    if (d in b) {
      var f = b[d];
      a.call(g, f, d, b) && e.push(f);
    }
  }
  return e;
});
Array.prototype.forEach || (Array.prototype.forEach = function(a, b) {
  var c, e;
  if (null == this) {
    throw new TypeError(" this is null or not defined");
  }
  var g = Object(this), d = g.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  1 < arguments.length && (c = b);
  for (e = 0;e < d;) {
    var f;
    e in g && (f = g[e], a.call(c, f, e, g));
    e++;
  }
});
Array.prototype.map || (Array.prototype.map = function(a, b) {
  var c, e, g;
  if (null == this) {
    throw new TypeError(" this is null or not defined");
  }
  var d = Object(this), f = d.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  1 < arguments.length && (c = b);
  e = Array(f);
  for (g = 0;g < f;) {
    var h;
    g in d && (h = d[g], h = a.call(c, h, g, d), e[g] = h);
    g++;
  }
  return e;
});
Array.prototype.reduce || (Array.prototype.reduce = function(a) {
  if (null === this || "undefined" === typeof this) {
    throw new TypeError("Array.prototype.reduce called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  var b = Object(this), c = b.length >>> 0, e = 0, g;
  if (2 <= arguments.length) {
    g = arguments[1];
  } else {
    for (;e < c && !e in b;) {
      e++;
    }
    if (e >= c) {
      throw new TypeError("Reduce of empty array with no initial value");
    }
    g = b[e++];
  }
  for (;e < c;e++) {
    e in b && (g = a(g, b[e], e, b));
  }
  return g;
});
Array.prototype.reduceRight || (Array.prototype.reduceRight = function(a) {
  if (null === this || "undefined" === typeof this) {
    throw new TypeError("Array.prototype.reduce called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  var b = Object(this), c = (b.length >>> 0) - 1, e;
  if (2 <= arguments.length) {
    e = arguments[1];
  } else {
    for (;0 <= c && !c in b;) {
      c--;
    }
    if (0 > c) {
      throw new TypeError("Reduce of empty array with no initial value");
    }
    e = b[c--];
  }
  for (;0 <= c;c--) {
    c in b && (e = a(e, b[c], c, b));
  }
  return e;
});
Array.from || (Array.from = function() {
  var a = Object.prototype.toString, b = function(b) {
    return "function" === typeof b || "[object Function]" === a.call(b);
  }, c = Math.pow(2, 53) - 1;
  return function(a) {
    var g = Object(a);
    if (null == a) {
      throw new TypeError("Array.from requires an array-like object - not null or undefined");
    }
    var d, f;
    if (1 < arguments.length) {
      d = arguments[1];
      if (!b(d)) {
        throw new TypeError("Array.from: when provided, the second argument must be a function");
      }
      2 < arguments.length && (f = arguments[2]);
    }
    var h;
    h = Number(g.length);
    h = isNaN(h) ? 0 : 0 !== h && isFinite(h) ? (0 < h ? 1 : -1) * Math.floor(Math.abs(h)) : h;
    h = Math.min(Math.max(h, 0), c);
    for (var k = b(this) ? Object(new this(h)) : Array(h), l = 0, m;l < h;) {
      m = g[l], k[l] = d ? "undefined" === typeof f ? d(m, l) : d.call(f, m, l) : m, l += 1;
    }
    k.length = h;
    return k;
  };
}());
Array.of || (Array.of = function() {
  return Array.prototype.slice.call(arguments);
});
Array.prototype.copyWithin || (Array.prototype.copyWithin = function(a, b, c) {
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var e = Object(this), g = e.length >>> 0;
  a >>= 0;
  a = 0 > a ? Math.max(g + a, 0) : Math.min(a, g);
  b >>= 0;
  b = 0 > b ? Math.max(g + b, 0) : Math.min(b, g);
  c = void 0 === c ? g : c >> 0;
  g = Math.min((0 > c ? Math.max(g + c, 0) : Math.min(c, g)) - b, g - a);
  c = 1;
  b < a && a < b + g && (c = -1, b += g - 1, a += g - 1);
  for (;0 < g;) {
    b in e ? e[a] = e[b] : delete e[a], b += c, a += c, g--;
  }
  return e;
});
Array.prototype.fill || (Array.prototype.fill = function(a, b, c) {
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var e = Object(this), g = e.length >>> 0;
  b >>= 0;
  b = 0 > b ? Math.max(g + b, 0) : Math.min(b, g);
  c = void 0 === c ? g : c >> 0;
  for (g = 0 > c ? Math.max(g + c, 0) : Math.min(c, g);b < g;) {
    e[b] = a, b++;
  }
  return e;
});
Array.prototype.find || (Array.prototype.find = function(a, b) {
  if (null == this) {
    throw new TypeError("Array.prototype.find called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError("predicate must be a function");
  }
  for (var c = Object(this), e = c.length >>> 0, g, d = 0;d < e;d++) {
    if (d in c && (g = c[d], a.call(b, g, d, c))) {
      return g;
    }
  }
});
Array.prototype.findIndex || (Array.prototype.findIndex = function(a, b) {
  if (null == this) {
    throw new TypeError("Array.prototype.find called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError("predicate must be a function");
  }
  for (var c = Object(this), e = c.length >>> 0, g, d = 0;d < e;d++) {
    if (d in c && (g = c[d], a.call(b, g, d, c))) {
      return d;
    }
  }
  return -1;
});
Array.prototype.includes || (Array.prototype.includes = function(a, b) {
  var c = Object(this), e = parseInt(c.length) || 0;
  if (0 === e) {
    return !1;
  }
  var g = parseInt(b) || 0;
  0 <= g || (g = e + g, 0 > g && (g = 0));
  for (var d;g < e;) {
    d = c[g];
    if (a === d || a !== a && d !== d) {
      return !0;
    }
    g++;
  }
  return !1;
});
Date.prototype.toISOString || function() {
  function a(a) {
    a = String(a);
    1 === a.length && (a = "0" + a);
    return a;
  }
  Date.prototype.toISOString = function() {
    return this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "." + String((this.getUTCMilliseconds() / 1E3).toFixed(3)).slice(2, 5) + "Z";
  };
}();
String.prototype.startsWith || (String.prototype.startsWith = function(a, b) {
  b = b || 0;
  return this.lastIndexOf(a, b) === b;
});
String.prototype.endsWith || (String.prototype.endsWith = function(a, b) {
  var c = this.toString();
  if (void 0 === b || b > c.length) {
    b = c.length;
  }
  b -= a.length;
  c = c.indexOf(a, b);
  return -1 !== c && c === b;
});
String.prototype.includes || (String.prototype.includes = function() {
  return -1 !== String.prototype.indexOf.apply(this, arguments);
});
String.fromCodePoint || function() {
  var a = function() {
    try {
      var a = {}, b = Object.defineProperty, c = b(a, a, a) && b;
    } catch (e) {
    }
    return c;
  }(), b = String.fromCharCode, c = Math.floor, e = function() {
    var a = [], d, f, e = -1, k = arguments.length;
    if (!k) {
      return "";
    }
    for (var l = "";++e < k;) {
      f = Number(arguments[e]);
      if (!isFinite(f) || 0 > f || 1114111 < f || c(f) != f) {
        throw RangeError("Invalid code point: " + f);
      }
      65535 >= f ? a.push(f) : (f -= 65536, d = (f >> 10) + 55296, f = f % 1024 + 56320, a.push(d, f));
      if (e + 1 == k || 16384 < a.length) {
        l += b.apply(null, a), a.length = 0;
      }
    }
    return l;
  };
  a ? a(String, "fromCodePoint", {value:e, configurable:!0, writable:!0}) : String.fromCodePoint = e;
}();
String.prototype.codePointAt || function() {
  var a = function(a) {
    if (null == this) {
      throw TypeError();
    }
    var c = String(this), e = c.length, g = a ? Number(a) : 0;
    g != g && (g = 0);
    if (!(0 > g || g >= e)) {
      return a = c.charCodeAt(g), 55296 <= a && 56319 >= a && e > g + 1 && (c = c.charCodeAt(g + 1), 56320 <= c && 57343 >= c) ? 1024 * (a - 55296) + c - 56320 + 65536 : a;
    }
  };
  Object.defineProperty ? Object.defineProperty(String.prototype, "codePointAt", {value:a, configurable:!0, writable:!0}) : String.prototype.codePointAt = a;
}();
String.prototype.repeat || (String.prototype.repeat = function(a) {
  if (null == this) {
    throw new TypeError("can't convert " + this + " to object");
  }
  var b = "" + this;
  a = +a;
  a != a && (a = 0);
  if (0 > a) {
    throw new RangeError("repeat count must be non-negative");
  }
  if (Infinity == a) {
    throw new RangeError("repeat count must be less than infinity");
  }
  a = Math.floor(a);
  if (0 == b.length || 0 == a) {
    return "";
  }
  if (268435456 <= b.length * a) {
    throw new RangeError("repeat count must not overflow maximum string size");
  }
  for (var c = "";;) {
    1 == (a & 1) && (c += b);
    a >>>= 1;
    if (0 == a) {
      break;
    }
    b += b;
  }
  return c;
});
"undefined" === typeof Iterator && (Iterator = function(a) {
  if (!(this instanceof arguments.callee)) {
    return new arguments.callee(a);
  }
  var b = 0, c = [];
  if (a && "object" === typeof a) {
    if (Array.isArray(a)) {
      for (;c.length < a.length;) {
        c.push(a[c.length]);
      }
    } else {
      for (var e in a) {
        a.hasOwnProperty(e) && c.push(e);
      }
    }
    this.next = function() {
      return b < c.length ? {value:c[b++], done:!1} : {value:void 0, done:!0};
    };
  }
}, Iterator.prototype = Object.create(Object.prototype), Iterator.prototype.constructor = Iterator);
"undefined" === typeof Map || Map.prototype.keys || (Map.prototype.keys = function() {
  var a = [];
  this.forEach(function(b, c) {
    a.push(c);
  });
  return new Iterator(a);
});
"undefined" === typeof Map || Map.prototype.values || (Map.prototype.values = function() {
  var a = [];
  this.forEach(function(b, c) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Map || Map.prototype.entries || (Map.prototype.entries = function() {
  var a = [];
  this.forEach(function(b, c) {
    a.push([c, b]);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.keys || (Set.prototype.keys = function() {
  var a = [];
  this.forEach(function(b) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.values || (Set.prototype.values = function() {
  var a = [];
  this.forEach(function(b) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.entries || (Set.prototype.entries = function() {
  var a = [];
  this.forEach(function(b) {
    a.push([b, b]);
  });
  return new Iterator(a);
});
(function(a) {
  function b() {
    var a = arguments[0], d = b.cache;
    d[a] && d.hasOwnProperty(a) || (d[a] = b.parse(a));
    return b.format.call(null, d[a], arguments);
  }
  function c(a) {
    return Object.prototype.toString.call(a).slice(8, -1).toLowerCase();
  }
  var e = /[^s]/, g = /[def]/, d = /^[^\x25]+/, f = /^\x25{2}/, h = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/, k = /^([a-z_][a-z_\d]*)/i, l = /^\.([a-z_][a-z_\d]*)/i, m = /^\[(\d+)\]/, n = /^[\+\-]/;
  b.format = function(a, d) {
    var f = 1, h = a.length, k = "", l = [], m, p, A, r, B = !0, q = "";
    for (m = 0;m < h;m++) {
      if (k = c(a[m]), "string" === k) {
        l[l.length] = a[m];
      } else {
        if ("array" === k) {
          A = a[m];
          if (A[2]) {
            for (k = d[f], p = 0;p < A[2].length;p++) {
              if (!k.hasOwnProperty(A[2][p])) {
                throw Error(b("[sprintf] property '%s' does not exist", A[2][p]));
              }
              k = k[A[2][p]];
            }
          } else {
            k = A[1] ? d[A[1]] : d[f++];
          }
          "function" == c(k) && (k = k());
          if (e.test(A[8]) && "number" != c(k) && isNaN(k)) {
            throw new TypeError(b("[sprintf] expecting number but found %s", c(k)));
          }
          g.test(A[8]) && (B = 0 <= k);
          switch(A[8]) {
            case "b":
              k = k.toString(2);
              break;
            case "c":
              k = String.fromCharCode(k);
              break;
            case "d":
              k = parseInt(k, 10);
              break;
            case "e":
              k = A[7] ? k.toExponential(A[7]) : k.toExponential();
              break;
            case "f":
              k = A[7] ? parseFloat(k).toFixed(A[7]) : parseFloat(k);
              break;
            case "o":
              k = k.toString(8);
              break;
            case "s":
              k = (k = String(k)) && A[7] ? k.substring(0, A[7]) : k;
              break;
            case "u":
              k >>>= 0;
              break;
            case "x":
              k = k.toString(16);
              break;
            case "X":
              k = k.toString(16).toUpperCase();
          }
          if (!B || g.test(A[8]) && A[3]) {
            q = B ? "+" : "-", k = k.toString().replace(n, "");
          }
          p = A[4] ? "0" == A[4] ? "0" : A[4].charAt(1) : " ";
          r = A[6] - (q + k).length;
          r = A[6] ? Array(r + 1).join(p) : "";
          l[l.length] = A[5] ? q + k + r : 0 == p ? q + r + k : r + q + k;
        }
      }
    }
    return l.join("");
  };
  b.cache = {};
  b.parse = function(a) {
    for (var b = [], c = [], e = 0;a;) {
      if (null !== (b = d.exec(a))) {
        c[c.length] = b[0];
      } else {
        if (null !== (b = f.exec(a))) {
          c[c.length] = "%";
        } else {
          if (null !== (b = h.exec(a))) {
            if (b[2]) {
              var e = e | 1, g = [], n = b[2], p = [];
              if (null !== (p = k.exec(n))) {
                for (g[g.length] = p[1];"" !== (n = n.substring(p[0].length));) {
                  if (null !== (p = l.exec(n))) {
                    g[g.length] = p[1];
                  } else {
                    if (null !== (p = m.exec(n))) {
                      g[g.length] = p[1];
                    } else {
                      throw new SyntaxError("[sprintf] failed to parse named argument key");
                    }
                  }
                }
              } else {
                throw new SyntaxError("[sprintf] failed to parse named argument key");
              }
              b[2] = g;
            } else {
              e |= 2;
            }
            if (3 === e) {
              throw Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            }
            c[c.length] = b;
          } else {
            throw new SyntaxError("[sprintf] unexpected placeholder");
          }
        }
      }
      a = a.substring(b[0].length);
    }
    return c;
  };
  var p = function(a, d, c) {
    c = (d || []).slice(0);
    c.splice(0, 0, a);
    return b.apply(null, c);
  };
  "undefined" !== typeof exports ? (exports.sprintf = b, exports.vsprintf = p) : (a.sprintf = b, a.vsprintf = p, "function" === typeof define && define.amd && define(function() {
    return {sprintf:b, vsprintf:p};
  }));
})("undefined" === typeof window ? this : window);
var CTATHintPolicyEnum = function() {
};
Object.defineProperty(CTATHintPolicyEnum, "HINTS_UNBIASED", {enumerable:!0, configurable:!1, writable:!1, value:"Always Follow Best Path"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_CURRENT_SELECTION_ONLY", {enumerable:!0, configurable:!1, writable:!1, value:"Bias Hints by Current Selection Only"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_PRIOR_ERROR_ONLY", {enumerable:!0, configurable:!1, writable:!1, value:"Bias Hints by Prior Error Only"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_ALL", {enumerable:!0, configurable:!1, writable:!1, value:"Use Both Kinds of Bias"});
Object.defineProperty(CTATHintPolicyEnum, "DEFAULT", {enumerable:!0, configurable:!1, writable:!1, value:CTATHintPolicyEnum.HINTS_BIASED_BY_ALL});
CTATHintPolicyEnum.prototype = Object.create(Object.prototype);
CTATHintPolicyEnum.prototype.constructor = CTATHintPolicyEnum;
CTATHintPolicyEnum.lookup = function(a) {
  for (policy in CTATHintPolicyEnum) {
    if (CTATHintPolicyEnum[policy] == a) {
      return CTATHintPolicyEnum[policy];
    }
  }
  return CTATHintPolicyEnum.DEFAULT;
};
"undefined" !== typeof module && (module.exports = CTATHintPolicyEnum);
var CTATExampleTracerException = function(a) {
  CTATBase.call(this, "CTATExampleTracerException", "");
  this.toString = function() {
    return a;
  };
};
CTATExampleTracerException.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerException.prototype.constructor = CTATExampleTracerException;
"undefined" !== typeof module && (module.exports = CTATExampleTracerException);
var CTATMsgType = function() {
  CTATBase.call(this, "CTATMsgType", "");
};
CTATMsgType.findProperty = function(a, b) {
  var c = a.toLowerCase(), e = "<" + b.toLowerCase() + ">", g = c.indexOf(e) + e.length, c = c.indexOf("</" + b.toLowerCase() + ">");
  if (g < e.length || 0 > c) {
    return null;
  }
  e = {};
  e.start = g;
  e.end = c;
  return e;
};
CTATMsgType.makeValues = function(a) {
  if (null == a) {
    return "";
  }
  if ("string" == typeof a) {
    return a;
  }
  if (a.constructor && "Array" == a.constructor.name) {
    if (!a.length) {
      return "";
    }
    for (var b = 0, c, e = "<value>" + (null == (c = a[b++]) ? "" : c.toString());b < a.length;) {
      e += "</value><value>" + (null == (c = a[b++]) ? "" : c.toString());
    }
    return e + "</value>";
  }
  return a.outerHTML ? a.outerHTML : a.toString();
};
CTATMsgType.setProperty = function(a, b, c) {
  var e = CTATMsgType.findProperty(a, b), g = "";
  e ? (g = a.slice(0, e.start), g += CTATMsgType.makeValues(c), g += a.slice(e.end, a.length)) : (e = a.indexOf("</properties>"), g = a.slice(0, e), g += "<" + b + ">" + CTATMsgType.makeValues(c) + "</" + b + ">", g += a.slice(e, a.length));
  return g;
};
CTATMsgType.getProperty = function(a, b) {
  var c = CTATMsgType.findProperty(a, b);
  return c ? a.slice(c.start, c.end) : "";
};
CTATMsgType.valueToArray = function(a) {
  if (!a.startsWith("<value>")) {
    return null;
  }
  var b = a.substring(7);
  if (!a.endsWith("</value>")) {
    return null;
  }
  b = b.substring(0, b.length - 8);
  b = b.split("</value><value>");
  ctatdebug("valueToArray(" + a + ") returns " + b);
  return b;
};
CTATMsgType.getValue = function(a, b) {
  var c = CTATMsgType.valueToArray(a);
  return !c || c.length <= b ? null : c[b];
};
CTATMsgType.getMessageType = function(a) {
  return CTATMsgType.getProperty(a, "MessageType");
};
CTATMsgType.getTransactionID = function(a) {
  return CTATMsgType.getProperty(a, CTATMessage.TRANSACTION_ID_TAG);
};
CTATMsgType.setTransactionID = function(a, b) {
  return CTATMsgType.setProperty(a, CTATMessage.TRANSACTION_ID_TAG, b);
};
CTATMsgType.isCorrectOrIncorrect = function(a) {
  return "string" == typeof a ? CTATMsgType.CorrectTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.hasTextFeedback = function(a) {
  return "string" == typeof a ? CTATMsgType.TextFeedbackTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.isHintResponse = function(a) {
  return "string" == typeof a ? CTATMsgType.HintResponseTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.isDoneMessage = function(a) {
  var b = CTATMsgType.getProperty(a, "Selection");
  a = CTATMsgType.getProperty(a, "Action");
  if (!b || !a) {
    return !1;
  }
  b = b.toString().toLowerCase();
  a = a.toString().toLowerCase();
  var c = CTATMsgType.DONE.toLowerCase();
  if (c != b && c != CTATMsgType.getValue(b, 0)) {
    return !1;
  }
  b = CTATMsgType.BUTTON_PRESSED.toLowerCase();
  return b != a && b != CTATMsgType.getValue(a, 0) ? !1 : !0;
};
CTATMsgType.getSAIArraysFromElement = function(a, b) {
  for (var c = {selection:[], action:[], input:[]}, e = b.getElementChildren(a), g = 0;g < e.length;g++) {
    var d = e[g];
    switch(b.getElementName(d)) {
      case "Selection":
        for (var d = b.getElementChildren(d), f = 0;f < d.length;f++) {
          c.selection.push(b.getNodeTextValue(d[f]));
        }
        break;
      case "Action":
        d = b.getElementChildren(d);
        for (f = 0;f < d.length;f++) {
          c.action.push(b.getNodeTextValue(d[f]));
        }
        break;
      case "Input":
        d = b.getElementChildren(d);
        for (f = 0;f < d.length;f++) {
          c.input.push(b.getNodeTextValue(d[f]));
        }
        break;
      case "properties":
        return CTATMsgType.getSAIArraysFromElement(d, b);
    }
  }
  return c;
};
Object.defineProperty(CTATMsgType, "CorrectTypes", {enumerable:!1, configurable:!1, writable:!1, value:{correctaction:1, incorrectaction:1, lispcheckaction:1}});
Object.defineProperty(CTATMsgType, "TextFeedbackTypes", {enumerable:!1, configurable:!1, writable:!1, value:{showhintsmessage:1, successmessage:1, buggymessage:1, wrongusermessage:1, nohintmessage:1, highlightmsg:1, showhintsmessagefromlisp:1}});
Object.defineProperty(CTATMsgType, "HintResponseTypes", {enumerable:!1, configurable:!1, writable:!1, value:{showhintsmessage:1, nohintmessage:1, showhintsmessagefromlisp:1}});
Object.defineProperty(CTATMsgType, "BUGGY_MSG", {enumerable:!1, configurable:!1, writable:!1, value:"BuggyMsg"});
Object.defineProperty(CTATMsgType, "DONE", {enumerable:!1, configurable:!1, writable:!1, value:"Done"});
Object.defineProperty(CTATMsgType, "BUTTON_PRESSED", {enumerable:!1, configurable:!1, writable:!1, value:"ButtonPressed"});
Object.defineProperty(CTATMsgType, "DEFAULT_STUDENT_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Student"});
Object.defineProperty(CTATMsgType, "DEFAULT_TOOL_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Tutor"});
Object.defineProperty(CTATMsgType, "UNGRADED_TOOL_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Tutor (unevaluated)"});
Object.defineProperty(CTATMsgType, "DEFAULT_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:CTATMsgType.DEFAULT_STUDENT_ACTOR});
Object.defineProperty(CTATMsgType, "ANY_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Any"});
Object.defineProperty(CTATMsgType, "SHOW_ALL_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Show All Feedback"});
Object.defineProperty(CTATMsgType, "DELAY_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Delay Feedback"});
Object.defineProperty(CTATMsgType, "HIDE_ALL_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Hide All Feedback"});
Object.defineProperty(CTATMsgType, "HIDE_BUT_COMPLETE", {enumerable:!1, configurable:!1, writable:!1, value:"Hide feedback but require all steps"});
Object.defineProperty(CTATMsgType, "HIDE_BUT_ENFORCE", {enumerable:!1, configurable:!1, writable:!1, value:"Hide feedback but enforce constraints"});
Object.defineProperty(CTATMsgType, "DEFAULT_OUT_OF_ORDER_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"Instead of the step you are working on, please work on the highlighted step."});
Object.defineProperty(CTATMsgType, "NOT_DONE_MSG", {enumerable:!1, configurable:!1, writable:!1, value:"I'm sorry, but you are not done yet. Please continue working."});
Object.defineProperty(CTATMsgType, "PREVIOUS_FOCUS", {enumerable:!1, configurable:!1, writable:!1, value:"PreviousFocus"});
Object.defineProperty(CTATMsgType, "ASSOCIATED_RULES", {enumerable:!1, configurable:!1, writable:!1, value:"AssociatedRules"});
Object.defineProperty(CTATMsgType, "BEGIN_GO_TO_STATE", {enumerable:!1, configurable:!1, writable:!1, value:"BeginGoToState"});
Object.defineProperty(CTATMsgType, "END_GO_TO_STATE", {enumerable:!1, configurable:!1, writable:!1, value:"EndGoToState"});
Object.defineProperty(CTATMsgType, "BUGGY_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"BuggyMessage"});
Object.defineProperty(CTATMsgType, "CORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"CorrectAction"});
Object.defineProperty(CTATMsgType, "HINT_REQUEST", {enumerable:!1, configurable:!1, writable:!1, value:"HintRequest"});
Object.defineProperty(CTATMsgType, "INCORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"InCorrectAction"});
Object.defineProperty(CTATMsgType, "INTERFACE_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"InterfaceAction"});
Object.defineProperty(CTATMsgType, "INTERFACE_IDENTIFICATION", {enumerable:!1, configurable:!1, writable:!1, value:"InterfaceIdentification"});
Object.defineProperty(CTATMsgType, "PROBLEM_RESTORE_END", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemRestoreEnd"});
Object.defineProperty(CTATMsgType, "PROBLEM_SUMMARY_REQUEST", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemSummaryRequest"});
Object.defineProperty(CTATMsgType, "PROBLEM_SUMMARY_RESPONSE", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemSummaryResponse"});
Object.defineProperty(CTATMsgType, "SET_PREFERENCES", {enumerable:!1, configurable:!1, writable:!1, value:"SetPreferences"});
Object.defineProperty(CTATMsgType, "SHOW_HINTS_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"ShowHintsMessage"});
Object.defineProperty(CTATMsgType, "SUCCESS_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"SuccessMessage"});
Object.defineProperty(CTATMsgType, "START_STATE_END", {enumerable:!1, configurable:!1, writable:!1, value:"StartStateEnd"});
Object.defineProperty(CTATMsgType, "STATE_GRAPH", {enumerable:!1, configurable:!1, writable:!1, value:"StateGraph"});
Object.defineProperty(CTATMsgType, "UNTUTORED_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"UntutoredAction"});
Object.defineProperty(CTATMsgType, "CompletionValue", {enumerable:!1, configurable:!1, writable:!1, value:["incomplete", "complete"]});
CTATMsgType.prototype = Object.create(CTATBase.prototype);
CTATMsgType.prototype.constructor = CTATMsgType;
"undefined" !== typeof module && (module.exports = CTATMsgType);
var CTATVariableTableCount = 0, CTATVariableTable = function() {
  function a(b) {
    var c = {}, d;
    for (d in b) {
      !0 === b.hasOwnProperty(d) && (c[d] = "object" !== typeof b[d] ? b[d] : a(b[d]));
    }
    return c;
  }
  CTATBase.call(this, "CTATVariableTable", "");
  CTATVariableTableCount++;
  var b = {}, c = this;
  this.toString = function() {
    var a = "", c;
    for (c in b) {
      0 < a.length && (a += ", "), a = a + c + "=" + b[c];
    }
    return "{ " + a + " }";
  };
  this.clone = function() {
    ctatdebug("CTATVariableTable --\x3e in clone; this " + this + ", this.getTable() " + this.getTable);
    var c = new CTATVariableTable;
    ctatdebug("CTATVariableTable --\x3e in clone; copy " + c + ", copy.setTable() " + c.setTable);
    c.setTable(a(b));
    ctatdebug("CTATVariableTable --\x3e out of clone");
    return c;
  };
  this.put = function(a, g) {
    c.ctatdebug("CTATVariableTable.put(" + a + ", " + g + ") typeof value " + typeof g);
    var d;
    if (0 > a.indexOf(".")) {
      b[a] = g;
    } else {
      var f = a.split(".");
      if ("object" !== typeof b[f[0]] || null === b[f[0]]) {
        b[f[0]] = {};
      }
      d = b[f[0]];
      for (var h = 1;h < f.length - 1;h++) {
        if ("object" !== typeof d[f[h]] || null === d[f[h]]) {
          d[f[h]] = {}, d = d[f[h]];
        }
      }
      d[f[h]] = g;
    }
    return c;
  };
  this.getTable = function() {
    return b;
  };
  this.setTable = function(a) {
    b = a;
  };
  this.get = function(a) {
    if (0 > a.indexOf(".")) {
      return null === b[a] || "undefined" === typeof b[a] ? null : b[a];
    }
    var c = a.split(".");
    if (null === b[c[0]] || "undefined" === typeof b[c[0]]) {
      return null;
    }
    a = b[c[0]];
    for (var d = 1;d < c.length - 1;d++) {
      if (null === a[c[d]] || "undefined" === typeof a[c[d]]) {
        return null;
      }
      a = a[c[d]];
    }
    return null === a[c[d]] || "undefined" === typeof a[c[d]] ? null : a[c[d]];
  };
};
Object.defineProperty(CTATVariableTable, "serialVersionUID", {enumerable:!1, configurable:!1, writable:!1, value:"201403071830L"});
CTATVariableTable.standardizeType = function(a) {
  if ("string" != typeof a || 1 > a.trim().length) {
    return a;
  }
  if (Boolean(!0).toString() == a) {
    return !0;
  }
  if (Boolean(!1).toString() == a) {
    return !1;
  }
  if ("null" == a) {
    return null;
  }
  var b = Number(a);
  return isNaN(b) ? a : b;
};
CTATVariableTable.prototype = Object.create(CTATBase.prototype);
CTATVariableTable.prototype.constructor = CTATVariableTable;
"undefined" !== typeof module && (module.exports = CTATVariableTable);
var CTATLinkGroup = function() {
  CTATBase.call(this, "CTATLinkGroup", "");
};
CTATLinkGroup.prototype = Object.create(CTATBase.prototype);
CTATLinkGroup.prototype.constructor = CTATLinkGroup;
"undefined" !== typeof module && (module.exports = CTATLinkGroup);
var CTATVersionComparator = function() {
  CTATBase.call(this, "CTATVersionComparator", "");
  this.compare = function(a, b) {
    if (null === a || "undefined" === typeof a) {
      return null === b || "undefined" === typeof b ? 0 : -1;
    }
    if (null === b || "undefined" === typeof b) {
      return 1;
    }
    var c = 0, e = a.split("."), g = b.split("."), d;
    for (d = 0;d < Math.min(e.length, g.length);d++) {
      try {
        var f = parseInt(e[d]), h = parseInt(g[d]), c = f < h ? -1 : f > h ? 1 : 0;
        if (0 !== c) {
          return c;
        }
      } catch (k) {
        if (c = e[d].toString() < g[d].toString() ? -1 : e[d].toString() > g[d].toString() ? 1 : 0, 0 !== c) {
          return c;
        }
      }
    }
    return d < e.length ? 1 : d < g.length ? -1 : a.toString() < b.toString() ? -1 : a.toString() > b.toString() ? 1 : 0;
  };
};
CTATVersionComparator.prototype = Object.create(CTATBase.prototype);
CTATVersionComparator.prototype.constructor = CTATVersionComparator;
CTATVersionComparator.vc = new CTATVersionComparator;
"undefined" !== typeof module && (module.exports = CTATVersionComparator);
var CTATMatcher = function(a, b, c) {
  CTATBase.call(this, "CTATMatcher", "");
  this.lastResult = null;
  var e = new CTATSAI("", "", ""), g = c, d = CTATMsgType.DEFAULT_ACTOR, f = !1, h = this;
  this.resetMatcher = function() {
  };
  this.getSelection = function() {
    return h.getDefaultSelection();
  };
  this.getAction = function() {
    return h.getDefaultAction();
  };
  this.getInput = function() {
    return h.getDefaultInput();
  };
  this.getActor = function() {
    return d;
  };
  this.setCaseInsensitive = function(a) {
    g = a;
  };
  this.getEvaluatedInput = function(a, b) {
    return h.getInput();
  };
  this.getTraversalIncrement = function() {
    return 1;
  };
  this.getTutorSAI = function(a, b, d) {
    a = String(d).toLowerCase() == CTATExampleTracerLink.CORRECT_ACTION.toLowerCase() ? a : h.getDefaultSAI();
    console.log("CTATMatcher.getTutorSAI() superclass method called, should be subclass;\n  returning: " + a);
    return a;
  };
  this.getDefaultSelection = function() {
    return h.getDefaultSAI().getSelection();
  };
  this.getDefaultAction = function() {
    return h.getDefaultSAI().getAction();
  };
  this.getDefaultInput = function() {
    return h.getDefaultSAI().getInput();
  };
  this.getDefaultSAI = function() {
    return e;
  };
  this.setDefaultSAI = function(a) {
    e = a;
  };
  this.getDefaultActor = function() {
    switch(String(getActor()).toLowerCase()) {
      case CTATMsgType.DEFAULT_STUDENT_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_STUDENT_ACTOR;
      case CTATMsgType.DEFAULT_TOOL_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      case CTATMsgType.UNGRADED_TOOL_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      case CTATMsgType.ANY_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      default:
        return console.log("CTATMatcher.getDefaultActor() unexpected value for actor: " + d + "; returning " + CTATMsgType.DEFAULT_ACTOR), CTATMsgType.DEFAULT_ACTOR;
    }
  };
  this.getInput = function() {
    return h.getDefaultInput();
  };
  this.getCaseInsensitive = function() {
    return g;
  };
  this.match = function(a, b, d, c, f) {
    console.log("CTATMatcher superclass method called: match(" + a + ", " + b + ", " + d + ", " + c + ")");
    return !1;
  };
  this.matchForHint = function(a, b, d, c) {
    console.log("CTATMatcher superclass method called: matchForHint(" + a + ", " + b + ", " + d + ", vt)");
    return !1;
  };
  this.matchActor = function(a) {
    a = String(a).toUpperCase();
    var b = String(h.getActor()).toUpperCase();
    ctatdebug("CTATMatcher.matchActor(" + a + ") myActor is " + b);
    return CTATMsgType.ANY_ACTOR.toString().toUpperCase() == b || CTATMsgType.UNGRADED_TOOL_ACTOR.toString().toUpperCase() == b && CTATMsgType.DEFAULT_TOOL_ACTOR.toString().toUpperCase() == a || CTATMsgType.UNGRADED_TOOL_ACTOR.toString().toUpperCase() == a && CTATMsgType.DEFAULT_TOOL_ACTOR.toString().toUpperCase() == b ? !0 : b == a;
  };
  this.getDefaultSelectionArray = function() {
    return h.getDefaultSAI().getSelectionArray();
  };
  this.getDefaultActionArray = function() {
    return h.getDefaultSAI().getActionArray();
  };
  this.getDefaultInputArray = function() {
    return h.getDefaultSAI().getInputArray();
  };
  this.getLastResult = function() {
    return null === h.lastResult || "undefined" === typeof h.lastResult ? "" : h.lastResult.toString();
  };
  this.setActor = function(a) {
    ctatdebug("CTATMatcher --\x3e in setActor(" + a + ")");
    if (null === a || "undefined" === typeof a) {
      a = CTATMsgType.DEFAULT_ACTOR;
    }
    a = String(a).toLowerCase().trim();
    d = "tool" == a ? CTATMsgType.DEFAULT_TOOL_ACTOR : a == CTATMsgType.DEFAULT_STUDENT_ACTOR.toLowerCase() ? CTATMsgType.DEFAULT_STUDENT_ACTOR : a == CTATMsgType.DEFAULT_TOOL_ACTOR.toLowerCase() ? CTATMsgType.DEFAULT_TOOL_ACTOR : a == CTATMsgType.UNGRADED_TOOL_ACTOR.toLowerCase() ? CTATMsgType.UNGRADED_TOOL_ACTOR : a == CTATMsgType.ANY_ACTOR.toLowerCase() ? CTATMsgType.ANY_ACTOR : CTATMsgType.DEFAULT_ACTOR;
  };
  this.array2ConcatString = function(a) {
    var b = "";
    if (null == a) {
      return b;
    }
    if (!Array.isArray(a)) {
      return a.toString();
    }
    a.forEach(function(a) {
      null != a && (b += a.toString() + "\n");
    });
    return b.substring(0, 0 < b.length ? b.length - 1 : 0);
  };
  this.matchConcatenation = function(a) {
    return h.matchSingle(h.array2ConcatString(a));
  };
  this.isLinkTriggered = function() {
    return f;
  };
  this.setLinkTriggered = function(a) {
    f = a;
  };
  this.evaluateReplacement = function(a, b, d) {
    return "";
  };
  this.replaceInput = function() {
    return Boolean(h.getReplacementFormula());
  };
  this.getReplacementFormula = function() {
    return "";
  };
};
CTATMatcher.prototype.toString = function() {
  console.log("Error: CTATMatcher.toString() called; should be overridden in subclass");
  return "This is CTATMatcher.";
};
CTATMatcher.prototype.setParameter = function(a, b, c) {
};
CTATMatcher.isTutorActor = function(a, b) {
  return CTATMsgType.DEFAULT_TOOL_ACTOR.toUpperCase() === a.toUpperCase() || CTATMsgType.UNGRADED_TOOL_ACTOR.toUpperCase() === a.toUpperCase() || b && CTATMsgType.ANY_ACTOR.toUpperCase() === a.toUpperCase() ? !0 : !1;
};
Object.defineProperty(CTATMatcher, "NON_SINGLE", {enumerable:!1, configurable:!1, writable:!1, value:-1});
Object.defineProperty(CTATMatcher, "SELECTION", {enumerable:!1, configurable:!1, writable:!1, value:0});
Object.defineProperty(CTATMatcher, "ACTION", {enumerable:!1, configurable:!1, writable:!1, value:1});
Object.defineProperty(CTATMatcher, "INPUT", {enumerable:!1, configurable:!1, writable:!1, value:2});
Object.defineProperty(CTATMatcher, "VECTOR", {enumerable:!1, configurable:!1, writable:!1, value:3});
Object.defineProperty(CTATMatcher, "ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Actor"});
CTATMatcher.prototype = Object.create(CTATBase.prototype);
CTATMatcher.prototype.constructor = CTATMatcher;
"undefined" !== typeof module && (module.exports = CTATMatcher);
var CTATExampleTracerSkill = function(a, b, c, e, g, d) {
  CTATBase.call(this, "CTATExampleTracerSkill", b);
  var f = null == a || "" == a.trim() ? b : b + " " + a, h = e, k = 0, l = 0, m = CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_11, n = CTATExampleTracerSkill.DEFAULT_MASTERY_THRESHOLD, p = null, u = this;
  this.getSkillName = function() {
    return f;
  };
  this.getCategory = function() {
    var a = f.indexOf(" ");
    return 0 > a ? "" : f.substring(a + 1);
  };
  this.setTransactionNumber = function(a) {
    k = a;
  };
  this.updatePKnown = function(a) {
    return h = CTATExampleTracerSkill.updatePKnownStatic(a, c, h, g, d);
  };
  this.changeOpportunityCount = function(a) {
    return l += a;
  };
  this.getTransactionNumber = function() {
    return k;
  };
  this.getSkillBarString = function(a) {
    var b = this.getSkillName(), b = b + this.getSkillBarDelimiter() + h, b = b + this.getSkillBarDelimiter() + (this.hasReachedMastery() ? "1" : "0");
    !0 === a && (b = b + this.getSkillBarDelimiter() + this.getLabel());
    return b.toString();
  };
  this.getSkillBarDelimiter = function() {
    return m;
  };
  this.toXML = function(a) {
    var b;
    b = "" + (' name="' + CTATExampleTracerSkill.getName(f) + '"');
    b += ' category="' + u.getCategory() + '"';
    b += ' pKnown="' + h + '"';
    b += ' pLearn="' + d + '"';
    b += ' pGuess="' + c + '"';
    b += ' pSlip="' + g + '"';
    return a ? "&lt;Skill" + b + " /&gt;" : "<Skill" + b + " />";
  };
  this.hasReachedMastery = function() {
    return null === h || "undefined" === typeof h ? !1 : h >= n;
  };
  this.getLabel = function() {
    return null === p || "undefined" === typeof p || 1 > p.length ? CTATExampleTracerSkill.getName(f) : p;
  };
  this.setVersion = function(a) {
    null !== a && "undefined" !== typeof a && 0 < a.length && (m = CTATExampleTracerSkill.versionToSkillBarDelimiter(a));
  };
  this.setLabel = function(a) {
    p = a;
  };
  this.setDescription = function(a) {
  };
  CTATExampleTracerSkill.makeStepID = function(a, b) {
    for (var d = "", c = 0, f = a;2 > c++;f = b) {
      if (!(null === f || "undefined" === typeof f || 1 > f.length)) {
        for (var e = !1, g = 0;g < f.length;g++) {
          if (null !== f[g] && "undefined" !== typeof f[g]) {
            var h = f[g].toString();
            1 > h.length || f === a && ("hint".toString().toUpperCase() === h.toString().toUpperCase() || "help".toString().toUpperCase() === h.toString().toUpperCase()) || f === b && CTATMsgType.PREVIOUS_FOCUS.toString().toUpperCase() === h.toString().toUpperCase() || (d = d + (e ? "," : "[") + h, e = !0);
          }
        }
        !0 === e && (d += "]");
      }
    }
    return d.toString();
  };
  CTATExampleTracerSkill.updatePKnownStatic = function(a, b, d, c, f) {
    var e = 0;
    if (a.toString().toUpperCase() === CTATExampleTracerSkill.CORRECT.toString().toUpperCase()) {
      b = +(b * (1 - d)).toFixed(2), d = +(d * (1 - c)).toFixed(2), e = +(d / (d + b)).toFixed(2);
    } else {
      if (a.toString().toUpperCase() === CTATExampleTracerSkill.INCORRECT.toString().toUpperCase() || a.toString().toUpperCase() === CTATExampleTracerSkill.HINT.toString().toUpperCase()) {
        c = +(d * c).toFixed(2), d = +((1 - d) * (1 - b)).toFixed(2), e = +(c / (c + d)).toFixed(2);
      }
    }
    return +(e + f * (1 - e)).toFixed(2);
  };
  CTATExampleTracerSkill.getName = function(a) {
    var b = a.indexOf(" ");
    return 0 > b ? a : a.substring(0, b);
  };
  CTATExampleTracerSkill.versionToSkillBarDelimiter = function(a) {
    return null === a || "undefined" === typeof a ? CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_10 : 0 <= CTATVersionComparator.vc.compare(a, "2.11") ? CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_11 : CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_10;
  };
};
Object.defineProperty(CTATExampleTracerSkill, "HINT", {enumerable:!1, configurable:!1, writable:!1, value:"hint"});
Object.defineProperty(CTATExampleTracerSkill, "CORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"correct"});
Object.defineProperty(CTATExampleTracerSkill, "INCORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"incorrect"});
Object.defineProperty(CTATExampleTracerSkill, "SKILL_BAR_DELIMITER_v2_10", {enumerable:!1, configurable:!1, writable:!1, value:"="});
Object.defineProperty(CTATExampleTracerSkill, "SKILL_BAR_DELIMITER_v2_11", {enumerable:!1, configurable:!1, writable:!1, value:"`"});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_MASTERY_THRESHOLD", {enumerable:!1, configurable:!1, writable:!1, value:.95});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_GUESS", {enumerable:!1, configurable:!1, writable:!1, value:.2});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_KNOWN", {enumerable:!1, configurable:!1, writable:!1, value:.3});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_SLIP", {enumerable:!1, configurable:!1, writable:!1, value:.3});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_LEARN", {enumerable:!1, configurable:!1, writable:!1, value:.15});
CTATExampleTracerSkill.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerSkill.prototype.constructor = CTATExampleTracerSkill;
"undefined" !== typeof module && (module.exports = CTATExampleTracerSkill);
var CTATSkills = function(a) {
  CTATBase.call(this, "CTATSkills", a ? String(a.length) : "");
  var b = {}, c = 0;
  a.forEach(function(a) {
    b[a.getSkillName().toLowerCase()] = a;
  });
  var e = new Set, g = this;
  this.toXML = function(a, c) {
    c || (c = "");
    var e = a ? "&lt;Skills&gt;" : "<Skills>", g = e.length, l;
    for (l in b) {
      b.hasOwnProperty(l) && b[l] && (e += c + b[l].toXML(a));
    }
    e += c && e.length > g ? "\n" : "";
    return e + (a ? "&lt;/Skills&gt;" : "</Skills>");
  };
  this.updateSkill = function(a, b, h) {
    var k = null, l = g.getSkill(b);
    null !== l && "undefined" !== typeof l && (l.setTransactionNumber(c), b = h + " " + b, e.has(b) || (e.add(b), l.updatePKnown(a), l.changeOpportunityCount(1)), CTATExampleTracerSkill.CORRECT.toString().toUpperCase() === a.toString().toUpperCase() && e.delete(b), k = l);
    return k;
  };
  this.startTransaction = function() {
    ++c;
  };
  this.getSkill = function(a) {
    var c = null === a || "undefined" === typeof a ? null : a.toLowerCase(), c = b[c];
    g.ctatdebug("CTATSkills.getSkill(" + a + ") returns " + c);
    return c;
  };
  this.getSkillBarVector = function(a, f) {
    var e = [], g;
    for (g in b) {
      !0 === b.hasOwnProperty(g) && (!0 !== f && b[g].getTransactionNumber() !== c || e.push(b[g].getSkillBarString(a)));
    }
    return e;
  };
  this.setExternallyDefined = function(a) {
  };
  this.setVersion = function(a) {
    for (var c in b) {
      !0 === b.hasOwnProperty(c) && b[c].setVersion(a);
    }
  };
};
CTATSkills.prototype = Object.create(CTATBase.prototype);
CTATSkills.prototype.constructor = CTATSkills;
"undefined" !== typeof module && (module.exports = CTATSkills);
var CTATDefaultLinkGroup = function(a, b, c, e) {
  CTATLinkGroup.call(this, "CTATDefaultLinkGroup", a);
  var g = a, d = b, f = c, h = new Set;
  null !== e && "undefined" !== typeof e && e.forEach(function(a) {
    h.add(a);
  });
  var k = new Set, l = null, m = null, n = this;
  n.ctatdebug("CTATDefaultLinkGroup constructor group name: " + a);
  n.ctatdebug("CTATDefaultLinkGroup constructor group isOrdered: " + b);
  n.ctatdebug("CTATDefaultLinkGroup constructor group isReenterable: " + c);
  this.setOrdered = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in setOrdered group name: " + g);
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in setOrdered:: " + a);
    d = a;
  };
  this.setName = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in setName: " + a);
    g = a;
  };
  this.containsLink = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in containsLink: " + a.getUniqueID());
    return h.has(a);
  };
  this.removeLink = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in removeLink: " + a.getUniqueID());
    return h.delete(a);
  };
  this.getParent = function() {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in getParent");
    return l;
  };
  this.addLink = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in addLink: " + a.getUniqueID());
    h.add(a);
  };
  this.getIsOrdered = function() {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in getIsOrdered: " + d);
    return d;
  };
  this.getIsReenterable = function() {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in getIsReenterable: " + f);
    return f;
  };
  this.getSubgroups = function() {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in getSubgroups");
    return k;
  };
  this.getLinks = function() {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in getLinks");
    return h;
  };
  this.setReenterable = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in setReenterable: " + a);
    f = a;
  };
  this.setParent = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in setParent: " + a.getName());
    l = a;
  };
  this.addSubgroup = function(a) {
    n.ctatdebug("CTATDefaultLinkGroup --\x3e in addSubgroup groupName: " + a.getName());
    k.add(a);
  };
  this.getName = function() {
    return g;
  };
  this.getDefaultBuggyMsg = function() {
    return m;
  };
  this.setDefaultBuggyMsg = function(a) {
    m = "" == a ? null : a;
  };
  this.toString = function() {
    return "Group Name: " + this.getName();
  };
};
CTATDefaultLinkGroup.prototype = Object.create(CTATLinkGroup.prototype);
CTATDefaultLinkGroup.prototype.constructor = CTATDefaultLinkGroup;
"undefined" !== typeof module && (module.exports = CTATDefaultLinkGroup);
var CTATExampleTracerNode = function(a, b) {
  CTATBase.call(this, "CTATExampleTracerNode", a);
  var c = null, e = "", g = b ? b : new Set, d = new Set, f = this;
  this.toString = function() {
    return "node" + a;
  };
  this.getNodeID = function() {
    return a;
  };
  this.getNodeName = function() {
    return e;
  };
  this.setNodeName = function(a) {
    f.ctatdebug("CTATExampleTracerGraph --\x3e in setNodeName(" + a + ")");
    e = a;
  };
  this.getOutLinks = function() {
    ctatdebug("CTATExampleTracerNode --\x3e getOutLinks");
    return g;
  };
  this.addOutLink = function(a) {
    ctatdebug("CTATExampleTracerNode --\x3e addOutLink( " + a + " )");
    g.add(a);
  };
  this.clearInLinks = function() {
    d = new Set;
  };
  this.addInLink = function(a) {
    d.add(a);
  };
  this.getInLinks = function() {
    return d;
  };
  this.getOutDegree = function() {
    return g.size;
  };
  this.setVisualData = function(a) {
    c = a;
  };
  this.getVisualData = function() {
    return c;
  };
};
CTATExampleTracerNode.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerNode.prototype.constructor = CTATExampleTracerNode;
"undefined" !== typeof module && (module.exports = CTATExampleTracerNode);
var CTATExampleTracerPathComparator = function() {
  CTATBase.call(this, "CTATExampleTracerPathComparator", "");
  var a = this;
  this.compare = function(b, c) {
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare");
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.isDonePath(): " + b.isDonePath());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.isDonePath(): " + c.isDonePath());
    if (!0 === b.isDonePath() && !1 === c.isDonePath()) {
      return -1;
    }
    if (!0 === c.isDonePath() && !1 === b.isDonePath()) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.isIncorrectPath(): " + c.isIncorrectPath());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.isIncorrectPath()(): " + b.isIncorrectPath());
    if (!0 === c.isIncorrectPath() && !1 === b.isIncorrectPath()) {
      return -1;
    }
    if (!0 === b.isIncorrectPath() && !1 === c.isIncorrectPath()) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfPreferredPrefixLinks(): " + b.getNumberOfPreferredPrefixLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfPreferredPrefixLinks(): " + c.getNumberOfPreferredPrefixLinks());
    var e = b.getNumberOfPreferredPrefixLinks(), g = c.getNumberOfPreferredPrefixLinks();
    if (e > g) {
      return -1;
    }
    if (e < g) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfSuboptimalLinks(): " + b.getNumberOfSuboptimalLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfSuboptimalLinks(): " + c.getNumberOfSuboptimalLinks());
    e = b.getNumberOfSuboptimalLinks();
    g = c.getNumberOfSuboptimalLinks();
    if (e < g) {
      return -1;
    }
    if (e > g) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfPreferredLinks(): " + b.getNumberOfPreferredLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfPreferredLinks(): " + c.getNumberOfPreferredLinks());
    e = b.getNumberOfPreferredLinks();
    g = c.getNumberOfPreferredLinks();
    if (e > g) {
      return -1;
    }
    if (e < g) {
      return 1;
    }
    e = b.getLinks().size;
    g = c.getLinks().size;
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getLinks().size: " + e);
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getLinks().size: " + g);
    if (e < g) {
      return -1;
    }
    if (e > g) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e out of comapre, about to call breakByLowerLinkID");
    return a.breakByLowerLinkID(b, c);
  };
  this.breakByLowerLinkID = function(b, c) {
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID");
    var e = b.getSortedLinks(), g = c.getSortedLinks(), d = null, f = null, h = 0, k = 0;
    do {
      a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID in do while"), k >= e.length ? (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path 1 is shorter"), h = -1) : k >= g.length ? (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path 2 is shorter"), h = 1) : (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path are same, compare IDS"), d = e[k], f = g[k]), k++;
    } while (0 === h && d.getUniqueID() === f.getUniqueID());
    0 === h && (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID result is zero: " + d.getUniqueID()), a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID result is zero: " + f.getUniqueID()), h = d.getUniqueID() < f.getUniqueID() ? -1 : 1);
    return h;
  };
};
CTATExampleTracerPathComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerPathComparator.prototype.constructor = CTATExampleTracerPathComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerPathComparator);
InternalGroupIterator = function(a, b) {
  CTATBase.call(this, "InternalGroupIterator", a);
  var c = this, e = b.length, g = [], d = 0;
  a.getSubgroups().forEach(function(a) {
    a && g.push(a);
  });
  b.push(c);
  c.ctatdebug("InternalGroupIterator() constructor group " + a + ", stack.length " + b.length + ", sgList.length " + g.length);
  this.toString = function() {
    return "{" + a + " at " + e + " with " + g.length + " subgroups}";
  };
  this.next = function() {
    return d >= g.length ? (b.pop(), c.ctatdebug("InternalGroupIterator at deepest next() returning " + a + " with stack.length " + b.length), {value:a, done:!1}) : (new InternalGroupIterator(g[d++], b)).next();
  };
};
InternalGroupIterator.prototype = Object.create(CTATBase.prototype);
InternalGroupIterator.prototype.constructor = InternalGroupIterator;
var CTATGroupIterator = function(a) {
  CTATBase.call(this, "CTATGroupIterator", a);
  this.ctatdebug("CTATGroupIterator(" + a + ") begin constructor");
  var b = null;
  this.next = function() {
    null === b && (b = [], new InternalGroupIterator(a, b));
    return 0 >= b.length ? {value:null, done:!0} : b[b.length - 1].next();
  };
};
CTATGroupIterator.prototype = Object.create(CTATBase.prototype);
CTATGroupIterator.prototype.constructor = CTATGroupIterator;
"undefined" !== typeof module && (module.exports = CTATGroupIterator);
var CTATGroupModel = function() {
  CTATBase.call(this, "CTATGroupModel", "");
  var a = this;
  this.clear = function() {
  };
  this.setDefaultReenterable = function(a) {
  };
  this.setGroupOrdered = function(a, c) {
  };
  this.getTopLevelGroup = function() {
  };
  this.setGroupName = function(a, c) {
  };
  this.addLinkToGroup = function(a, c) {
  };
  this.isGroupOrdered = function(a) {
  };
  this.isGroupReenterable = function(a) {
  };
  this.isLinkInGroup = function() {
  };
  this.getGroupsContainingLink = function(a) {
  };
  this.getGroupLinkCount = function(b) {
    return a.getGroupLinks(b).size;
  };
  this.getLowestLevelGroupOfLink = function(a) {
  };
  this.getGroupSubgroups = function(a) {
  };
  this.getUniqueLinks = function(a) {
  };
  this.getGroupLinks = function(a) {
  };
  this.removeLinkFromGroup = function(a, c) {
  };
  this.getGroupParent = function(a) {
  };
  this.addGroup = function(a, c, e) {
  };
  this.setGroupReenterable = function(a, c) {
  };
};
CTATGroupModel.prototype = Object.create(CTATBase.prototype);
CTATGroupModel.prototype.constructor = CTATGroupModel;
"undefined" !== typeof module && (module.exports = CTATGroupModel);
var CTATStep = function(a, b) {
  CTATBase.call(this, "CTATStep", a);
  var c = 0, e = null, g = 0, d = 0;
  this.ctatdebug("entering CTATStep(" + a + ", " + b + ") constructor");
  this.incrementFirstHints = function() {
    c++;
  };
  this.incrementNCorrect = function() {
    g++;
  };
  this.incrementErrors = function() {
    d++;
  };
  this.setLastResult = function(a) {
    e = a;
  };
  this.getLastResult = function() {
    return e;
  };
  this.getResult = function() {
    return b;
  };
  this.getNCorrect = function() {
    return g;
  };
  this.getNErrors = function() {
    return d;
  };
  this.getNFirstHints = function() {
    return c;
  };
  this.ctatdebug("in CTATStep(" + a + ", " + b + ") constructor");
  switch(b) {
    case CTATStep.StepResult[3]:
      this.incrementNCorrect();
      break;
    case CTATStep.StepResult[1]:
      this.incrementErrors();
      break;
    case CTATStep.StepResult[2]:
      this.incrementFirstHints();
  }
  this.ctatdebug("exiting CTATStep constructor");
};
Object.defineProperty(CTATStep, "StepResult", {enumerable:!1, configurable:!1, writable:!1, value:["UNTRIED", "INCORRECT", "HINT", "CORRECT"]});
CTATStep.prototype = Object.create(CTATBase.prototype);
CTATStep.prototype.constructor = CTATStep;
"undefined" !== typeof module && (module.exports = CTATStep);
var CTATProblemSummary = function(a, b, c) {
  CTATBase.call(this, "CTATProblemSummary", "");
  if (null === a || "undefined" === typeof a || 1 > a.length) {
    throw new CTATExampleTracerException("problemName null or empty");
  }
  var e = Number.MAX_VALUE, g = b, d = 0, f = new Date, h = {}, k = 0, l = 0, m = 0, n = 0, p = 0, u = 0, t = 0, v = CTATMsgType.CompletionValue[0], w = this;
  this.getHintsOnly = function() {
    var a = 0, b;
    for (b in h) {
      CTATStep.StepResult[2] == h[b].getResult() && 1 > h[b].getNErrors() && ++a;
    }
    return a;
  };
  this.getErrorsOnly = function() {
    var a = 0, b;
    for (b in h) {
      CTATStep.StepResult[1] == h[b].getResult() && 1 > h[b].getNFirstHints() && ++a;
    }
    return a;
  };
  this.getUniqueSteps = function() {
    var a = 0, b;
    for (b in h) {
      a++;
    }
    return a;
  };
  this.getRequiredSteps = function() {
    return e;
  };
  this.setRequiredSteps = function(a) {
    e = a;
  };
  this.getCorrect = function() {
    return k;
  };
  this.toXML = function(b) {
    var c;
    c = "" + (' ProblemName="' + a + '"');
    c += ' CompletionStatus="' + v + '"';
    c += ' Correct="' + k + '"';
    c += ' UniqueCorrect="' + p + '"';
    c += ' UniqueCorrectUnassisted="' + u + '"';
    c += ' Hints="' + l + '"';
    c += ' UniqueHints="' + n + '"';
    c += ' HintsOnly="' + w.getHintsOnly() + '"';
    c += ' Errors="' + m + '"';
    c += ' UniqueErrors="' + t + '"';
    c += ' ErrorsOnly="' + w.getErrorsOnly() + '"';
    c += ' UniqueSteps="' + w.getUniqueSteps() + '"';
    c += ' RequiredSteps="' + w.getRequiredSteps() + '"';
    c += ' TimeElapsed="' + d + '"';
    var f = w.getSkills() ? w.getSkills().toXML(b) : "";
    return b ? "&lt;ProblemSummary" + c + "&gt;" + f + "&lt;/ProblemSummary&gt;" : "<ProblemSummary" + c + ">" + f + "</ProblemSummary>";
  };
  this.getSkills = function() {
    return g;
  };
  this.setSkills = function(a) {
    g = a;
  };
  this.stopTimer = function() {
    var a = new Date;
    d += a.getTime() - f.getTime();
    return a;
  };
  this.restartTimer = function() {
    f = w.stopTimer();
    return d;
  };
  this.addHint = function(a) {
    w.ctatdebug("addHint(" + a + ")");
    var b = h[a];
    null !== b && "undefined" !== typeof b ? (1 > b.getNFirstHints() && ++n, b.incrementFirstHints()) : (b = new CTATStep(a, CTATStep.StepResult[2]), h[a] = b, n++);
    l++;
    b.setLastResult(CTATStep.StepResult[2]);
    w.ctatdebug("exiting addHint() hint count " + l + ", trial " + b);
  };
  this.addError = function(a) {
    w.ctatdebug("addError(" + a + ")");
    var b = h[a];
    null !== b && "undefined" !== typeof b ? (1 > b.getNCorrect() && 1 > b.getNErrors() && ++t, b.incrementErrors()) : (b = new CTATStep(a, CTATStep.StepResult[1]), h[a] = b, t++);
    m++;
    b.setLastResult(CTATStep.StepResult[1]);
    w.ctatdebug("exiting addError() error count " + m + ", trial " + b);
  };
  this.addCorrect = function(a) {
    var b = h[a];
    w.ctatdebug("entering addCorrect(" + a + ") trial " + b);
    b ? (1 > b.getNCorrect() && 1 > b.getNErrors() && (++p, 1 > b.getNFirstHints() && u++), b.incrementNCorrect()) : (w.ctatdebug("to call CTATStep(" + a + ", StepResult " + CTATStep.StepResult[3]), b = new CTATStep(a, CTATStep.StepResult[3]), h[a] = b, p++, u++);
    k++;
    b.setLastResult(CTATStep.StepResult[3]);
    w.ctatdebug("exiting addCorrect() correct count " + k + ", trial " + b);
  };
  this.setCompletionStatus = function(a, b) {
    w.ctatdebug("setCompletionStatus(" + a + ", " + b + ")");
    if (CTATMsgType.CompletionValue[1] != v || b) {
      v = a;
    }
  };
  this.getCompletionStatus = function() {
    return v;
  };
};
CTATProblemSummary.prototype = Object.create(CTATBase.prototype);
CTATProblemSummary.prototype.constructor = CTATProblemSummary;
"undefined" !== typeof module && (module.exports = CTATProblemSummary);
var CTATDefaultGroupModel = function() {
  function a(a, d, c) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in internalRemoveLinkFromGroupRecursive");
    !0 === a.containsLink(d) && (k.getGroupSubgroups(a).forEach(function(a) {
      k.removeLinkFromGroup(a, d);
    }), (a !== f || c) && b(a, d));
  }
  function b(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in internalRemoveLinkFromGroup");
    return a.removeLink(b);
  }
  function c(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getImmediateGroupOfLink");
    var d = null, f = !1, e = null;
    k.getGroupSubgroups(b).forEach(function(b) {
      !0 !== f && !0 === k.isLinkInGroup(b, a) && (d = c(a, b), e = null !== d && "undefined" !== typeof d ? d : b, f = !0);
    });
    return !0 === f ? e : null;
  }
  function e(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getNaturalContainingGroup");
    if (b.size === k.getGroupLinks(a).size) {
      throw k.getGroupLinks(a).forEach(function(d) {
        if (!1 === b.has(d)) {
          throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
        }
      }), new CTATExampleTracerException("Group containing this set of links already exists: " + a);
    }
    if (b.size >= k.getGroupLinks(a).size) {
      throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
    }
    var d = !1, c = null;
    b.forEach(function(f) {
      if (!0 !== d) {
        if (!1 === k.isLinkInGroup(a, f)) {
          throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
        }
        k.getGroupSubgroups(a).forEach(function(g) {
          !0 !== d && !0 === k.isLinkInGroup(g, f) && (k.getGroupLinkCount(g) >= b.size ? (c = e(g, b), d = !0) : k.getGroupLinks(g).forEach(function(d) {
            if (!1 === b.has(d)) {
              throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
            }
          }));
        });
      }
    });
    return !0 === d ? c : a;
  }
  function g(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity parent: " + a.getName());
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity child: " + b.getName());
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity size: " + k.getGroupSubgroups(a).size);
    k.getGroupSubgroups(a).forEach(function(c) {
      var f = k.getGroupLinks(c);
      if (0 === f.size) {
        k.getGroupSubgroups(a).delete(c), d(b, c);
      } else {
        var e = null, g = !1;
        f.forEach(function(a) {
          !1 === g && (e = a, g = !0);
        });
        !0 === k.isLinkInGroup(b, e) && (k.getGroupSubgroups(a).delete(c), d(b, c));
      }
    });
    d(a, b);
  }
  function d(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroup");
    a.addSubgroup(b);
    b.setParent(a);
  }
  CTATGroupModel.call(this);
  var f = null, h = !1, k = this;
  this.clear = function() {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in clear");
    f = new CTATDefaultLinkGroup("defaultName", !0, h, null);
  };
  this.setDefaultReenterable = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in setDefaultReenterable");
    h = a;
  };
  this.setGroupOrdered = function(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupOrdered");
    a.setOrdered(b);
  };
  this.getTopLevelGroup = function() {
    ctatdebug("CTATDefaultGroupModel --\x3e in getTopLevelGroup");
    return f;
  };
  this.setGroupName = function(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupName");
    a.setName(b);
  };
  this.addLinkToGroup = function(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addLinkToGroup");
    for (k.removeLinkFromGroup(f, b);null !== a && "undefined" !== typeof a;a = k.getGroupParent(a)) {
      var d = a, c = b;
      k.ctatdebug("CTATDefaultGroupModel --\x3e in internalAddLinkToGroup");
      d.addLink(c);
    }
  };
  this.isGroupOrdered = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupOrdered group name: " + a.getName());
    k.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupOrdered: " + a.getIsOrdered());
    return a.getIsOrdered();
  };
  this.isGroupReenterable = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupReenterable");
    return a.getIsReenterable();
  };
  this.isLinkInGroup = function(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in isLinkInGroup");
    return a.containsLink(b);
  };
  this.getGroupsContainingLink = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink(" + a + "): TopLevel " + f + ", typeof(TopLevel) " + typeof f);
    var b = new Set, d = new CTATGroupIterator(f);
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink before loop: groupIter " + d + ", typeof(groupIter) " + typeof d);
    for (var c = d.next();!c.done;c = d.next()) {
      c = c.value, !0 === k.isLinkInGroup(c, a) && b.add(c);
    }
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink returning groups.size " + b.size);
    return b;
  };
  this.getLowestLevelGroupOfLink = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getLowestLevelGroupOfLink");
    var b = c(a, f);
    return null !== b && "undefined" !== typeof b ? b : !0 === k.isLinkInGroup(f, a) ? f : null;
  };
  this.getGroupSubgroups = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupSubgroups");
    return null !== a && "undefined" !== typeof a ? a.getSubgroups() : null;
  };
  this.getUniqueLinks = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getUniqueLinks");
    var b = new Set;
    k.getGroupLinks(a).forEach(function(a) {
      b.add(a);
    });
    k.getGroupSubgroups(a).forEach(function(a) {
      k.getGroupLinks(a).forEach(function(a) {
        b.delete(a);
      });
    });
    return b;
  };
  this.getGroupLinks = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupLinks: " + a.getName());
    return a.getLinks();
  };
  this.removeLinkFromGroup = function(b, d) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in removeLinkFromGroup");
    a(b, d, !1);
  };
  this.getGroupParent = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupParent");
    return a.getParent();
  };
  this.addGroup = function(a, b, d) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addGroup");
    var c = null;
    try {
      c = e(f, d);
    } catch (u) {
      return u.toString();
    }
    a = new CTATDefaultLinkGroup(a, b, h, d);
    k.ctatdebug("CTATDefaultGroupModel --\x3e in addGroup after creating new group");
    g(c, a);
    return "";
  };
  this.setGroupReenterable = function(a, b) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupReenterable");
    a.setReenterable(b);
  };
  this.createIdToLinkMap = function() {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in createIdToLinkMap");
    var a = {};
    k.getGroupLinks(f).forEach(function(b) {
      a[b.getUniqueID()] = b;
    });
    return a;
  };
  this.getGroupByName = function(a) {
    k.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupByName TopLevel has: " + f.getSubgroups().size);
    for (var b = new CTATGroupIterator(f), d = b.next();!d.done;d = b.next()) {
      if (d = d.value, k.getGroupName(d).toString() === a.toString()) {
        return d;
      }
    }
    return null;
  };
  this.getGroupName = function(a) {
    return a.getName();
  };
  k.clear();
};
CTATDefaultGroupModel.prototype = Object.create(CTATGroupModel.prototype);
CTATDefaultGroupModel.prototype.constructor = CTATDefaultGroupModel;
"undefined" !== typeof module && (module.exports = CTATDefaultGroupModel);
var CTATProblemStateStatus = function() {
  var a = "empty";
  this.getStatus = function() {
    return a;
  };
  this.setStatus = function(b) {
    a = b;
  };
};
Object.defineProperty(CTATProblemStateStatus, "empty", {enumerable:!1, configurable:!1, writable:!1, value:"empty"});
Object.defineProperty(CTATProblemStateStatus, "incompleteStartState", {enumerable:!1, configurable:!1, writable:!1, value:"incompleteStartState"});
Object.defineProperty(CTATProblemStateStatus, "startState", {enumerable:!1, configurable:!1, writable:!1, value:"startState"});
Object.defineProperty(CTATProblemStateStatus, "incomplete", {enumerable:!1, configurable:!1, writable:!1, value:"incomplete"});
Object.defineProperty(CTATProblemStateStatus, "goingToState", {enumerable:!1, configurable:!1, writable:!1, value:"goingToState"});
Object.defineProperty(CTATProblemStateStatus, "normalFeedback", {enumerable:!1, configurable:!1, writable:!1, value:"normalFeedback"});
Object.defineProperty(CTATProblemStateStatus, "complete", {enumerable:!1, configurable:!1, writable:!1, value:"complete"});
CTATProblemStateStatus.prototype = Object.create(CTATBase.prototype);
CTATProblemStateStatus.prototype.constructor = CTATProblemStateStatus;
CTATProblemStateStatus.prototype.isSendingSavedMsgsForRestore = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.normalFeedback:
    ;
    case CTATProblemStateStatus.complete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.mustSaveForRestore = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incomplete:
    ;
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.goingToState:
      return !1;
    default:
      return !0;
  }
};
CTATProblemStateStatus.prototype.isOutputSuppressed = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.goingToState:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.isComplete = function() {
  return this.getStatus() == CTATProblemStateStatus.complete;
};
CTATProblemStateStatus.prototype.isIncomplete = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.incomplete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.mustRetrieveProblemState = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.incomplete:
    ;
    case CTATProblemStateStatus.complete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.transition = function(a, b) {
  var c = this.getStatus();
  if (CTATProblemStateStatus.complete != c) {
    switch(a) {
      case CTATMsgType.SET_PREFERENCES:
        CTATProblemStateStatus[b] && (CTATProblemStateStatus.incomplete == CTATProblemStateStatus[b] ? this.setStatus(CTATProblemStateStatus.incompleteStartState) : CTATProblemStateStatus.complete == CTATProblemStateStatus[b] ? this.setStatus(CTATProblemStateStatus.complete) : this.setStatus(CTATProblemStateStatus.startState));
        break;
      case CTATMsgType.STATE_GRAPH:
        this.getStatus() == CTATProblemStateStatus.incomplete || this.getStatus() == CTATProblemStateStatus.incompleteStartState ? this.setStatus(CTATProblemStateStatus.incompleteStartState) : this.setStatus(CTATProblemStateStatus.startState);
        break;
      case CTATMsgType.START_STATE_END:
        this.getStatus() == CTATProblemStateStatus.incompleteStartState ? this.setStatus(CTATProblemStateStatus.incomplete) : this.setStatus(CTATProblemStateStatus.normalFeedback);
        break;
      case CTATMsgType.PROBLEM_RESTORE_END:
      ;
      case CTATMsgType.END_GO_TO_STATE:
        this.setStatus(CTATProblemStateStatus.normalFeedback);
        break;
      case CTATMsgType.BEGIN_GO_TO_STATE:
        this.setStatus(CTATProblemStateStatus.goingToState);
    }
    ctatdebug("CTATProblemStateStatus.transition(" + a + ", " + b + ") old " + c + " => new " + this.getStatus());
    return this.getStatus();
  }
};
CTATProblemStateStatus.prototype.toString = function() {
  return "{" + this.getStatus() + "}";
};
var ProblemStateSaver = function(a) {
  CTATBase.call(this, "ProblemStateSaver", a);
  this.tracer = a;
  var b = this, c = [], e = "", g = "", d = null, f = 0;
  this.saveAsYouGo = function(h) {
    b.ctatdebug("saveAsYouGo() curriculum_service_url " + e + ", tracer " + a);
    if (e && a) {
      var k = {};
      if (CTATBase.inOLI()) {
        var l = h.getRequiredSteps(), m = h.getCorrect();
        0 == l ? (console.log("WARNING problem summary number of required steps is 0\n" + h.toXML(!1)), k.percentScore = 100, k.completed = !0) : (k.percentScore = Math.round(100 * m / l), k.completed = m >= l);
      } else {
        CTATBase.inXBlock() ? (k.score = h.getCorrect(), k.max_score = h.getRequiredSteps()) : (k.session_id = a.getSessionID(), k.authenticity_token = g, k.summary = h.toXML(!1));
      }
      k.problem_state = ProblemStateSaver.MESSAGES_TAG;
      for (h = 0;h < c.length;++h) {
        k.problem_state += c[h];
      }
      k.problem_state += ProblemStateSaver.MESSAGES_TAG.replace("<", "</");
      ++f;
      b.ctatdebug("saveAsYouGo[" + f + "] to send problem_state length " + k.problem_state.length);
      if (CTATBase.inXBlock()) {
        setVariable("saveandrestore", k.problem_state), gradeStudent(k.score, k.max_score);
      } else {
        if (CTATBase.inOLI()) {
          oliComm.writeFileRecord(a.getQuestionFile(), k.problem_state), oliComm.scoreAttempt("percentScore", String(k.percentScore)), oliComm.scoreAttempt("completed", String(k.completed));
        } else {
          d || (h = {}, h.session_id = a.getSessionID(), d = new CTATCommLibrary(this, !1, h));
          h = [];
          for (var n in k) {
            l = new CTATVariable, l.name = n, l.value = k[n], h.push(l);
          }
          d.send_post_variables(e, h);
          b.ctatdebug("saveAsYouGo[" + f + "] sent problemState.length " + c.length);
        }
      }
    }
  };
  this.setCurriculumServiceUrl = function(a) {
    b.ctatdebug("ProblemStateSaver.setCurriculumServiceUrl() old " + e + ", new " + a);
    e = a;
  };
  this.setAuthenticityToken = function(a) {
    b.ctatdebug("ProblemStateSaver.setAuthenticityToken() old " + g + ", new " + a);
    a && (g = a);
  };
  this.getProblemState = function() {
    return c;
  };
  this.getProblemStateLength = function() {
    return c.length;
  };
};
ProblemStateSaver.prototype = Object.create(CTATBase.prototype);
ProblemStateSaver.prototype.constructor = ProblemStateSaver;
ProblemStateSaver.prototype.appendToProblemState = function(a, b, c) {
  if (c || b.mustSaveForRestore() && ProblemStateSaver.mustSaveForRestore(CTATMsgType.getMessageType(a))) {
    b = this.getProblemState(), a = this.editForProblemState(a), b.push(CTATBase.inOLI() ? a : encodeURIComponent(a));
  }
};
Object.defineProperty(ProblemStateSaver, "XML_PROLOGUE", {enumerable:!1, configurable:!1, writable:!1, value:/<\? *[xX][mM][lL][^?]*\?>/});
Object.defineProperty(ProblemStateSaver, "LEADING_WHITE_SPACE", {enumerable:!1, configurable:!1, writable:!1, value:/^\s+</m});
Object.defineProperty(ProblemStateSaver, "MESSAGES_TAG", {enumerable:!1, configurable:!1, writable:!1, value:"<messages>"});
ProblemStateSaver.prototype.editForProblemState = function(a) {
  for (var b = a.split(ProblemStateSaver.XML_PROLOGUE), c = b[0], e = 1;e < b.length;++e) {
    c += b[e];
  }
  b = c.split(ProblemStateSaver.LEADING_WHITE_SPACE);
  c = b[0];
  for (e = 1;e < b.length;++e) {
    c.endsWith("\n") && (c = c.slice(0, -1)), c.endsWith("\r") && (c = c.slice(0, -1)), c += "<" + b[e];
  }
  this.ctatdebug("ProblemStateSaver.editForProblemState(" + a + ")\n returns " + c);
  return c;
};
ProblemStateSaver.omitFromRestore = {init:!1};
ProblemStateSaver.mustSaveForRestore = function(a) {
  ProblemStateSaver.omitFromRestore.init || (ProblemStateSaver.omitFromRestore[CTATMsgType.ASSOCIATED_RULES.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.BUGGY_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.CORRECT_ACTION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.INCORRECT_ACTION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.INTERFACE_IDENTIFICATION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_RESTORE_END.toLowerCase()] = 
  !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_SUMMARY_REQUEST.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_SUMMARY_RESPONSE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SET_PREFERENCES.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SHOW_HINTS_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SUCCESS_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore.init = !0);
  return a && ProblemStateSaver.omitFromRestore[a.toLowerCase()] ? !1 : !0;
};
ProblemStateSaver.prototype.forwardToInterface = function(a, b, c) {
  var e = CTATMsgType.getMessageType(a);
  this.ctatdebug("PSS.forwardToInterface(" + e + ") problemState.length " + this.getProblemState().length + ", outputStatus " + c);
  if (c && c.isOutputSuppressed()) {
    return !1;
  }
  CTAT.ToolTutor.sendToInterface(a, b);
  c && c.transition(CTATMsgType.getMessageType(a));
  return !0;
};
ProblemStateSaver.prototype.processMessage = function(a) {
  this.ctatdebug("ProblemStateSaver.processMessage(" + a + ")");
};
"undefined" !== typeof module && (module.exports = ProblemStateSaver);
var ProblemStateRestorer = function(a) {
  CTATBase.call(this, "ProblemStateRestorer", a);
  var b = this, c = null;
  this.getRestoreProblemUrl = function() {
    return c;
  };
  this.setRestoreProblemUrl = function(a) {
    c = a;
  };
  this.toString = function() {
    return "[" + c + ": 0]";
  };
  this.retrieveMessages = function(e) {
    b.ctatdebug("TODO ProblemStateRestorer.retrieveMessages(" + e + ", ...)");
    if (e.mustRetrieveProblemState()) {
      if (a.setWorking(1, !0), CTATBase.inOLI()) {
        oliDriver.registerClientHandler(b), oliComm.loadFileRecord(a.getQuestionFile());
      } else {
        if (CTATBase.inXBlock()) {
          e = getVariable("saveandrestore"), process(e);
        } else {
          var g = (new CTATConnection).getHTTPObject();
          g.onreadystatechange = function() {
            b.ctatdebug("onready... GET for problemState xmlhttp.readyState " + g.readyState + ", .status " + g.status);
            if (4 == g.readyState && 200 == g.status) {
              b.ctatdebug("problemState responseText: " + g.responseText);
              var a = decodeURIComponent(g.responseText);
              b.process(a);
            }
          };
          g.onerror = function() {
            a.enqueueForRestore([]);
            var d = (new CTATTutorMessageBuilder).createErrorMessage("Load ProblemState Error", g.status + " " + g.statusText);
            b.ctatdebug("onerror GET for problemState " + d);
            CTAT.ToolTutor.sendToInterface(d, !0);
          };
          g.open("GET", c, !0);
          g.send();
          b.ctatdebug("sent GET for restoreProblemUrl,  " + c);
        }
      }
    }
  };
  this.process = function(c) {
    if ("string" != typeof c) {
      console.log("ProblemStateRestorer.process() called with parameter not a string: ", typeof c), a.enqueueForRestore([]);
    } else {
      if (c.slice(0, ProblemStateSaver.MESSAGES_TAG.length) != ProblemStateSaver.MESSAGES_TAG) {
        console.log("ProblemStateRestorer.process() called with unrecognized string: ", c.slice(0, 20)), a.enqueueForRestore([]);
      } else {
        var g = [];
        if ("string" == typeof c && (c = c.split(/<\/?messages>/), b.ctatdebug("msgsArr.length " + c.length + ", msgsArr[1].length " + (c[1] ? c[1].length : -1)), !(2 > c.length))) {
          c = c[1].split("<message>");
          b.ctatdebug("problemStateArr.length " + c.length);
          for (var d = 0, f = !1, h = 1;h < c.length;++h) {
            var k = "<message>" + c[h], l = CTATMsgType.getMessageType(k);
            CTATMsgType.STATE_GRAPH == l ? f = !0 : CTATMsgType.START_STATE_END == l ? f = !1 : f ? d++ : (a.getProblemStateSaver().appendToProblemState(k, null, !0), g.push(k));
            b.ctatdebug("problemStateArr[" + h + "] " + (f ? "omit " : "keep ") + l + " omitted " + d + " kept " + g.length);
          }
        }
        a.enqueueForRestore(g);
      }
    }
  };
};
ProblemStateRestorer.prototype = Object.create(CTATBase.prototype);
ProblemStateRestorer.prototype.constructor = ProblemStateRestorer;
"undefined" !== typeof module && (module.exports = ProblemStateRestorer);
var CTATFormulaFunctions = {};
(function() {
  var a, b, c, e, g, d, f, h, k, l, m, n = [].slice;
  g = /^(\d+)?(?:$|(?:\s|^)(\d+)\/(\d+)$)/;
  e = /^\d+(\.\d\d)?$/;
  d = /((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?/g;
  l = /^[+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?$/;
  k = /^\s*\(\s*([+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?)\s*\,\s*([+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?)\s*\)\s*$/;
  h = /([bcdfghjklmnpqrstvwxz]|qu)y$/;
  f = /([bcdfghjklmnpqrstvwxz]o|[sc]h|s)$/;
  m = function(a, b) {
    var d;
    null == b && (b = !1);
    var c, f, e, g;
    e = null != (d = a[4]) ? d : a[2] + (a[3] || "");
    g = [];
    c = 0;
    for (f = e.length;c < f;c++) {
      d = e[c], (b || (b = "0" !== d)) && g.push(d);
    }
    return g.length;
  };
  c = function(a) {
    return (a[4] || a[3] || "").length - +(a[6] || 0);
  };
  b = function(a, b, d) {
    var c, f;
    return isNaN(c = +a) || isNaN(f = +b) ? d(String(a).toLowerCase(), String(b).toLowerCase()) : d(c, f);
  };
  a = function() {
    function a() {
    }
    a.printf = ("undefined" !== typeof window && null !== window ? window : global).sprintf;
    a.performInterfaceAction = function(a, b, d) {
      return CTAT.ToolTutor.sendToInterface((new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage(CTATMessage.makeTransactionId(), new CTATSAI(a, b, d)));
    };
    a.sum = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : []).reduce(function(a, b) {
        return a + +b;
      }, 0);
    };
    a.mod = function(a, b) {
      return Math.round(a) % Math.round(b);
    };
    a.modf = function(a, b) {
      return a % b;
    };
    a.IEEEremainder = a.modf;
    a.isFactor = function(a, b) {
      return 1 !== +a && 0 === b % a;
    };
    a.isMultiple = function(a, b) {
      return 0 === a % b;
    };
    a.isUnit = function(a) {
      return 1 === +a;
    };
    a.isAny = function(a, b) {
      return this.isFactor(a, b) || this.isMultiple(a, b) || this.isUnit(a);
    };
    a.gcf = function(a, b) {
      var d;
      d = [Math.abs(a), Math.abs(b)];
      a = d[0];
      for (b = d[1];0 < b;) {
        d = [b, a % b], a = d[0], b = d[1];
      }
      return a;
    };
    a.lcm = function(a, b) {
      return Math.abs(a * b) / this.gcf(a, b);
    };
    a.integerInRange = function(a, b, d) {
      var c;
      null == b && (b = -Infinity);
      null == d && (d = Infinity);
      return Math.round(b) <= (c = Math.round(a)) && c <= Math.round(d);
    };
    a.fmtDecimal = function(a, b) {
      null == b && (b = 2);
      return (+a).toFixed(Math.round(+b));
    };
    a.fmtNormal = function(a, b) {
      null == b && (b = 6);
      return this.fmtDecimal(a, b).replace(/\.0+$|(\..+?)0+$/, "$1");
    };
    a.fmtDollar = function(a, b) {
      null == b && (b = "");
      a = this.fmtDecimal(a);
      b = b.toLowerCase();
      0 <= b.indexOf("i") && (a = a.replace(/\.00$/, ""));
      return 0 <= b.indexOf("d") ? "$" + a : a;
    };
    a.dollarEquals = function() {
      var a, b;
      a = arguments[0];
      b = 2 <= arguments.length ? n.call(arguments, 1) : [];
      a = this.fmtDollar(a, "i");
      return b.some(function(b) {
        return function(d) {
          return a === b.fmtDollar(d, "i");
        };
      }(this));
    };
    a.matchWithPrecision = function(a, d) {
      var c, f;
      return (c = String(a).match(l)) && (f = String(d).match(l)) && m(c) === m(f) && b(a, d, function(a, b) {
        return a === b;
      });
    };
    a.matchWithoutPrecision = function(a, d) {
      var f, e;
      return (f = String(a).match(l)) && (e = String(d).match(l)) && (a = m(f) > m(e) ? (+a).toFixed(c(e)) : String(a)) && b(a, d, function(a, b) {
        return a === b;
      });
    };
    a.constantsConform = function() {
      var a, b;
      a = arguments[0];
      b = 2 <= arguments.length ? n.call(arguments, 1) : [];
      b = b.map(function(a) {
        return "string" === typeof a ? new RegExp("^" + a + "$", "i") : a;
      });
      return (a.match(d) || []).every(function(a) {
        return b.some(function(b) {
          return b.test(a);
        });
      });
    };
    a.constantsDollar = function(a) {
      return this.constantsConform(a, e);
    };
    a.isNumber = function(a, b, d) {
      null == b && (b = !0);
      return (b || "number" === typeof a) && !isNaN(a = +a) && (!d || a === Math.round(a));
    };
    a.isInteger = function(a, b) {
      return this.isNumber(a, b, !0);
    };
    a.isVar = function(a) {
      return /^\s*[a-zA-Z]\s*$/.test(a);
    };
    a.makeFraction = function(a, b, d) {
      null != b && null == d && (d = [0, a, b], a = d[0], b = d[1], d = d[2]);
      a = +a || 0;
      b = +b || 0;
      d = +d || 1;
      return this.isInteger(a) && this.isInteger(b) && this.isInteger(d) ? (a ? a + (b ? " " : "") : "") + (b ? b + (1 === d ? "" : "/" + d) : "") : null;
    };
    a.fractionMake = a.makeFraction;
    a.getWhole = function(a) {
      return null != (a = a.match(g)) ? a[1] || "0" : null;
    };
    a.getNumerator = function(a) {
      return null != (a = a.match(g)) ? a[2] || "0" : null;
    };
    a.getDividend = a.getNumerator;
    a.getDenominator = function(a) {
      return null != (a = a.match(g)) ? a[3] || "1" : null;
    };
    a.getDivisor = a.getDenominator;
    a.convertToMixed = function(a) {
      return null != (a = a.match(g)) ? (a[1] = (+a[1] || 0) + Math.floor((+a[2] || 0) / (+a[3] || 1)), a[2] = (+a[2] || 0) % (+a[3] || 1), this.makeFraction(a[1], a[2], a[3])) : null;
    };
    a.convertToImproper = function(a) {
      return null != (a = a.match(g)) ? (a[2] = (+a[1] || 0) * (+a[3] || 1) + (+a[2] || 0), a[1] = 0, null == a[3] && (a[3] = 1), this.makeFraction(a[1], a[2], a[3])) : null;
    };
    a.evaluateFraction = function(a) {
      return null != (a = a.match(g)) ? ((+a[1] || 0) * (+a[3] || 1) + (+a[2] || 0)) / (+a[3] || 1) : null;
    };
    a.divEvaluate = a.evaluateFraction;
    a.simplifyFraction = function(a) {
      var b;
      return null != (a = a.match(g)) ? (null != a[1] && null != a[2] && (a[1] = +a[1] + Math.floor(+a[2] / +a[3]), a[2] = +a[2] % +a[3]), b = null != a[2] ? this.gcf(+a[2], +a[3]) : 1, this.makeFraction(a[1], a[2] / b, a[3] / b)) : null;
    };
    a.fractionsimplify = a.simplifyFraction;
    a.simplifyMixed = a.simplifyFraction;
    a.simplifiedFraction = function(a) {
      var b;
      return null != (b = this.simplifyFraction(a)) ? b === a : null;
    };
    a.isSimplifiedMixed = a.simplifiedFraction;
    a.fractionEquals = function(a, b) {
      var d, c;
      return null != (d = this.evaluateFraction(a)) && null != (c = this.evaluateFraction(b)) ? d === c : null;
    };
    a.simplifiedFractionEquals = function(a, b) {
      var d, c;
      return null != (d = this.simplifiedFraction(a)) && null != (c = this.simplifiedFraction(b)) ? d && c && this.fractionEquals(a, b) : null;
    };
    a.rationalEquals = function(a, b) {
      return this.matchWithoutPrecision(+b || this.evaluateFraction(b), +a || this.evaluateFraction(a));
    };
    a.concat = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : []).reduce(function(a, b) {
        return a + b;
      }, "");
    };
    a.quote = function(a) {
      return '"' + a + '"';
    };
    a.replaceAll = function(a, b, d) {
      return a.replace(new RegExp(b, "g"), d);
    };
    a.regExMatch = function(a, b, d) {
      return ("string" === typeof a ? new RegExp(a, d) : a).test(b);
    };
    a.rm1coeff = function(a) {
      if (null != a) {
        return a.replace(/(^|[^0-9])1([a-zA-Z])/g, "$1$2");
      }
    };
    a.setMatches = function(a, b, d) {
      var c, f;
      c = a.split(d);
      f = b.split(d);
      return f.every(function(a) {
        return c.includes(a);
      }) && c.every(function(a) {
        return f.includes(a);
      });
    };
    a.pointInRange = function(a, b, d, c, f) {
      var e, g, h;
      if (e = null != b ? "function" === typeof b.match ? b.match(k) : void 0 : void 0) {
        f = [e[1], e[8], d, c], b = f[0], d = f[1], c = f[2], f = f[3];
      }
      null == c && (c = 0);
      null == f && (f = c);
      return (e = a.match(k)) && b - c <= (g = e[1]) && g <= +b + +c && d - f <= (h = e[8]) && h <= +d + +f;
    };
    a.plural = function(a, b, d, c) {
      var e;
      if (!b || 2 > a) {
        return b;
      }
      null == d && (d = h.test(e = b.toLowerCase()) ? "y" : "");
      if (!b.endsWith(d)) {
        return b;
      }
      null == c && (c = h.test(e) ? "ies" : f.test(e) ? "es" : "s");
      d.length && (b = b.split(d)[0]);
      return b + (/[A-Z]/.test(b[b.length - 1]) ? c.toUpperCase() : c);
    };
    a.totalTableDec = function(a, b, d, c) {
      return 1E3 * (+a || 0) + 100 * (+b || 0) + 10 * (+d || 0) + (+c || 0);
    };
    a.columnCell = function(a, b, d, c, f, e, g, h, k, m) {
      switch(k) {
        case "r1c1":
        ;
        case "r2c1":
        ;
        case "r3c1":
          return m ? a : f;
        case "r1c2":
        ;
        case "r2c2":
        ;
        case "r3c2":
          return m ? b : e;
        case "r1c3":
        ;
        case "r2c3":
        ;
        case "r3c3":
          return m ? d : g;
        case "r1c4":
        ;
        case "r2c4":
        ;
        case "r3c4":
          return m ? c : h;
        default:
          return 0;
      }
    };
    a.first = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : [])[0];
    };
    a.last = function() {
      var a;
      a = 1 <= arguments.length ? n.call(arguments, 0) : [];
      return a[a.length - 1];
    };
    a.chooseRandomly = function() {
      var a;
      a = 1 <= arguments.length ? n.call(arguments, 0) : [];
      return a[Math.floor(Math.random() * a.length)];
    };
    a.firstNonNull = function() {
      var a;
      return null != (a = (1 <= arguments.length ? n.call(arguments, 0) : []).find(function(a) {
        return null != a;
      })) ? a : null;
    };
    a.valueOrZero = function() {
      var a;
      return null != (a = (1 <= arguments.length ? n.call(arguments, 0) : []).find(function(a) {
        return null != a;
      })) ? a : 0;
    };
    a.hasValue = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : []).every(function(a) {
        return null != a;
      });
    };
    a.equals = function() {
      var a, b, d;
      b = arguments[0];
      d = 2 <= arguments.length ? n.call(arguments, 1) : [];
      return isNaN(a = +b) ? d.every(function(a) {
        return b === a;
      }) : d.every(function(b) {
        return a === +b;
      });
    };
    a.memberOf = function() {
      var a, b, d;
      b = arguments[0];
      d = 2 <= arguments.length ? n.call(arguments, 1) : [];
      return isNaN(a = +b) ? d.some(function(a) {
        return b === a;
      }) : d.some(function(b) {
        return a === +b;
      });
    };
    a.greaterThan = function(a, d) {
      return b(a, d, function(a, b) {
        return a > b;
      });
    };
    a.lessThan = function(a, d) {
      return b(a, d, function(a, b) {
        return a < b;
      });
    };
    a.greaterThanOrEqual = function(a, d) {
      return b(a, d, function(a, b) {
        return a >= b;
      });
    };
    a.lessThanOrEqual = function(a, d) {
      return b(a, d, function(a, b) {
        return a <= b;
      });
    };
    a.equal = function(a, d) {
      return b(a, d, function(a, b) {
        return a === b;
      });
    };
    a.notEqual = function(a, d) {
      return b(a, d, function(a, b) {
        return a !== b;
      });
    };
    a.and = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : []).reduce(function(a, b) {
        return a && b;
      }, !0);
    };
    a.or = function() {
      return (1 <= arguments.length ? n.call(arguments, 0) : []).reduce(function(a, b) {
        return a || b;
      }, !1);
    };
    a.not = function(a) {
      return !a;
    };
    a.ifThen = function(a, b, d) {
      return a ? b : d;
    };
    a.assign = function(a, b) {
      var d, c, f, e, g, h;
      h = "undefined" !== typeof window && null !== window ? window : global;
      c = a.split(".");
      f = 2 <= c.length ? n.call(c, 0, d = c.length - 1) : (d = 0, []);
      e = c[d++];
      d = 0;
      for (g = f.length;d < g;d++) {
        c = f[d], h = null != h[c] ? h[c] : h[c] = {};
      }
      return h[e] = b;
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATFormulaFunctions = a;
}).call(this);
var CTATTreeNode = {};
(function() {
  var a;
  a = function() {
    function a() {
    }
    a.operators = [["CONST"], ["VAR"], ["EXP", "SQRT"], ["UPLUS", "UMINUS"], ["ITIMES", "TIMES", "DIVIDE"], ["IDIVIDE", "REM"], ["PLUS", "MINUS"], "LESS LESSEQUAL EQUAL NOTEQUAL GREATEREQUAL GREATER".split(" ")];
    a.relationalOperators = "LESS LESSEQUAL EQUAL NOTEQUAL GREATEREQUAL GREATER".split(" ");
    a.operatorPrecedence = function(a, b) {
      return Math.sign(this.operators.findIndex(function(b) {
        return b.includes(a);
      }) - this.operators.findIndex(function(a) {
        return a.includes(b);
      }));
    };
    a.operatorStrings = {EXP:"^", SQRT:"|", UPLUS:"+", UMINUS:"-", ITIMES:"", TIMES:"*", DIVIDE:"/", IDIVIDE:"//", REM:"%", PLUS:"+", MINUS:"-", LESS:"<", LESSEQUAL:"<=", EQUAL:"=", NOTEQUAL:"!=", GREATEREQUAL:">=", GREATER:">"};
    a.toOperatorString = function(a) {
      return this.operatorStrings[a] || "";
    };
    a.diff = function(a, b) {
      return a.filter(function(a) {
        return !b.includes(a);
      });
    };
    a.prototype.addParens = function() {
      this.parens++;
      return this;
    };
    a.prototype.toString = function(a) {
      var b, g;
      this.negated() && this.setParens("MINUS");
      this.inverted() && this.setParens("DIVIDE");
      this.inverted() && (a = "1/" + a);
      this.negated() && (a = "-" + a);
      b = 0;
      for (g = this.parens;0 <= g ? b < g : b > g;0 <= g ? ++b : --b) {
        a = "(" + a + ")";
      }
      return a;
    };
    a.prototype.setParens = function(c, e) {
      var g;
      null == e && (e = !1);
      g = this.negated() ? "UMINUS" : this.inverted() ? "DIVIDE" : this.operator;
      g = a.operatorPrecedence(c, g);
      if (0 > g || 0 === g && e) {
        this.parens = 1;
      }
      return this;
    };
    a.prototype.evaluate = function(a) {
      return this.sign * Math.pow(a, this.exp);
    };
    a.prototype.equals = function(a) {
      return a && this.operator === a.operator && this.sign === a.sign && this.exp === a.exp && this.parens === a.parens;
    };
    a.prototype.simplify = function(a) {
      this.methods = a;
      return this.simplifyNode(this.methods);
    };
    a.prototype.simplifyNode = function(a) {
      var b, g, d, f;
      this.methods = a;
      f = this;
      d = this.methods;
      a = 0;
      for (b = d.length;a < b;a++) {
        g = d[a], f = f[g].call(f), f.methods = this.methods;
      }
      delete f.methods;
      return f;
    };
    a.prototype.simpleFlatten = function() {
      return this;
    };
    a.prototype.flatten = function() {
      this.parens = 0;
      return this;
    };
    a.prototype.computeConstants = function() {
      return this;
    };
    a.prototype.combineSimilar = function() {
      return this;
    };
    a.prototype.expand = function() {
      return this;
    };
    a.prototype.distribute = function() {
      return this;
    };
    a.prototype.removeIdentity = function() {
      return this;
    };
    a.prototype.sort = function() {
      return this;
    };
    a.prototype.spreadIdentity = function() {
      return this;
    };
    a.prototype.stripIdentity = function() {
      return this;
    };
    a.prototype.multiplyOne = function() {
      return (new CTATMultiplicationNode("TIMES", [new CTATConstantNode(1), this])).popNegation().pushNegation();
    };
    a.prototype.powerOne = function() {
      return (new CTATPowerNode("EXP", this, new CTATConstantNode(1))).popInversion().pushInversion().popNegation();
    };
    a.prototype.compare = function(c, e) {
      return a.operatorPrecedence(this.operator, c.operator);
    };
    a.prototype.compareSigns = function(a, b) {
      return (Math.sign(this.sign - a.sign) || Math.sign(this.exp - a.exp)) * b;
    };
    a.prototype.countVariables = function() {
      return 0;
    };
    a.prototype.pushNegation = function() {
      return this;
    };
    a.prototype.popNegation = function() {
      return this;
    };
    a.prototype.pushInversion = function() {
      return this;
    };
    a.prototype.popInversion = function() {
      return this;
    };
    a.prototype.negate = function() {
      this.sign = -this.sign;
      return this;
    };
    a.prototype.invert = function() {
      this.exp = -this.exp;
      return this;
    };
    a.prototype.addition = function() {
      return "PLUS" === this.operator;
    };
    a.prototype.subtraction = function() {
      return "MINUS" === this.operator;
    };
    a.prototype.multiplication = function() {
      return "TIMES" === this.operator;
    };
    a.prototype.division = function() {
      return "DIVIDE" === this.operator;
    };
    a.prototype.intDivision = function() {
      return "IDIVIDE" === this.operator;
    };
    a.prototype.power = function() {
      return "EXP" === this.operator;
    };
    a.prototype.root = function() {
      return "SQRT" === this.operator;
    };
    a.prototype.negation = function() {
      return "UMINUS" === this.operator;
    };
    a.prototype.constant = function(a) {
      return !1;
    };
    a.prototype.integer = function() {
      return !1;
    };
    a.prototype.negated = function() {
      return 0 > this.sign;
    };
    a.prototype.inverted = function() {
      return 0 > this.exp;
    };
    a.prototype.parented = function() {
      return 0 < this.parens;
    };
    a.prototype.even = function() {
      return !1;
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATTreeNode = a;
}).call(this);
var CTATRelationNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l, m) {
      this.operator = a;
      this.left = b;
      this.right = e;
      this.parens = null != g ? g : 0;
      this.sign = null != l ? l : 1;
      this.exp = null != m ? m : 1;
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.left.clone(), this.right.clone(), this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      var a;
      this.left.setParens(this.operator);
      this.right.setParens(this.operator);
      a = CTATTreeNode.toOperatorString(this.operator);
      return c.__super__.toString.call(this, "" + this.left.toString() + a + this.right.toString());
    };
    c.prototype.evaluate = function() {
      var a, b;
      a = this.left.evaluate();
      b = this.right.evaluate();
      switch(this.operator) {
        case "LESS":
          return a < b;
        case "GREATER":
          return a > b;
        case "LESSEQUAL":
          return a <= b;
        case "GREATEREQUAL":
          return a >= b;
        case "EQUAL":
          return a === b;
        case "NOTEQUAL":
          return a !== b;
      }
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.left.equals(a.left) && this.right.equals(a.right);
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.left = this.left.simplify(this.methods);
      this.right = this.right.simplify(this.methods);
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.computeConstants = function() {
      return this.left.constant() && this.right.constant() ? new CTATConstantNode(this.evaluate()) : this;
    };
    c.prototype.sort = function() {
      var a;
      switch(this.operator) {
        case "GREATER":
          this.operator = "LESS";
          a = [this.right, this.left];
          this.left = a[0];
          this.right = a[1];
          break;
        case "GREATEREQUAL":
          this.operator = "LESSEQUAL";
          a = [this.right, this.left];
          this.left = a[0];
          this.right = a[1];
          break;
        case "EQUAL":
        ;
        case "NOTEQUAL":
          0 > this.left.compare(this.right) && (a = [this.right, this.left], this.left = a[0], this.right = a[1]);
      }
      return this;
    };
    c.prototype.countVariables = function() {
      return this.left.countVariables() + this.right.countVariables();
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATRelationNode = a;
}).call(this);
var CTATAdditionNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l) {
      this.operator = a;
      this.terms = b;
      this.parens = null != e ? e : 0;
      this.sign = null != g ? g : 1;
      this.exp = null != l ? l : 1;
      this.subtraction() && this.terms[1].negate();
      this.operator = "PLUS";
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.terms.map(function(a) {
        return a.clone();
      }), this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      return c.__super__.toString.call(this, this.terms.reduce(function(a) {
        return function(b, c) {
          c.setParens(a.operator);
          return "" + b + (b && !c.negated() ? "+" : "") + c.toString();
        };
      }(this)));
    };
    c.prototype.evaluate = function() {
      return c.__super__.evaluate.call(this, this.terms.reduce(function(a, b) {
        return a + b.evaluate();
      }, 0));
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.terms.length === a.terms.length && this.terms.every(function(b, c) {
        return b.equals(a.terms[c]);
      });
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.terms = this.terms.map(function(a) {
        return function(b) {
          return b.simplify(a.methods);
        };
      }(this));
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.simpleFlatten = function() {
      this.terms = this.terms.reduce(function(a, b) {
        b.inverted() || b.parented() || !b.addition() ? a.push(b) : a.push.apply(a, b.pushNegation().terms);
        return a;
      }, []);
      return this;
    };
    c.prototype.flatten = function() {
      c.__super__.flatten.apply(this, arguments);
      this.simpleFlatten();
      return this.pushNegation();
    };
    c.prototype.computeConstants = function() {
      var a;
      a = 0;
      this.terms = this.terms.filter(function(b) {
        return b.constant() ? (a += b.evaluate(), !1) : !0;
      });
      0 === a && 0 !== this.terms.length || this.terms.unshift(new CTATConstantNode(a));
      return 1 < this.terms.length ? this : this.pushInversion().terms[0];
    };
    c.prototype.combineSimilar = function() {
      var a;
      a = [];
      this.terms.forEach(function(b) {
        var c, e;
        e = b.constant() ? [null, b] : (b = b.multiplyOne(), [b, b.factors.shift()]);
        return (c = a.find(function(a) {
          var b;
          return null != (b = a[0]) ? b.equals(e[0]) : void 0;
        })) ? c[1] += e[1].evaluate() : a.push([e[0], e[1].evaluate()]);
      });
      this.terms = a.reduce(function(a, b) {
        0 !== b[1] && (b[1] = (new CTATConstantNode(b[1])).popNegation(), b[0] ? (b[0].factors.unshift(b[1]), a.push(b[0].removeIdentity())) : a.push(b[1]));
        return a;
      }, []);
      if (1 < this.terms.length) {
        return this;
      }
      1 !== this.terms.length && (this.terms[0] = new CTATConstantNode(0));
      return this.pushInversion().terms[0];
    };
    c.prototype.removeIdentity = function() {
      var a;
      a = this.terms.filter(function(a) {
        return !a.constant(0);
      });
      this.terms = a.length ? a : this.terms.slice(0, 1);
      return 1 < this.terms.length ? this : this.pushInversion().terms[0];
    };
    c.prototype.sort = function() {
      this.spreadIdentity();
      this.terms = this.terms.sort(function(a, b) {
        return -a.compare(b, !0);
      });
      return this.stripIdentity();
    };
    c.prototype.spreadIdentity = function() {
      this.terms = this.terms.map(function(a) {
        return a.multiplyOne();
      });
      return this;
    };
    c.prototype.stripIdentity = function() {
      this.terms = this.terms.map(function(a) {
        return a.removeIdentity();
      });
      return this;
    };
    c.prototype.compare = function(a, b) {
      var e;
      return (e = c.__super__.compare.apply(this, arguments)) || this.countVariables() - a.countVariables() || this.terms.some(function(c, g) {
        return e = c.compare(a.terms[g], b);
      }) && e || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return this.terms.reduce(function(a, b) {
        return a + b.countVariables();
      }, 0);
    };
    c.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.terms.forEach(function(a) {
        return a.negate();
      }));
      return this;
    };
    c.prototype.popNegation = function() {
      this.terms[0].negated() && (this.negate(), this.terms.forEach(function(a) {
        return a.negate();
      }));
      return this;
    };
    c.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.terms[0].invert());
      return this;
    };
    c.prototype.even = function() {
      return !this.inverted && this.terms.every(function(a) {
        return a.even();
      });
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATAdditionNode = a;
}).call(this);
var CTATMultiplicationNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l) {
      this.operator = a;
      this.factors = b;
      this.parens = null != e ? e : 0;
      this.sign = null != g ? g : 1;
      this.exp = null != l ? l : 1;
      this.division() && this.factors[1].invert();
      this.operator = "TIMES";
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.factors.map(function(a) {
        return a.clone();
      }), this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      return c.__super__.toString.call(this, this.factors.reduce(function(a) {
        return function(b, c) {
          var e;
          c.setParens(a.operator);
          e = c.inverted() ? (c.invert(), "/") : /^\d/.test(c = c.toString()) && /\d$/.test(b) ? "*" : "";
          return "" + b + e + c;
        };
      }(this), this.factors[0].inverted() ? "1" : ""));
    };
    c.prototype.evaluate = function() {
      return c.__super__.evaluate.call(this, this.factors.reduce(function(a, b) {
        return a * b.evaluate();
      }, 1));
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.factors.length === a.factors.length && this.factors.every(function(b, c) {
        return b.equals(a.factors[c]);
      });
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.factors = this.factors.map(function(a) {
        return function(b) {
          return b.simplify(a.methods);
        };
      }(this));
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.simpleFlatten = function() {
      this.factors = this.factors.reduce(function(a, b) {
        b.parented() || !b.multiplication() ? a.push(b) : a.push.apply(a, b.pushNegation().pushInversion().factors);
        return a;
      }, []);
      return this;
    };
    c.prototype.flatten = function() {
      c.__super__.flatten.apply(this, arguments);
      this.simpleFlatten();
      return this.popNegation();
    };
    c.prototype.computeConstants = function() {
      var a;
      a = 1;
      this.factors = this.factors.filter(function(b) {
        return b.constant() ? (a *= b.evaluate(), !1) : !0;
      });
      1 === a && 0 !== this.factors.length || this.factors.unshift(new CTATConstantNode(a));
      return 1 < this.factors.length ? this : this.pushNegation().pushInversion().factors[0];
    };
    c.prototype.combineSimilar = function() {
      var a;
      a = [];
      this.factors.forEach(function(b) {
        var c, e, g, m;
        m = b.constant() ? [null, b] : b.power() ? b.exponent.constant() ? (b.pushInversion(), [b.base, b.exponent]) : (b.exponent = b.exponent.multiplyOne(), [b, b.exponent.factors.shift()]) : (b = b.powerOne(), [b.base, b.exponent]);
        return (c = a.find(function(a) {
          var b;
          return null != (b = a[0]) ? b.equals(m[0]) : void 0;
        })) ? c[1] += (null != (e = m[1]) ? e.evaluate() : void 0) || 1 : a.push([m[0], (null != (g = m[1]) ? g.evaluate() : void 0) || 1]);
      });
      this.factors = a.reduce(function(a, b) {
        0 !== b[1] && (b[1] = (new CTATConstantNode(b[1])).popNegation(), b[0] ? b[1].constant(1) ? a.push(b[0]) : b[0].power() ? (b[0].exponent.factors.unshift(b[1]), a.push(b[0])) : a.push(new CTATPowerNode("EXP", b[0], b[1])) : a.push(b[1]));
        return a;
      }, []);
      if (1 < this.factors.length) {
        return this;
      }
      1 !== this.factors.length && (this.factors[0] = new CTATConstantNode(1));
      return this.pushNegation().pushInversion().factors[0];
    };
    c.prototype.distribute = function() {
      var a, b;
      a = this.factors.filter(function(a) {
        return !a.inverted();
      });
      b = this.factors.filter(function(a) {
        return a.inverted();
      });
      return !this.distributedOrSingle(a) || !this.distributedOrSingle(b) || this.single(a) && b.length && this.distributed(b) ? (this.distributed(b) ? (a = this.distributeFactors(this.factors), b = []) : this.distributed(a) ? (b = this.distributeFactors(this.factors), a = []) : (a = this.distributeFactors(a), b = this.distributeFactors(b)), this.factors = b.length ? a.length ? [this.packTerms(a), this.packTerms(b).invert()] : [this.packTerms(b).invert()] : [this.packTerms(a)], 1 < this.factors.length ? 
      this : this.pushNegation().pushInversion().factors[0]) : this;
    };
    c.prototype.distributedOrSingle = function(a) {
      return this.distributed(a) || this.single(a);
    };
    c.prototype.distributed = function(a) {
      return a.every(function(a) {
        return !a.addition();
      });
    };
    c.prototype.single = function(a) {
      return 1 === a.length && a[0].addition();
    };
    c.prototype.distributeFactors = function(a) {
      var b;
      b = a[0].addition() ? a[0].terms.map(function(a) {
        return a.multiplication() ? a.pushNegation().factors : [a];
      }) : [[a[0]]];
      a.slice(1).forEach(function(a) {
        var c;
        return a.addition() ? 1 === b.length ? b = a.terms.map(function(a) {
          var c;
          c = b[0].map(function(a) {
            return a.clone();
          });
          a.multiplication() ? c.push.apply(c, a.pushNegation().factors) : c.push(a);
          return c;
        }) : b = b.reduce(function(b, c) {
          b.push.apply(b, a.terms.map(function(a) {
            var b;
            b = c.map(function(a) {
              return a.clone();
            });
            a.multiplication() ? b.push.apply(b, a.pushNegation().factors.map(function(a) {
              return a.clone();
            })) : b.push(a.clone());
            return b;
          }));
          return b;
        }, []) : 1 === b.length ? a.multiplication() ? (c = b[0]).push.apply(c, a.pushNegation().factors) : b[0].push(a) : b.forEach(function(c, d) {
          var e;
          return a.multiplication() ? (e = b[d]).push.apply(e, a.pushNegation().factors.map(function(a) {
            return a.clone();
          })) : b[d].push(a.clone());
        });
      });
      return b;
    };
    c.prototype.packTerms = function(a) {
      var b;
      b = ["computeConstants", "combineSimilar", "expand", "removeIdentity", "sort"];
      return (new CTATAdditionNode("PLUS", a.map(function(a) {
        return (new c("TIMES", a)).popNegation().simplifyNode(b);
      }))).popNegation().simplifyNode(b);
    };
    c.prototype.removeIdentity = function() {
      var a;
      this.popNegation();
      a = this.factors.filter(function(a) {
        return !a.constant(1);
      });
      this.factors = a.length ? a : this.factors.slice(0, 1);
      (a = this.factors.find(function(a) {
        return a.constant(0);
      })) && this.factors.every(function(a) {
        return !a.inverted() && (!a.power() || a.exponent.constant());
      }) && (this.factors = [a]);
      return 1 < this.factors.length ? this : this.pushNegation().pushInversion().factors[0];
    };
    c.prototype.sort = function() {
      this.spreadIdentity();
      this.factors = this.factors.sort(function(a, b) {
        return a.compare(b);
      });
      return this.stripIdentity();
    };
    c.prototype.spreadIdentity = function() {
      this.factors = this.factors.map(function(a) {
        return a.powerOne();
      });
      return this;
    };
    c.prototype.stripIdentity = function() {
      this.factors = this.factors.map(function(a) {
        return a.removeIdentity();
      });
      return this.popNegation();
    };
    c.prototype.multiplyOne = function() {
      this.factors[0].constant() || this.factors.unshift(new CTATConstantNode(1));
      return this.pushNegation();
    };
    c.prototype.compare = function(a, b) {
      var e, k;
      return (k = c.__super__.compare.apply(this, arguments)) || this.countVariables() - a.countVariables() || (e = a.factors.slice(0).reverse()) && this.factors.slice(0).reverse().some(function(a, c) {
        return k = a.compare(e[c], b);
      }) && k || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return this.factors.reduce(function(a, b) {
        return a + b.countVariables();
      }, 0);
    };
    c.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.factors[0].negate());
      return this;
    };
    c.prototype.popNegation = function() {
      this.factors.forEach(function(a) {
        return function(b) {
          if (b.negated()) {
            return a.negate(), b.negate();
          }
        };
      }(this));
      return this;
    };
    c.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.factors.forEach(function(a) {
        return a.invert();
      }));
      return this;
    };
    c.prototype.even = function() {
      return !this.inverted() && this.factors.every(function(a) {
        return a.integer();
      }) && this.factors.some(function(a) {
        return a.even();
      });
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATMultiplicationNode = a;
}).call(this);
var CTATIntDivisionNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l, m) {
      this.operator = a;
      this.dividend = b;
      this.divisor = e;
      this.parens = null != g ? g : 0;
      this.sign = null != l ? l : 1;
      this.exp = null != m ? m : 1;
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.dividend.clone(), this.divisor.clone(), this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      this.dividend.setParens(this.operator);
      this.divisor.setParens(this.operator, !0);
      return c.__super__.toString.call(this, "" + this.dividend.toString() + CTATTreeNode.toOperatorString(this.operator) + this.divisor.toString());
    };
    c.prototype.evaluate = function() {
      return c.__super__.evaluate.call(this, function() {
        switch(this.operator) {
          case "REM":
            return this.dividend.evaluate() % this.divisor.evaluate();
          case "IDIVIDE":
            return Math.floor(this.dividend.evaluate() / this.divisor.evaluate());
        }
      }.call(this));
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.dividend.equals(a.dividend) && this.divisor.equals(a.divisor);
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.dividend = this.dividend.simplify(this.methods);
      this.divisor = this.divisor.simplify(this.methods);
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.computeConstants = function() {
      return this.dividend.constant() && this.divisor.constant() ? new CTATConstantNode(this.evaluate()) : this;
    };
    c.prototype.removeIdentity = function() {
      return this.divisor.constant(1) ? (this.intDivision() || (this.dividend = new CTATConstantNode(0)), this.pushNegation().pushInversion().dividend) : this.popNegation();
    };
    c.prototype.compare = function(a, b) {
      return c.__super__.compare.apply(this, arguments) || this.dividend.compare(a.dividend, b) || this.divisor.compare(a.divisor, b) || this.operator !== a.operator && (this.intDivision() && -1 || 1) || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return this.dividend.countVariables() + divisor.countVariables();
    };
    c.prototype.pushNegation = function() {
      this.intDivision() && this.negated() && (this.negate(), this.dividend.negate());
      return this;
    };
    c.prototype.pushInversion = function() {
      this.intDivision() && this.inverted() && (this.invert(), this.dividend.invert());
      return this;
    };
    c.prototype.popNegation = function() {
      this.divisor.negated() && (this.divisor.negate(), this.intDivision() && this.dividend.negate());
      return this;
    };
    c.prototype.even = function() {
      return !this.inverted && "REM" === this.operator && this.dividend.even() && this.divisor.even();
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATIntDivisionNode = a;
}).call(this);
var CTATUnaryNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l) {
      this.operator = a;
      this.base = b;
      this.parens = null != e ? e : 0;
      this.sign = null != g ? g : 1;
      this.exp = null != l ? l : 1;
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.base, this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      return c.__super__.toString.call(this, "" + CTATTreeNode.toOperatorString(this.operator) + this.base.toString());
    };
    c.prototype.evaluate = function() {
      this.negation() && (this.sign = -this.sign);
      return c.__super__.evaluate.call(this, this.base.evaluate());
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.base.equals(a.base);
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.base = this.base.simplify(this.methods);
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.flatten = function() {
      c.__super__.flatten.apply(this, arguments);
      this.negation() && this.negate();
      return this.pushNegation().pushInversion().base;
    };
    c.prototype.compare = function(a, b) {
      return c.__super__.compare.apply(this, arguments) || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return this.base.countVariables();
    };
    c.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.base.negate());
      return this;
    };
    c.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATUnaryNode = a;
}).call(this);
var CTATPowerNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l, m) {
      this.operator = a;
      this.base = b;
      this.exponent = e;
      this.parens = null != g ? g : 0;
      this.sign = null != l ? l : 1;
      this.exp = null != m ? m : 1;
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.operator, this.base.clone(), this.exponent.clone(), this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      this.base.setParens(this.operator);
      this.exponent.setParens(this.operator);
      return c.__super__.toString.call(this, "" + this.base.toString() + CTATTreeNode.toOperatorString(this.operator) + this.exponent.toString());
    };
    c.prototype.evaluate = function() {
      return c.__super__.evaluate.call(this, Math.pow(this.base.evaluate(), this.exponent.evaluate()));
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.base.equals(a.base) && this.exponent.equals(a.exponent);
    };
    c.prototype.simplify = function(a) {
      this.methods = a;
      this.base = this.base.simplify(this.methods);
      this.exponent = this.exponent.simplify(this.methods);
      return c.__super__.simplify.apply(this, arguments);
    };
    c.prototype.flatten = function() {
      var a, b;
      c.__super__.flatten.apply(this, arguments);
      this.operator = "EXP";
      this.popNegation().popInversion();
      return this.base.power() ? (b = CTATTreeNode.diff(this.methods, ["flatten"]), a = this.base.exponent.multiplication() ? this.base.exponent.pushNegation().pushInversion().factors : [this.base.exponent], this.exponent.multiplication() ? a.push.apply(a, this.exponent.pushNegation().pushInversion().factors) : a.push(this.exponent), this.base.exponent = (new CTATMultiplicationNode("TIMES", a)).simplifyNode(b), this.pushBaseNegation().pushBaseInversion().base) : this;
    };
    c.prototype.computeConstants = function() {
      return this.base.constant() && (this.exponent.constant() || this.exponent.multiplication() && this.exponent.factors[0].constant()) ? (this.exponent.constant() ? (this.base = new CTATConstantNode(this.evaluate()), this.exponent = null) : (this.base = new CTATConstantNode((new c("EXP", this.base, this.exponent.factors.shift())).evaluate()), 1 === this.exponent.factors.length && (this.exponent = this.exponent.pushNegation().pushInversion().factors[0])), this.exponent ? this : this.pushBaseNegation().pushBaseInversion().base) : 
      this;
    };
    c.prototype.powerOne = function() {
      this.exponent = this.exponent.multiplyOne();
      return this.pushInversion();
    };
    c.prototype.expand = function() {
      var a, b, c;
      if (this.base.addition() && (this.exponent.integer() && 1 < this.exponent.value || this.exponent.multiplication() && this.exponent.factors[0].integer() && 1 < this.exponent.factors[0].value)) {
        this.exponent.integer() ? (a = this.exponent, this.exponent = null) : (a = this.exponent.factors.shift(), 1 === this.exponent.factors.length && (this.exponent = this.exponent.pushNegation().pushInversion().factors[0]));
        b = [this.base];
        c = 1;
        for (a = a.evaluate();1 <= a ? c < a : c > a;1 <= a ? ++c : --c) {
          b.push(this.base.clone());
        }
        this.base = (new CTATMultiplicationNode("TIMES", b)).simplifyNode(["distribute"]);
        return this.exponent ? this : this.pushBaseNegation().pushBaseInversion().base;
      }
      return this;
    };
    c.prototype.distribute = function() {
      var a;
      return this.base.multiplication() || this.exponent.addition() ? (a = this.base.multiplication() ? this.base.pushNegation().pushInversion().factors : [this.base], a = this.exponent.addition() ? a.reduce(function(a) {
        return function(b, c) {
          b.push.apply(b, a.exponent.terms.map(function(a) {
            return [c.clone(), a.clone()];
          }));
          return b;
        };
      }(this), []) : a.map(function(a) {
        return function(b) {
          return [b, a.exponent.clone()];
        };
      }(this)), this.base = this.packFactors(a), this.pushBaseNegation().pushBaseInversion().base) : this;
    };
    c.prototype.packFactors = function(a) {
      var b;
      b = CTATTreeNode.diff(this.methods, ["flatten"]);
      return new CTATMultiplicationNode("TIMES", a.map(function(a) {
        return (new c("EXP", a[0], a[1])).simplifyNode(b);
      }));
    };
    c.prototype.removeIdentity = function() {
      this.popInversion();
      if (this.exponent.constant(0)) {
        return this.base = new CTATConstantNode(1), this.pushBaseNegation().base;
      }
      if (this.base.constant(0)) {
        return this.pushBaseInversion().base;
      }
      if (this.exponent.constant(1)) {
        return this.pushBaseNegation().pushBaseInversion().base;
      }
      this.exponent = this.exponent.removeIdentity();
      return this;
    };
    c.prototype.compare = function(a, b) {
      return c.__super__.compare.apply(this, arguments) || (this.countVariables() - a.countVariables()) * (b ? -1 : 1) || this.exponent.compare(a.exponent, b) || this.base.compare(a.base, b) || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return this.base.countVariables() * (this.exponent.constant() ? Math.abs(this.exponent.evaluate()) : Infinity);
    };
    c.prototype.pushBaseNegation = function() {
      this.negated() && (this.negate(), this.base.negate());
      return this;
    };
    c.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.exponent.negate());
      return this;
    };
    c.prototype.pushBaseInversion = function() {
      this.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    c.prototype.popNegation = function() {
      this.base.negated() && this.exponent.constant() && (this.base.negate(), this.exponent.even() || this.negate());
      return this;
    };
    c.prototype.popInversion = function() {
      this.exponent.negated() && (this.invert(), this.exponent.negate());
      this.base.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    c.prototype.even = function() {
      return !this.inverted() && this.base.even() && this.exponent.integer();
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATPowerNode = a;
}).call(this);
var CTATVariableNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g, l) {
      this.variableTable = a;
      this.variable = b;
      this.parens = null != e ? e : 0;
      this.sign = null != g ? g : 1;
      this.exp = null != l ? l : 1;
      this.operator = "VAR";
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.variableTable, this.variable, this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      return c.__super__.toString.call(this, this.variable);
    };
    c.prototype.evaluate = function() {
      var a;
      return c.__super__.evaluate.call(this, (null != (a = this.variableTable) ? a.get(this.variable) : void 0) || function() {
        try {
          return eval(this.variable);
        } catch (a) {
          return NaN;
        }
      }.call(this));
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.variable === a.variable;
    };
    c.prototype.compare = function(a, b) {
      b = null != b ? -1 : 1;
      return c.__super__.compare.apply(this, arguments) || this.variable > a.variable && b || this.variable < a.variable && -b || this.compareSigns(a, b);
    };
    c.prototype.countVariables = function() {
      return 1;
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATVariableNode = a;
}).call(this);
var CTATConstantNode = {};
(function() {
  var a, b = function(a, b) {
    function d() {
      this.constructor = a;
    }
    for (var f in b) {
      c.call(b, f) && (a[f] = b[f]);
    }
    d.prototype = b.prototype;
    a.prototype = new d;
    a.__super__ = b.prototype;
    return a;
  }, c = {}.hasOwnProperty;
  a = function(a) {
    function c(a, b, e, g) {
      this.value = a;
      this.parens = null != b ? b : 0;
      this.sign = null != e ? e : 1;
      this.exp = null != g ? g : 1;
      this.operator = "CONST";
    }
    b(c, a);
    c.prototype.clone = function() {
      return new c(this.value, this.parens, this.sign, this.exp);
    };
    c.prototype.toString = function() {
      return c.__super__.toString.call(this, this.value.toString());
    };
    c.prototype.evaluate = function() {
      return c.__super__.evaluate.call(this, this.value);
    };
    c.prototype.equals = function(a) {
      return c.__super__.equals.call(this, a) && this.value === a.value;
    };
    c.prototype.multiplyOne = function() {
      return this;
    };
    c.prototype.powerOne = function() {
      return this;
    };
    c.prototype.compare = function(a, b) {
      b = null != b ? 1 : -1;
      return c.__super__.compare.apply(this, arguments) || Math.sign(Math.abs(this.evaluate()) - Math.abs(a.evaluate())) * b || this.compareSigns(a, b);
    };
    c.prototype.popNegation = function() {
      0 > this.value && (this.negate(), this.value = -this.value);
      return this;
    };
    c.prototype.constant = function(a) {
      return null == a || this.evaluate() === a;
    };
    c.prototype.integer = function() {
      return Math.floor(this.evaluate()) === this.value;
    };
    c.prototype.even = function() {
      return 0 === this.evaluate() % 2;
    };
    return c;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATConstantNode = a;
}).call(this);
var CTATAlgebraGrammar = {}, parser = function() {
  function a() {
    this.yy = {};
  }
  var b = function(a, b, c, d) {
    c = c || {};
    for (d = a.length;d--;c[a[d]] = b) {
    }
    return c;
  }, c = [1, 6], e = [1, 7], g = [1, 10], d = [1, 11], f = [1, 12], h = [1, 13], k = [1, 21], l = [1, 22], m = [5, 7, 8, 9, 10, 11, 12, 13, 15, 26], n = [1, 23], p = [1, 24], u = [1, 26], t = [1, 27], v = [5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 21, 24, 25, 26, 27, 28], w = [5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28], b = {trace:function() {
  }, yy:{}, symbols_:{error:2, expression:3, relational:4, EOF:5, arithmetic:6, LESS:7, GREATER:8, LESSEQUAL:9, GREATEREQUAL:10, EQUAL:11, NOTEQUAL:12, PLUS:13, term:14, MINUS:15, TIMES:16, signedfactor:17, DIVIDE:18, factor:19, IDIVIDE:20, REM:21, atom:22, EXP:23, SQRT:24, LPAREN:25, RPAREN:26, VARIABLE:27, NUMBER:28, $accept:0, $end:1}, terminals_:{2:"error", 5:"EOF", 7:"LESS", 8:"GREATER", 9:"LESSEQUAL", 10:"GREATEREQUAL", 11:"EQUAL", 12:"NOTEQUAL", 13:"PLUS", 15:"MINUS", 16:"TIMES", 18:"DIVIDE", 
  20:"IDIVIDE", 21:"REM", 23:"EXP", 24:"SQRT", 25:"LPAREN", 26:"RPAREN", 27:"VARIABLE", 28:"NUMBER"}, productions_:[0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 1], [6, 3], [6, 3], [6, 1], [14, 3], [14, 3], [14, 2], [14, 3], [14, 3], [14, 1], [17, 2], [17, 2], [17, 1], [19, 3], [19, 2], [19, 1], [22, 3], [22, 1], [22, 1]], performAction:function(a, b, c, d, f, e, g) {
    b = e.length - 1;
    switch(f) {
      case 1:
        return e[b - 1];
      case 2:
        this.$ = new d.CTATRelationNode("LESS", e[b - 2], e[b]);
        break;
      case 3:
        this.$ = new d.CTATRelationNode("GREATER", e[b - 2], e[b]);
        break;
      case 4:
        this.$ = new d.CTATRelationNode("LESSEQUAL", e[b - 2], e[b]);
        break;
      case 5:
        this.$ = new d.CTATRelationNode("GREATEREQUAL", e[b - 2], e[b]);
        break;
      case 6:
        this.$ = new d.CTATRelationNode("EQUAL", e[b - 2], e[b]);
        break;
      case 7:
        this.$ = new d.CTATRelationNode("NOTEQUAL", e[b - 2], e[b]);
        break;
      case 8:
      ;
      case 11:
      ;
      case 17:
      ;
      case 20:
      ;
      case 23:
        this.$ = e[b];
        break;
      case 9:
        this.$ = new d.CTATAdditionNode("PLUS", [e[b - 2], e[b]]);
        break;
      case 10:
        this.$ = new d.CTATAdditionNode("MINUS", [e[b - 2], e[b]]);
        break;
      case 12:
        this.$ = new d.CTATMultiplicationNode("TIMES", [e[b - 2], e[b]]);
        break;
      case 13:
        this.$ = new d.CTATMultiplicationNode("DIVIDE", [e[b - 2], e[b]]);
        break;
      case 14:
        this.$ = new d.CTATMultiplicationNode("ITIMES", [e[b - 1], e[b]]);
        break;
      case 15:
        this.$ = new d.CTATIntDivisionNode("IDIVIDE", e[b - 2], e[b]);
        break;
      case 16:
        this.$ = new d.CTATIntDivisionNode("REM", e[b - 2], e[b]);
        break;
      case 18:
        this.$ = new d.CTATUnaryNode("UPLUS", e[b]);
        break;
      case 19:
        this.$ = new d.CTATUnaryNode("UMINUS", e[b]);
        break;
      case 21:
        this.$ = new d.CTATPowerNode("EXP", e[b - 2], e[b]);
        break;
      case 22:
        this.$ = new d.CTATPowerNode("SQRT", e[b], new d.CTATConstantNode(.5));
        break;
      case 24:
        this.$ = e[b - 1].addParens();
        break;
      case 25:
        this.$ = new d.CTATVariableNode(d.variableTable, a);
        break;
      case 26:
        this.$ = new d.CTATConstantNode(Number(a));
    }
  }, table:[{3:1, 4:2, 6:3, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {1:[3]}, {5:[1, 14]}, {5:[2, 8], 7:[1, 15], 8:[1, 16], 9:[1, 17], 10:[1, 18], 11:[1, 19], 12:[1, 20], 13:k, 15:l}, b(m, [2, 11], {22:9, 19:25, 16:n, 18:p, 20:u, 21:t, 24:g, 25:d, 27:f, 28:h}), b(v, [2, 17]), {13:c, 15:e, 17:28, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {13:c, 15:e, 17:29, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, b(v, [2, 20]), b(v, [2, 23], {23:[1, 30]}), {13:c, 15:e, 17:31, 19:8, 22:9, 24:g, 25:d, 27:f, 
  28:h}, {6:32, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, b(w, [2, 25]), b(w, [2, 26]), {1:[2, 1]}, {6:33, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {6:34, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {6:35, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {6:36, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {6:37, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {6:38, 13:c, 14:4, 15:e, 17:5, 19:8, 22:9, 
  24:g, 25:d, 27:f, 28:h}, {13:c, 14:39, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {13:c, 14:40, 15:e, 17:5, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {13:c, 15:e, 17:41, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {13:c, 15:e, 17:42, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, b(v, [2, 14]), {13:c, 15:e, 17:43, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, {13:c, 15:e, 17:44, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, b(v, [2, 18]), b(v, [2, 19]), {13:c, 15:e, 17:45, 19:8, 22:9, 24:g, 25:d, 27:f, 28:h}, b(v, [2, 22]), {13:k, 
  15:l, 26:[1, 46]}, {5:[2, 2], 13:k, 15:l}, {5:[2, 3], 13:k, 15:l}, {5:[2, 4], 13:k, 15:l}, {5:[2, 5], 13:k, 15:l}, {5:[2, 6], 13:k, 15:l}, {5:[2, 7], 13:k, 15:l}, b(m, [2, 9], {22:9, 19:25, 16:n, 18:p, 20:u, 21:t, 24:g, 25:d, 27:f, 28:h}), b(m, [2, 10], {22:9, 19:25, 16:n, 18:p, 20:u, 21:t, 24:g, 25:d, 27:f, 28:h}), b(v, [2, 12]), b(v, [2, 13]), b(v, [2, 15]), b(v, [2, 16]), b(v, [2, 21]), b(w, [2, 24])], defaultActions:{14:[2, 1]}, parseError:function(a, b) {
    if (b.recoverable) {
      this.trace(a);
    } else {
      throw Error(a);
    }
  }, parse:function(a) {
    var b = [0], c = [null], d = [], e = this.table, f = "", g = 0, k = 0, h = 0, m = d.slice.call(arguments, 1), l = Object.create(this.lexer), n = {}, p;
    for (p in this.yy) {
      Object.prototype.hasOwnProperty.call(this.yy, p) && (n[p] = this.yy[p]);
    }
    l.setInput(a, n);
    n.lexer = l;
    n.parser = this;
    "undefined" == typeof l.yylloc && (l.yylloc = {});
    p = l.yylloc;
    d.push(p);
    var t = l.options && l.options.ranges;
    this.parseError = "function" === typeof n.parseError ? n.parseError : Object.getPrototypeOf(this).parseError;
    for (var H, v, u, w, L = {}, M, J;;) {
      u = b[b.length - 1];
      if (this.defaultActions[u]) {
        w = this.defaultActions[u];
      } else {
        if (null === H || "undefined" == typeof H) {
          H = void 0, H = l.lex() || 1, "number" !== typeof H && (H = this.symbols_[H] || H);
        }
        w = e[u] && e[u][H];
      }
      if ("undefined" === typeof w || !w.length || !w[0]) {
        var N = "";
        J = [];
        for (M in e[u]) {
          this.terminals_[M] && 2 < M && J.push("'" + this.terminals_[M] + "'");
        }
        N = l.showPosition ? "Parse error on line " + (g + 1) + ":\n" + l.showPosition() + "\nExpecting " + J.join(", ") + ", got '" + (this.terminals_[H] || H) + "'" : "Parse error on line " + (g + 1) + ": Unexpected " + (1 == H ? "end of input" : "'" + (this.terminals_[H] || H) + "'");
        this.parseError(N, {text:l.match, token:this.terminals_[H] || H, line:l.yylineno, loc:p, expected:J});
      }
      if (w[0] instanceof Array && 1 < w.length) {
        throw Error("Parse Error: multiple actions possible at state: " + u + ", token: " + H);
      }
      switch(w[0]) {
        case 1:
          b.push(H);
          c.push(l.yytext);
          d.push(l.yylloc);
          b.push(w[1]);
          H = null;
          v ? (H = v, v = null) : (k = l.yyleng, f = l.yytext, g = l.yylineno, p = l.yylloc, 0 < h && h--);
          break;
        case 2:
          J = this.productions_[w[1]][1];
          L.$ = c[c.length - J];
          L._$ = {first_line:d[d.length - (J || 1)].first_line, last_line:d[d.length - 1].last_line, first_column:d[d.length - (J || 1)].first_column, last_column:d[d.length - 1].last_column};
          t && (L._$.range = [d[d.length - (J || 1)].range[0], d[d.length - 1].range[1]]);
          u = this.performAction.apply(L, [f, k, g, n, w[1], c, d].concat(m));
          if ("undefined" !== typeof u) {
            return u;
          }
          J && (b = b.slice(0, -2 * J), c = c.slice(0, -1 * J), d = d.slice(0, -1 * J));
          b.push(this.productions_[w[1]][0]);
          c.push(L.$);
          d.push(L._$);
          w = e[b[b.length - 2]][b[b.length - 1]];
          b.push(w);
          break;
        case 3:
          return !0;
      }
    }
  }}, c = function() {
    return {EOF:1, parseError:function(a, b) {
      if (this.yy.parser) {
        this.yy.parser.parseError(a, b);
      } else {
        throw Error(a);
      }
    }, setInput:function(a, b) {
      this.yy = b || this.yy || {};
      this._input = a;
      this._more = this._backtrack = this.done = !1;
      this.yylineno = this.yyleng = 0;
      this.yytext = this.matched = this.match = "";
      this.conditionStack = ["INITIAL"];
      this.yylloc = {first_line:1, first_column:0, last_line:1, last_column:0};
      this.options.ranges && (this.yylloc.range = [0, 0]);
      this.offset = 0;
      return this;
    }, input:function() {
      var a = this._input[0];
      this.yytext += a;
      this.yyleng++;
      this.offset++;
      this.match += a;
      this.matched += a;
      a.match(/(?:\r\n?|\n).*/g) ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++;
      this.options.ranges && this.yylloc.range[1]++;
      this._input = this._input.slice(1);
      return a;
    }, unput:function(a) {
      var b = a.length, c = a.split(/(?:\r\n?|\n)/g);
      this._input = a + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - b);
      this.offset -= b;
      a = this.match.split(/(?:\r\n?|\n)/g);
      this.match = this.match.substr(0, this.match.length - 1);
      this.matched = this.matched.substr(0, this.matched.length - 1);
      c.length - 1 && (this.yylineno -= c.length - 1);
      var d = this.yylloc.range;
      this.yylloc = {first_line:this.yylloc.first_line, last_line:this.yylineno + 1, first_column:this.yylloc.first_column, last_column:c ? (c.length === a.length ? this.yylloc.first_column : 0) + a[a.length - c.length].length - c[0].length : this.yylloc.first_column - b};
      this.options.ranges && (this.yylloc.range = [d[0], d[0] + this.yyleng - b]);
      this.yyleng = this.yytext.length;
      return this;
    }, more:function() {
      this._more = !0;
      return this;
    }, reject:function() {
      if (this.options.backtrack_lexer) {
        this._backtrack = !0;
      } else {
        return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {text:"", token:null, line:this.yylineno});
      }
      return this;
    }, less:function(a) {
      this.unput(this.match.slice(a));
    }, pastInput:function() {
      var a = this.matched.substr(0, this.matched.length - this.match.length);
      return (20 < a.length ? "..." : "") + a.substr(-20).replace(/\n/g, "");
    }, upcomingInput:function() {
      var a = this.match;
      20 > a.length && (a += this._input.substr(0, 20 - a.length));
      return (a.substr(0, 20) + (20 < a.length ? "..." : "")).replace(/\n/g, "");
    }, showPosition:function() {
      var a = this.pastInput(), b = Array(a.length + 1).join("-");
      return a + this.upcomingInput() + "\n" + b + "^";
    }, test_match:function(a, b) {
      var c, d;
      this.options.backtrack_lexer && (d = {yylineno:this.yylineno, yylloc:{first_line:this.yylloc.first_line, last_line:this.last_line, first_column:this.yylloc.first_column, last_column:this.yylloc.last_column}, yytext:this.yytext, match:this.match, matches:this.matches, matched:this.matched, yyleng:this.yyleng, offset:this.offset, _more:this._more, _input:this._input, yy:this.yy, conditionStack:this.conditionStack.slice(0), done:this.done}, this.options.ranges && (d.yylloc.range = this.yylloc.range.slice(0)));
      if (c = a[0].match(/(?:\r\n?|\n).*/g)) {
        this.yylineno += c.length;
      }
      this.yylloc = {first_line:this.yylloc.last_line, last_line:this.yylineno + 1, first_column:this.yylloc.last_column, last_column:c ? c[c.length - 1].length - c[c.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + a[0].length};
      this.yytext += a[0];
      this.match += a[0];
      this.matches = a;
      this.yyleng = this.yytext.length;
      this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]);
      this._backtrack = this._more = !1;
      this._input = this._input.slice(a[0].length);
      this.matched += a[0];
      c = this.performAction.call(this, this.yy, this, b, this.conditionStack[this.conditionStack.length - 1]);
      this.done && this._input && (this.done = !1);
      if (c) {
        return c;
      }
      if (this._backtrack) {
        for (var e in d) {
          this[e] = d[e];
        }
      }
      return !1;
    }, next:function() {
      if (this.done) {
        return this.EOF;
      }
      this._input || (this.done = !0);
      var a, b, c;
      this._more || (this.match = this.yytext = "");
      for (var d = this._currentRules(), e = 0;e < d.length;e++) {
        if ((b = this._input.match(this.rules[d[e]])) && (!a || b[0].length > a[0].length)) {
          if (a = b, c = e, this.options.backtrack_lexer) {
            a = this.test_match(b, d[e]);
            if (!1 !== a) {
              return a;
            }
            if (this._backtrack) {
              a = !1;
            } else {
              return !1;
            }
          } else {
            if (!this.options.flex) {
              break;
            }
          }
        }
      }
      return a ? (a = this.test_match(a, d[c]), !1 !== a ? a : !1) : "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {text:"", token:null, line:this.yylineno});
    }, lex:function() {
      var a = this.next();
      return a ? a : this.lex();
    }, begin:function(a) {
      this.conditionStack.push(a);
    }, popState:function() {
      return 0 < this.conditionStack.length - 1 ? this.conditionStack.pop() : this.conditionStack[0];
    }, _currentRules:function() {
      return this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1] ? this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules : this.conditions.INITIAL.rules;
    }, topState:function(a) {
      a = this.conditionStack.length - 1 - Math.abs(a || 0);
      return 0 <= a ? this.conditionStack[a] : "INITIAL";
    }, pushState:function(a) {
      this.begin(a);
    }, stateStackSize:function() {
      return this.conditionStack.length;
    }, options:{}, performAction:function(a, b, c, d) {
      switch(c) {
        case 1:
          return 25;
        case 2:
          return 26;
        case 3:
          return 23;
        case 4:
          return 23;
        case 5:
          return 24;
        case 6:
          return 24;
        case 7:
          return 16;
        case 8:
          return 20;
        case 9:
          return 18;
        case 10:
          return 21;
        case 11:
          return 15;
        case 12:
          return 13;
        case 13:
          return 9;
        case 14:
          return 10;
        case 15:
          return 7;
        case 16:
          return 8;
        case 17:
          return 11;
        case 18:
          return 12;
        case 19:
          return 28;
        case 20:
          return 28;
        case 21:
          return 27;
        case 22:
          return 5;
      }
    }, rules:[/^(?:\s+)/, /^(?:\()/, /^(?:\))/, /^(?:\*\*)/, /^(?:\^)/, /^(?:\|)/, /^(?:\u221a)/, /^(?:\*)/, /^(?:\/\/)/, /^(?:\/)/, /^(?:%)/, /^(?:-)/, /^(?:\+)/, /^(?:<=)/, /^(?:>=)/, /^(?:<)/, /^(?:>)/, /^(?:==)/, /^(?:!=)/, /^(?:(([0-9])+\.?([0-9])*|\.([0-9])+)([Ee][+-]?([0-9])+)?)/, /^(?:(0[Bb]([0-1])+|0[Oo]([0-7])+|0[Xx]([0-9A-Fa-f])+))/, /^(?:([A-Za-z]))/, /^(?:$)/], conditions:{INITIAL:{rules:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], inclusive:!0}}};
  }();
  b.lexer = c;
  a.prototype = b;
  b.Parser = a;
  return new a;
}();
"undefined" !== typeof require && "undefined" !== typeof exports && (exports.parser = parser, exports.Parser = parser.Parser, exports.parse = function() {
  return parser.parse.apply(parser, arguments);
}, exports.main = function(a) {
  a[1] || (console.log("Usage: " + a[0] + " FILE"), process.exit(1));
  a = require("fs").readFileSync(require("path").normalize(a[1]), "utf8");
  return exports.parser.parse(a);
}, "undefined" !== typeof module && require.main === module && exports.main(process.argv.slice(1)));
var CTATAlgebraParser = {};
(function() {
  var a;
  a = function() {
    function a(b) {
      this.parser = new parser.Parser;
      this.parser.yy = {CTATRelationNode:CTATRelationNode, CTATAdditionNode:CTATAdditionNode, CTATMultiplicationNode:CTATMultiplicationNode, CTATIntDivisionNode:CTATIntDivisionNode, CTATUnaryNode:CTATUnaryNode, CTATPowerNode:CTATPowerNode, CTATVariableNode:CTATVariableNode, CTATConstantNode:CTATConstantNode, CTATTreeNode:CTATTreeNode};
      this.parser.yy.variableTable = b;
    }
    a.none = ["simpleFlatten"];
    a.partial = ["flatten", "removeIdentity", "sort"];
    a.full = "flatten computeConstants combineSimilar expand distribute removeIdentity sort".split(" ");
    a.prototype.algParse = function(c) {
      try {
        return this.parser.parse(c).simplify(a.none);
      } catch (e) {
        return null;
      }
    };
    a.prototype.algEvaluate = function(a) {
      try {
        return this.parser.parse(a).evaluate();
      } catch (b) {
        return null;
      }
    };
    a.prototype.algPartialSimplify = function(c) {
      try {
        return this.parser.parse(c).simplify(a.partial).toString();
      } catch (e) {
        return null;
      }
    };
    a.prototype.algSimplify = function(c) {
      try {
        return this.parser.parse(c).simplify(a.full).toString();
      } catch (e) {
        return null;
      }
    };
    a.prototype.algValid = function(a) {
      return null != this.algParse(a);
    };
    a.prototype.algValued = function(a) {
      var b;
      return null != (b = this.algEvaluate(a)) ? !isNaN(b) : null;
    };
    a.prototype.algPartialSimplified = function(a) {
      var b, g;
      return null != (b = this.algPartialSimplify(a)) && null != (g = this.algParse(a)) ? b.toString() === g.toString() : null;
    };
    a.prototype.algSimplified = function(a) {
      var b, g;
      return null != (b = this.algSimplify(a)) && null != (g = this.algParse(a)) ? b.toString() === g.toString() : null;
    };
    a.prototype.algIdentical = function(a, b) {
      var g, d;
      return null != (g = this.algParse(a)) && null != (d = this.algParse(b)) ? g.equals(d) : null;
    };
    a.prototype.algEqual = function(a, b) {
      var g, d;
      return null != (g = this.algEvaluate(a)) && null != (d = this.algEvaluate(b)) ? g === d : null;
    };
    a.prototype.algPartialEquivalent = function(c, e) {
      var g, d, f, h;
      if (null == (null != (g = f = this.algParse(c)) ? g.simplify(a.partial) : void 0) || null == (null != (d = h = this.algParse(e)) ? d.simplify(a.partial) : void 0) || !f.equals(h)) {
        return null;
      }
    };
    a.prototype.algEquivalent = function(c, e) {
      var g, d, f, h;
      if (!(null != (g = f = this.algParse(c)) && g.simplify(a.partial) && null != (d = h = this.algSimplify(e)) && d.simplify(a.partial) && f.equals(h))) {
        return null;
      }
    };
    a.prototype.isAlgValid = a.prototype.algValid;
    a.prototype.algEval = a.prototype.algEvaluate;
    a.prototype.algStrictEquivTermsSameOrder = a.prototype.algPartialEquivalent;
    a.prototype.algEquivTermsSameOrder = a.prototype.algPartialEquivalent;
    a.prototype.algStrictEquivTerms = a.prototype.algPartialEquivalent;
    a.prototype.algEquivTerms = a.prototype.algPartialEquivalent;
    a.prototype.algEquiv = a.prototype.algEquivalent;
    a.prototype.isSimplified = a.prototype.algSimplified;
    a.prototype.calc = a.prototype.algEvaluate;
    a.prototype.calca = function(a) {
      return (+this.algEvaluate(a)).toFixed(2);
    };
    a.prototype.simplify = a.prototype.algSimplify;
    a.prototype.algebraicEqual = a.prototype.algEqual;
    a.prototype.patternMatches = a.prototype.algIdentical;
    a.prototype.polyTermsEqual = function(c, e) {
      return this.parser.parse(c).simplify(a.partial).equals(this.parser.parse(e).simplify(a.partial));
    };
    a.prototype.algebraicMatches = a.prototype.algEquivalent;
    a.prototype.expressionMatches = a.prototype.algEquivalent;
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATAlgebraParser = a;
}).call(this);
var CTATFormulaParser = {};
(function() {
  var a, b, c, e = [].slice, g = [].indexOf || function(a) {
    for (var b = 0, c = this.length;b < c;b++) {
      if (b in this && this[b] === a) {
        return b;
      }
    }
    return -1;
  };
  b = /(?!["'])([A-Za-z][\w\.]*)(?![\w"'(])/g;
  c = "abstract arguments boolean break byte case catch char class const continue debugger default delete do double else enum eval export extends false final finally float for function goto if implements import in instanceof int interface let long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with yield Array Date eval function hasOwnProperty Infinity isFinite isNaN isPrototypeOf length Math NaN name Number Object prototype String toString undefined valueOf".split(" ");
  a = function() {
    function a(b) {
      var c, d, g;
      this.variableTable = b;
      this.algebraParser = new CTATAlgebraParser;
      this.keys = [];
      this.values = [];
      g = "EPSILON MAX_VALUE MIN_VALUE POSITIVE_INFINITY NEGATIVE_INFINITY isFinite isInteger isNaN parseFloat parseInt".split(" ");
      b = 0;
      for (d = g.length;b < d;b++) {
        c = g[b], this.keys.push(c), this.values.push(Number[c]);
      }
      g = "toExponential toFixed toLocaleString toPrecision toString valueOf".split(" ");
      b = 0;
      for (d = g.length;b < d;b++) {
        c = g[b], this.keys.push(c), this.values.push(function(a) {
          return function() {
            var b, c;
            c = arguments[0];
            b = 2 <= arguments.length ? e.call(arguments, 1) : [];
            return a.apply(c, b);
          };
        }(Number.prototype[c]));
      }
      g = "E LN10 LN2 LOG10E LOG2E PI SQRT1_2 SQRT2 abs acos acosh asin asinh atan atanh atan2 cbrt ceil clz32 cos cosh exp expm1 floor fround hypot imul log log10 log1p log2 max min pow random round sign sin sinh sqrt tan tanh trunc".split(" ");
      b = 0;
      for (d = g.length;b < d;b++) {
        c = g[b], this.keys.push(c), this.values.push(Math[c]);
      }
      g = ["fromCharCode", "fromCodePoint"];
      b = 0;
      for (d = g.length;b < d;b++) {
        c = g[b], this.keys.push(c), this.values.push(String[c]);
      }
      g = "charAt charCodeAt codePointAt concat contains endsWith indexOf lastIndexOf localeCompare match repeat replace search slice split startsWith substr substring toLocaleLowerCase toLocaleUpperCase toLowerCase toUpperCase trim valueOf".split(" ");
      d = 0;
      for (b = g.length;d < b;d++) {
        c = g[d], this.keys.push(c), this.values.push(function(a) {
          return function() {
            var b, c;
            c = arguments[0];
            b = 2 <= arguments.length ? e.call(arguments, 1) : [];
            return a.apply(c, b);
          };
        }(String.prototype[c]));
      }
      this.keys.push("length");
      this.values.push(function(a) {
        return a.length;
      });
      g = "algParse algEvaluate algPartialSimplify algSimplify algValid algValued algPartialSimplified algSimplified algIdentical algEqual algPartialEquivalent algEquivalent isAlgValid algEval algStrictEquivTermsSameOrder algEquivTermsSameOrder algStrictEquivTerms algEquivTerms algEquiv isSimplified calc calca simplify algebraicEqual patternMatches polyTermsEqual algebraicMatches expressionMatches".split(" ");
      d = 0;
      for (b = g.length;d < b;d++) {
        c = g[d], this.keys.push(c), this.values.push(function(a, b) {
          return function() {
            var c;
            c = 1 <= arguments.length ? e.call(arguments, 0) : [];
            return a.apply(b, c);
          };
        }(this.algebraParser[c], this.algebraParser));
      }
      for (c in CTATFormulaFunctions) {
        this.keys.push(c), this.values.push(function(a, b) {
          return function() {
            var c;
            c = 1 <= arguments.length ? e.call(arguments, 0) : [];
            return a.apply(b, c);
          };
        }(CTATFormulaFunctions[c], CTATFormulaFunctions));
      }
    }
    a.prototype.evaluate = function(a, d, k, l) {
      var m, n, p, u, t, v, w, x;
      try {
        t = "undefined" !== typeof window && null !== window ? window : global;
        m = function() {
          var a;
          a = [];
          for (p in t) {
            a.push(p);
          }
          return a;
        }().concat(["selection", "action", "input"]);
        w = null != (v = a.match(b)) ? v : [];
        n = 0;
        for (u = w.length;n < u;n++) {
          p = w[n], 0 > g.call(c, p) && CTATFormulaFunctions.assign(p, void 0);
        }
        for (p in x = this.variableTable.getTable()) {
          t[p] = x[p];
        }
        return function(a, b, c) {
          c.prototype = a.prototype;
          c = new c;
          a = a.apply(c, b);
          return Object(a) === a ? a : c;
        }(Function, ["selection", "action", "input"].concat(e.call(this.keys), ["return " + a.replace(/\\/g, "\\\\")]), function() {
        }).apply(t, [d, k, l].concat(e.call(this.values)));
      } catch (C) {
        return console.log(C), null;
      } finally {
        for (p in t) {
          null != p && 0 > g.call(m, p) && (x[p] = t[p], delete t[p]);
        }
      }
    };
    a.prototype.interpolateSplitPattern = /<%=|%>/;
    a.prototype.interpolate = function(a, b, c, d) {
      var e, g, p, u, t;
      u = a.split(this.interpolateSplitPattern);
      t = [];
      a = g = 0;
      for (p = u.length;g < p;a = ++g) {
        e = u[a], t.push(a % 2 ? this.evaluate(e, b, c, d) : e);
      }
      return t.join("");
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATFormulaParser = a;
}).call(this);
var CTATExampleTracerLink = function(a, b, c) {
  CTATBase.call(this, "CTATExampleTracerLink", "(" + b + "-" + c + ")");
  var e = "undefined" === typeof a || null === a ? null : a, g = null, d = "undefined" === typeof b || null === b ? null : b, f = "undefined" === typeof c || null === c ? null : c, h = null, k = 1, l = 1, m = "CORRECT_ACTION", n = [], p = !1, u = null, t = "", v = null, w = null, x = this;
  this.getUniqueID = function() {
    return e;
  };
  this.getMatcher = function() {
    x.ctatdebug("CTATExampleTracerLink --\x3e in getMatcher");
    return h;
  };
  this.isCorrect = function() {
    return "CORRECT_ACTION" == m;
  };
  this.matchesSAI = function(a, b, c) {
    var d = x.getMatcher();
    x.ctatdebug("CTATExampleTracerLink --\x3e in matchesSAI(); matcher " + d + ", typeof " + typeof d + ", sai " + a);
    a = d.match(a.getSelectionArray(), a.getActionArray(), a.getInputArray(), b, c);
    x.ctatdebug("CTATExampleTracerLink --\x3e out of matchesSAI: result = " + a);
    return a;
  };
  this.matchesSAIforHint = function(a, b, c, d) {
    x.ctatdebug("CTATExampleTracerLink --\x3e in matchesSAIforHint(" + a + ", " + b + ") selectionArray " + a.getSelectionArray());
    if (!1 === x.getMatcher().matchForHint(a.getSelectionArray(), a.getActionArray(), b, d)) {
      return x.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning false because no match"), !1;
    }
    if (null !== c && "undefined" !== typeof c && !0 === c.getWantReportableHints() && (a = null === x.getAllHints() || "undefined" === typeof x.getAllHints() ? 0 : x.getAllHints().length, 1 > a)) {
      return x.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning false nStaticHints " + a + "< 1"), !1;
    }
    x.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning true");
    return !0;
  };
  this.getDepth = function() {
    return g;
  };
  this.getBuggyMsg = function() {
    return t;
  };
  this.getSuccessMsg = function() {
    return u;
  };
  this.getType = function() {
    return m;
  };
  this.getPrevNode = function() {
    return d;
  };
  this.getNextNode = function() {
    return f;
  };
  this.setPrevNode = function(a) {
    d = a;
  };
  this.setNextNode = function(a) {
    f = a;
  };
  this.toString = function() {
    var a;
    a = "[link " + x.getUniqueID();
    a += " (" + x.getPrevNode() + "-" + x.getNextNode();
    a += ") " + x.getType();
    return a + "]";
  };
  this.getTutorSAI = function(a, b) {
    return x.getMatcher().getTutorSAI(a, b, x.getActionType());
  };
  this.getEvaluatedInput = function(a, b) {
    return x.getMatcher().getEvaluatedInput(a, b);
  };
  this.setDepth = function(a) {
    g = a;
  };
  this.getMaxTraversals = function() {
    return k;
  };
  this.isDone = function() {
    var a = String(x.getDefaultSAI().getSelection()).toLowerCase(), b = String(x.getDefaultSAI().getAction()).toLowerCase(), a = CTATMsgType.DONE.toLowerCase() == a && CTATMsgType.BUTTON_PRESSED.toLowerCase() == b;
    x.ctatdebug("CTATExampleTracerLink.isDone() returns " + a);
    return a;
  };
  this.interpolateHints = function(a) {
    x.ctatdebug("CTATExampleTracerLink --\x3e interpolateHints(" + a + ")");
    var b = [];
    if (null === n || "undefined" === typeof n || 0 === n.length) {
      return b;
    }
    null == a && (a = new CTATVariableTable);
    var c = new CTATFormulaParser(a);
    n.forEach(function(a) {
      if (!(1 > String(a).trim().length)) {
        var d = x.getDefaultSAI().getSelection(), e = x.getDefaultSAI().getAction(), f = CTATVariableTable.standardizeType(x.getDefaultSAI().getInput());
        x.ctatdebug("CTATExampleTracerLink.interpolateHints() calling fp.interpolate(" + a + ", " + d + ", " + e + ", " + f + ")");
        a = c.interpolate(a, d, e, f);
        x.ctatdebug("CTATExampleTracerLink.interpolateHints() calling fp.interpolate() returns " + a);
        b.push(a);
      }
    });
    x.ctatdebug("CTATExampleTracerLink --\x3e out of interpolateHints " + b);
    return b;
  };
  this.getHints = function() {
    x.ctatdebug("CTATExampleTracerLink --\x3e in getHints");
    var a = [];
    x.interpolateHints(null).forEach(function(b) {
      x.ctatdebug("CTATExampleTracerLink --\x3e in getHints loop");
      b.toString() !== "".toString() && a.push(b);
    });
    x.ctatdebug("CTATExampleTracerLink --\x3e out of getHints");
    return a;
  };
  this.getAllNonEmptyHints = function() {
    var a = [];
    n.forEach(function(b) {
      b.trim().toString() !== "".toString() && a.push(b);
    });
    return a;
  };
  this.isTraversable = function() {
    return 1 > x.getMaxTraversals() ? !1 : CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() == x.getActionType().toString().toUpperCase() || CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() == x.getActionType().toString().toUpperCase() ? !0 : !1;
  };
  this.replaceInput = function() {
    return CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() !== x.getActionType().toString().toUpperCase() && CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() !== x.getActionType().toString().toUpperCase() ? !1 : x.getMatcher().replaceInput();
  };
  this.evaluateReplacement = function(a, b, c) {
    return x.getMatcher().evaluateReplacement(a, b, c);
  };
  this.getActor = function() {
    return x.getMatcher().getActor();
  };
  this.getDefaultSAI = function() {
    x.ctatdebug(x.toString() + ".getSAI(): " + (h ? h.getDefaultSAI() : "(matcher null)"));
    return h.getDefaultSAI();
  };
  this.getActionType = function() {
    return m;
  };
  this.getMinTraversals = function() {
    return l;
  };
  this.getIsPreferredLink = function() {
    return p;
  };
  this.getAllHints = function() {
    return n;
  };
  this.setMatcher = function(a) {
    h = a;
  };
  this.addHint = function(a) {
    null !== a && "undefined" !== typeof a && a.toString() !== "".toString() && n.push(a);
  };
  this.setSelection = function(a) {
    x.getMatcher().setDefaultSelection(null === a[0] || "undefined" === typeof a[0] ? "" : a[0].toString());
  };
  this.setAction = function(a) {
    x.getMatcher().setDefaultAction(null === a[0] || "undefined" === typeof a[0] ? "" : a[0].toString());
  };
  this.setActionType = function(a) {
    if (null === a || "undefined" === typeof a || a.toString() !== CTATExampleTracerLink.CORRECT_ACTION.toString() && a.toString() !== CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() && a.toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString() && a.toString() !== CTATExampleTracerLink.HINT_ACTION.toString() && a.toString() !== CTATExampleTracerLink.UNTRACEABLE_ERROR.toString() && a.toString() !== CTATExampleTracerLink.CLT_ERROR_ACTION.toString() && a.toString() !== CTATExampleTracerLink.GIVEN_ACTION.toString()) {
      throw new CTATExampleTracerException("invalid action type " + m);
    }
    m = a;
  };
  this.setBuggyMsg = function(a) {
    t = a;
  };
  this.setSuccessMsg = function(a) {
    u = a;
  };
  this.setMinTraversalsStr = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      l = 1;
    } else {
      try {
        l = parseInt(a.trim()), isNaN(l) && (l = 1);
      } catch (b) {
        l = 1;
      }
    }
  };
  this.setMaxTraversalsStr = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      k = l;
    } else {
      try {
        k = parseInt(a.trim()), isNaN(k) && (k = 1);
      } catch (b) {
        k = l;
      }
    }
  };
  this.setUniqueID = function(a) {
    e = a;
  };
  this.addSkillName = function(a) {
    x.ctatdebug("ETLink[" + e + "].addSkillName(" + a + ")");
    if ("unnamed" !== a) {
      if (null === w || "undefined" === typeof w) {
        w = [];
      }
      -1 < w.indexOf(a) || (w.push(a), x.ctatdebug("ETLink.addSkillName() return with skillNames " + w));
    }
  };
  this.getSkillNames = function() {
    if (null === w || "undefined" === typeof w) {
      w = [];
    }
    return w;
  };
  this.isTutorPerformed = function(a) {
    if (CTATExampleTracerLink.CORRECT_ACTION.toUpperCase() !== x.getActionType().toUpperCase()) {
      return !1;
    }
    var b = x.getMatcher();
    if (null === b || "undefined" === typeof b || null !== a && "undefined" !== typeof a && a !== b.isLinkTriggered()) {
      return !1;
    }
    a = x.getActor();
    return CTATMatcher.isTutorActor(a, !0) ? !0 : !1;
  };
  this.setIsPreferredLink = function(a) {
    x.ctatdebug("ETLink.setIsPreferredLink() was " + p + ", now " + a);
    p = a;
  };
  this.setVisualData = function(a) {
    v = a;
  };
  this.getVisualData = function() {
    return v;
  };
};
CTATExampleTracerLink.compareLinkTypes = function(a, b) {
  ctatdebug("CTATExampleTracerLink --\x3e in compareLinkTypes(" + a + ", " + b + ")");
  return null === a || "undefined" === typeof a ? null === b || "undefined" === typeof b ? 0 : 1 : null === b || "undefined" === typeof b ? -1 : a.toString() === b.toString() ? 0 : a.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() ? -1 : b.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() ? 1 : a.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() ? -1 : b.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() ? 1 : a.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() ? 
  -1 : b.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() ? 1 : 0;
};
Object.defineProperty(CTATExampleTracerLink, "BUGGY_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Buggy Action"});
Object.defineProperty(CTATExampleTracerLink, "FIREABLE_BUGGY_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Fireable Buggy Action"});
Object.defineProperty(CTATExampleTracerLink, "CORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Correct Action"});
Object.defineProperty(CTATExampleTracerLink, "NO_MODEL", {enumerable:!1, configurable:!1, writable:!1, value:"NO-MODEL"});
Object.defineProperty(CTATExampleTracerLink, "HINT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Hint Action"});
Object.defineProperty(CTATExampleTracerLink, "UNTRACEABLE_ERROR", {enumerable:!1, configurable:!1, writable:!1, value:"Untraceable Error"});
Object.defineProperty(CTATExampleTracerLink, "CLT_ERROR_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Error Action"});
Object.defineProperty(CTATExampleTracerLink, "GIVEN_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Given Action"});
Object.defineProperty(CTATExampleTracerLink, "SUCCESS", {enumerable:!1, configurable:!1, writable:!1, value:"SUCCESS"});
CTATExampleTracerLink.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerLink.prototype.constructor = CTATExampleTracerLink;
"undefined" !== typeof module && (module.exports = CTATExampleTracerLink);
var CTATSingleMatcher = function(a, b) {
  CTATMatcher.call(this, !0, a, b);
  var c = this, e = "", g = "";
  this.getSingle = function(a) {
    return e;
  };
  this.setSingle = function(a) {
    null === a || "undefined" === typeof a ? c.ctatdebug('CTATSingleMatcher --\x3e bad argument "' + a + '" to setSingle()') : e = a;
  };
  this.toString = function() {
    console.log("Error: CTATSingleMatcher.toString() called: should be overridden");
  };
  this.matchSingle = function(a) {
    console.log("Error: CTATSingleMatcher.matchSingle(" + a + ") called: should be overridden");
    return !1;
  };
  this.getReplacementFormula = function() {
    return g;
  };
  this.setReplacementFormula = function(a) {
    g = a ? a : "";
  };
  this.evaluateReplacement = function(a, b, e) {
    e = null;
    if (!Boolean(g)) {
      return e;
    }
    c.ctatdebug("CTATSingleMatcher.evaluateReplacement(" + a + ", " + b + ")");
    var k = a.getSelection(), l = a.getAction();
    a = CTATVariableTable.standardizeType(a.getInput());
    b || (b = new CTATVariableTable);
    b = new CTATFormulaParser(b);
    c.ctatdebug("CTATSingleMatcher calling CTATFormulaParser.evaluate(" + g + ", " + k + ", " + l + ", " + a + ")");
    try {
      e = b.evaluate(g, k, l, a);
    } catch (m) {
      c.ctatdebug("CTATSingleMatcher error from CTATFormulaParser.evaluate(" + g + ") " + m.name + ": " + m.message), e = null;
    }
    c.ctatdebug("CTATSingleMatcher.evaluateReplacement() returns " + e + ", type " + typeof e);
    return e;
  };
};
CTATSingleMatcher.prototype = Object.create(CTATMatcher.prototype);
CTATSingleMatcher.prototype.constructor = CTATSingleMatcher;
CTATSingleMatcher.prototype.matchConcatenation = function(a) {
  a = this.array2ConcatString(a);
  return this.matchSingle(a);
};
CTATSingleMatcher.prototype.match = function(a, b, c, e) {
  return this.matchConcatenation(a);
};
CTATSingleMatcher.prototype.setParameter = function(a, b, c) {
  this.ctatdebug("CTATSingleMatcher.setParameter(" + a + ", " + b + ", " + c + ") calling\n  " + this.setSingle.toString());
  this.setSingle(a);
};
"undefined" !== typeof module && (module.exports = CTATSingleMatcher);
var CTATAnyMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  this.toString = function() {
    return "*";
  };
  this.matchSingle = function(a) {
    return !0;
  };
};
CTATAnyMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATAnyMatcher.prototype.constructor = CTATAnyMatcher;
"undefined" !== typeof module && (module.exports = CTATAnyMatcher);
var CTATExactMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var c = this;
  this.toString = function() {
    return c.getSingle().toString();
  };
  this.matchSingle = function(a) {
    var b = c.getSingle();
    ctatdebug("CTATExactMatcher --\x3e in matchSingle: s = " + a + ", singleval = " + b + ", caseInsensitive " + c.getCaseInsensitive() + ", " + typeof c.getCaseInsensitive());
    return c.getCaseInsensitive() ? String(a).toUpperCase() == String(b).toUpperCase() : String(a) == String(b);
  };
};
CTATExactMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATExactMatcher.prototype.constructor = CTATExactMatcher;
"undefined" !== typeof module && (module.exports = CTATExactMatcher);
var CTATRegexMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var c = null, e = null, g = this;
  this.toString = function() {
    return c;
  };
  this.setSinglePattern = function(a) {
    "undefined" === typeof a || null === a ? console.log("CTATRegexMatcher: null or undefined pattern") : (c = a, e = g.getCaseInsensitive() ? new RegExp(a, "i") : new RegExp(a));
  };
  this.setSingle = function(a) {
    g.setSinglePattern(a);
  };
  this.matchSingle = function(a) {
    if (null == a) {
      return null == getSingle();
    }
    if (null == e) {
      return console.log("Error: CTATRegexMatcher.matchSingle called before pattern has been set"), !1;
    }
    var b = e.exec(a);
    return null != b && b[0] == a;
  };
};
CTATRegexMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATRegexMatcher.prototype.constructor = CTATRegexMatcher;
"undefined" !== typeof module && (module.exports = CTATRegexMatcher);
var CTATExampleTracerEvent = function(a, b, c) {
  CTATBase.call(this, "CTATExampleTracerEvent", b ? b.toString() : "null");
  var e = "", g = !1, d = CTATExampleTracerLink.NO_MODEL, f = !1, h = null, k = null, l = "student", m = null, n = null, p = "", u = null, t = null, v = null, w = null, x = null, C = [], D = !1, y = null, A = null, r = this;
  this.getActor = function() {
    return l;
  };
  this.setActor = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e setActor(" + a + ")");
    l = a;
  };
  this.getStudentSAI = function() {
    r.ctatdebug("CTATExampleTracerEvent.getStudentSAI() returning type " + typeof h + ", value " + h);
    return h;
  };
  this.setStudentSAI = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setStudentSAI(" + a + ")");
    null !== a && "undefined" !== typeof a && (h = a);
    r.ctatdebug("CTATExampleTracerEvent --\x3e out of setStudentSAI");
  };
  this.getPreloadedLinkMatches = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getPreloadedLinkMatches");
    return t;
  };
  this.setTutorSAI = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setTutorSAI");
    null !== a && "undefined" !== typeof a && (k = a);
    r.ctatdebug("CTATExampleTracerEvent --\x3e out of setTutorSAI");
  };
  this.setNumberOfInterpretations = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setNumberOfInterpretations( " + a + " )");
  };
  this.getTransactionID = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getTransactionID() returning " + e);
    return e;
  };
  this.setTransactionID = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setTransactionID( " + a + " )");
    e = a;
  };
  this.setDoneStepFailed = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setDoneStepFailed( " + a + " )");
    g = a;
  };
  this.setHintRequest = function(a) {
    f = a;
  };
  this.getHintRequest = function() {
    return f;
  };
  this.setResult = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setResult( " + a + " )");
    d = a;
  };
  this.isSolverResult = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in isSolverResult");
    return !1;
  };
  this.getResult = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getResult() returning " + d);
    return d;
  };
  this.setReportableLink = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableLink(" + a + ")");
    m = a;
  };
  this.setReportableInterpretation = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableInterpretation(" + a + ")");
    n = a;
  };
  this.setStepID = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setStepID(" + a + ")");
    p = a;
  };
  this.setReportableVariableTable = function(a) {
    w = a.clone();
  };
  this.setSuccessOrBuggyMsg = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setSuccessOrBuggyMsg(" + a + ")");
    x = a;
  };
  this.setReportableHints = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableHints(" + a + ")");
    C = Array.isArray(a) && 0 < a.length ? a : [];
  };
  this.getWantReportableHints = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getWantReportableHints() returning " + D);
    return D;
  };
  this.setOutOfOrder = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setOutOfOrder(" + a + ")");
    u = a;
  };
  this.isOutOfOrder = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getOutOfOrder() returning " + u);
    return u;
  };
  this.setEvaluatedInput = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setEvaluatedInput(" + a + ")");
    if (null === v || "undefined" === typeof v) {
      v = [];
    }
    v.push(a);
  };
  this.addPreloadedLinkMatch = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in addPreloadedLinkMatch(" + a + ")");
    if (null === t || "undefined" === typeof t) {
      t = [];
    }
    t.push(a);
  };
  this.setInterpolatedSAI = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setInterpolatedSAI(" + a + ")");
    a && (y = a);
  };
  this.getInterpolatedSAI = function() {
    return y ? y : r.getStudentSAI();
  };
  this.setInterpolatedHints = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setInterpolatedHints(" + a + ")");
    null !== A && "undefined" !== typeof A && (A.length = 0);
    null !== a && "undefined" !== typeof a && (A = a.slice(0));
    r.ctatdebug("CTATExampleTracerEvent --\x3e out of setInterpolatedHints");
  };
  this.setWantReportableHints = function(a) {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in setWantReportableHints(" + a + ")");
    D = a;
  };
  this.getSuccessOrBuggyMsg = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getSuccessOrBuggyMsg() returning " + x);
    return x;
  };
  this.getReportableHints = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableHints() returning " + C);
    return C;
  };
  this.getReportableLink = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableLink() returning " + m);
    return m;
  };
  this.getReportableVariableTable = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableVariableTable() returning " + w);
    return w;
  };
  this.getReportableInterpretation = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableInterpretation() returning " + n);
    return n;
  };
  this.getStepID = function() {
    r.ctatdebug("CTATExampleTracerEvent --\x3e in getStepID() returning " + p);
    return p;
  };
  this.getTutorSelection = function() {
    return null === k || "undefined" === typeof k ? null : k.getSelectionArray();
  };
  this.getTutorAction = function() {
    return null === k || "undefined" === typeof k ? null : k.getActionArray();
  };
  this.getTutorInput = function() {
    return null !== v && "undefined" !== typeof v ? r.getEvaluatedInputArray() : null !== k && "undefined" !== typeof k ? k.getInputArray() : null;
  };
  this.getEvaluatedInputArray = function() {
    return v;
  };
  this.toString = function() {
    var a;
    a = "[" + r.getResult();
    null !== r.getStudentSAI() && "undefined" !== typeof r.getStudentSAI() && (a += ", StudentSAI " + r.getStudentSAI());
    null !== r.getReportableLink() && "undefined" !== typeof r.getReportableLink() && (a += ", reportableLink " + r.getReportableLink());
    !0 === r.isDoneStepFailed() && (a += ", doneStepFailed");
    null !== r.getTutorSAI() && "undefined" !== typeof r.getTutorSAI() && (a += ", TutorSAI " + r.getTutorSAI());
    return a + "]";
  };
  this.isDoneStepFailed = function() {
    return g;
  };
  this.getTutorSAI = function() {
    return k;
  };
  this.setStudentSAI(b);
  this.setActor(c);
};
CTATExampleTracerEvent.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerEvent.prototype.constructor = CTATExampleTracerEvent;
"undefined" !== typeof module && (module.exports = CTATExampleTracerEvent);
var CTATExpressionMatcher = function(a, b) {
  function c(a, b, c, f, g) {
    h.ctatdebug("CTATExpressionMatcher.testVector[" + f + "](" + a + ", " + b + ", " + c + ", " + g + ") to call evaluate");
    var u = CTATVariableTable.standardizeType(c);
    h.ctatdebug("CTATExpressionMatcher.testVector typeof input " + typeof c + "; inputConv " + u + ", typeof " + typeof u);
    c = h.evaluate(a, b, u, g);
    h.ctatdebug("CTATExpressionMatcher.testVector evaluate(" + a + ", " + b + ", " + u + ", " + g + ") returned " + c + ", type " + typeof c);
    g = null;
    switch(f) {
      case CTATMatcher.SELECTION:
        g = a;
        break;
      case CTATMatcher.ACTION:
        g = b;
        break;
      case CTATMatcher.INPUT:
      ;
      case CTATMatcher.NON_SINGLE:
        g = u;
    }
    d = g;
    h.ctatdebug("CTATExpressionMatcher.testVector comparee " + g + ", type " + typeof g + ", relation " + e + "( " + CTATExpressionMatcher.RELATIONS[e] + " )");
    try {
      switch(e) {
        case CTATExpressionMatcher.BOOL_RELATION:
          return Boolean(c);
        case CTATExpressionMatcher.EQ_RELATION:
          if (null == g) {
            return null == c;
          }
          if (null == c) {
            break;
          }
          return h.compareNumberOrString(g, c, e);
        case CTATExpressionMatcher.NOT_EQ_RELATION:
          return null == g ? null != c : null == c ? !0 : h.compareNumberOrString(g, c, e);
        case CTATExpressionMatcher.LT_RELATION:
        ;
        case CTATExpressionMatcher.GT_RELATION:
          if (null == g || null == c) {
            break;
          }
          return h.compareNumberOrString(g, c, e);
        case CTATExpressionMatcher.LTE_RELATION:
        ;
        case CTATExpressionMatcher.GTE_RELATION:
          if (null == g) {
            return null == c;
          }
          if (null == c) {
            break;
          }
          return h.compareNumberOrString(g, c, e);
      }
    } catch (t) {
    }
    return !1;
  }
  CTATSingleMatcher.call(this, a, b);
  var e = CTATExpressionMatcher.EQ_RELATION, g = b, d = null, f = !1, h = this;
  this.getLastInput = function() {
    h.ctatdebug("CTATExpressionMatcher.getLastInput() returns " + d);
    return d;
  };
  this.isEqualRelation = function() {
    h.ctatdebug("CTATExpressionMatcher --\x3e in isEqualRelation");
    return e === CTATExpressionMatcher.EQ_RELATION;
  };
  this.getEvaluatedInput = function(a, b) {
    h.ctatdebug("CTATExpressionMatcher --\x3e in getEvaluatedInput(" + a + ", " + b + ")");
    var c = CTATVariableTable.standardizeType(a.getInput()), c = h.evaluate(a.getSelection(), a.getAction(), c, b);
    h.ctatdebug("CTATExpressionMatcher.getEvaluatedInput() returns " + c);
    return c;
  };
  this.toString = function() {
    return CTATExpressionMatcher.RELATIONS[e] + ' "' + g + '"';
  };
  this.matchSingle = function(a) {
    throw new CTATExampleTracerException("UnsupportedOperationException");
  };
  this.setInputExpression = function(a) {
    g = a;
  };
  this.setRelation = function(a) {
    e = a;
  };
  this.interpolate = function(a, b, c, d) {
    try {
      var e = new CTATVariableTable;
      return (new CTATFormulaParser(e)).interpolate(a, b, c, d);
    } catch (f) {
      return null;
    }
  };
  this.evaluate = function(a, b, c, d) {
    if ("undefined" == typeof d || null == d) {
      d = new CTATVariableTable;
    }
    h.ctatdebug("CTATExpressionMatcher.evaluate(..., vt=" + d + ") creating CTATFormulaParser");
    d = new CTATFormulaParser(d);
    h.ctatdebug("calling CTATFormulaParser.evaluate(" + h.getInputExpression() + ", " + a + ", " + b + ", " + c + ")");
    try {
      return d.evaluate(h.getInputExpression(), a, b, c);
    } catch (e) {
      return h.ctatdebug("CTATExpressionMatcher --\x3e " + e.name + ": " + e.message), null;
    }
  };
  this.matchConcatenation = function(b, d, e, g) {
    b = h.array2ConcatString(b);
    null === d || "undefined" === typeof d || null === e || "undefined" === typeof e ? f = c(b, null, null, a, g) : (d = h.array2ConcatString(d), e = h.array2ConcatString(e), f = c(b, d, e, a, g));
    return f;
  };
  this.match = function(a, b, c, d, e) {
    return h.matchConcatenation(a, b, c, e);
  };
  this.getInputExpression = function() {
    return g;
  };
  (function() {
    if (null !== b && "undefined" !== typeof b) {
      var a;
      a = b.indexOf('"');
      var c = b.lastIndexOf('"');
      0 <= a && 0 <= c ? (a = b.substring(a + 1, c), c = b.substring(0, b.indexOf(" ")), e = CTATExpressionMatcher.nameToRelation(c)) : a = b;
      h.setInputExpression(a);
    }
  })();
};
Object.defineProperty(CTATExpressionMatcher, "EQ_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:0});
Object.defineProperty(CTATExpressionMatcher, "LT_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:1});
Object.defineProperty(CTATExpressionMatcher, "GT_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:2});
Object.defineProperty(CTATExpressionMatcher, "NOT_EQ_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:3});
Object.defineProperty(CTATExpressionMatcher, "GTE_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:4});
Object.defineProperty(CTATExpressionMatcher, "LTE_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:5});
Object.defineProperty(CTATExpressionMatcher, "BOOL_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:6});
Object.defineProperty(CTATExpressionMatcher, "RELATIONS", {enumerable:!1, configurable:!1, writable:!1, value:"= < > != >= <= boolean".split(" ")});
CTATExpressionMatcher.nameToRelation = function(a) {
  for (var b = 0;b < CTATExpressionMatcher.RELATIONS.length;b++) {
    if (a == CTATExpressionMatcher.RELATIONS[b]) {
      return b;
    }
  }
  return CTATExpressionMatcher.EQ_RELATION;
};
CTATExpressionMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATExpressionMatcher.prototype.constructor = CTATExpressionMatcher;
CTATExpressionMatcher.prototype.setParameter = function(a, b, c) {
  a = c.getNodeTextValue(a);
  this.ctatdebug("CTATExpressionMatcher.setParameter(" + b + ", " + a + ")");
  "InputExpression" == b ? this.setInputExpression(a) : "relation" == b && this.setRelation(CTATExpressionMatcher.nameToRelation(a));
};
CTATExpressionMatcher.prototype.compareNumberOrString = function(a, b, c) {
  a = String(a);
  b = String(b);
  var e = Number(a), g = Number(b);
  if (isNaN(e) || isNaN(g)) {
    switch(c) {
      case CTATExpressionMatcher.EQ_RELATION:
        return a == b;
      case CTATExpressionMatcher.NOT_EQ_RELATION:
        return a != b;
      case CTATExpressionMatcher.LT_RELATION:
        return a.toLowerCase() < b.toLowerCase();
      case CTATExpressionMatcher.GT_RELATION:
        return a.toLowerCase() > b.toLowerCase();
      case CTATExpressionMatcher.LTE_RELATION:
        return a.toLowerCase() <= b.toLowerCase();
      case CTATExpressionMatcher.GTE_RELATION:
        return a.toLowerCase() >= b.toLowerCase();
      case CTATExpressionMatcher.BOOL_RELATION:
        return Boolean(b);
      default:
        return !1;
    }
  } else {
    switch(c) {
      case CTATExpressionMatcher.EQ_RELATION:
        return e == g;
      case CTATExpressionMatcher.NOT_EQ_RELATION:
        return e != g;
      case CTATExpressionMatcher.LT_RELATION:
        return e < g;
      case CTATExpressionMatcher.GT_RELATION:
        return e > g;
      case CTATExpressionMatcher.LTE_RELATION:
        return e <= g;
      case CTATExpressionMatcher.GTE_RELATION:
        return e >= g;
      case CTATExpressionMatcher.BOOL_RELATION:
        return Boolean(g);
      default:
        return !1;
    }
  }
};
"undefined" !== typeof module && (module.exports = CTATExpressionMatcher);
var CTATRangeMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var c = 0, e = 0;
  this.toString = function() {
    return "[ " + c + " , " + e + " ]";
  };
  this.setMinimum = function(a) {
    try {
      c = parseFloat(a);
    } catch (b) {
      throw new CTATExampleTracerException('Number format exception while parsing minimum value "' + a + '": ' + b);
    }
  };
  this.setMaximum = function(a) {
    try {
      e = parseFloat(a);
    } catch (b) {
      throw new CTATExampleTracerException('Number format exception while parsing maximum value "' + a + '": ' + b);
    }
  };
  this.matchSingle = function(a) {
    var b;
    try {
      b = parseFloat(a);
    } catch (f) {
      throw new CTATExampleTracerException("Number format exception while parsing .");
    }
    return c <= b && b <= e ? !0 : !1;
  };
};
CTATRangeMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATRangeMatcher.prototype.constructor = CTATRangeMatcher;
CTATRangeMatcher.prototype.setParameter = function(a, b) {
  switch((b ? b : "").toString().trim().toLowerCase()) {
    case "minimum":
      this.setMinimum(a);
      break;
    case "maximum":
      this.setMaximum(a);
      break;
    default:
      console.log('CTATRangeMatcher.setParameter() undefined parameter name "' + b + '"'), this.setMinimum(a), this.setMaximum(a);
  }
};
CTATRangeMatcher.prototype.match = function(a, b, c, e) {
  return this.matchSingle(a, b, c, e);
};
"undefined" !== typeof module && (module.exports = CTATRangeMatcher);
var CTATExampleTracerPath = function(a) {
  CTATBase.call(this, "CTATExampleTracerPath", "");
  var b = new Set;
  "undefined" !== typeof a && null !== a && a.forEach(function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in constructor building links with " + a);
    b.add(a);
  });
  var c = null, e = null, g = null, d = null, f = null, h = null, k = this;
  this.isIncorrectPath = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in isIncorrectPath");
    if (null !== h && "undefined" !== typeof h) {
      return h;
    }
    var a = !1;
    k.getLinks().forEach(function(b) {
      !0 !== a && b.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && (a = h = !0);
    });
    if (!0 === a) {
      return !0;
    }
    h = !1;
    ctatdebug("CTATExampleTracerPath --\x3e out of isIncorrectPath");
    return !1;
  };
  this.getNumberOfSuboptimalLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfSuboptimalLinks");
    k.getSortedLinks();
    if (null !== d && "undefined" !== typeof d) {
      return d;
    }
    var a = 0;
    k.getLinks().forEach(function(b) {
      CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() === b.getType().toString() && a++;
    });
    d = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfSuboptimalLinks");
    return a;
  };
  this.getNumberOfPreferredPrefixLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfPreferredPrefixLinks");
    if (null !== e && "undefined" !== typeof e) {
      return e;
    }
    var a = 0, b = !1;
    k.getSortedLinks().forEach(function(c) {
      !0 !== b && (!0 === c.getIsPreferredLink() ? a++ : b = !0);
    });
    e = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfPreferredPrefixLinks");
    return a;
  };
  this.size = function() {
    return b.size;
  };
  this.containsAll = function(a) {
    var b = !0;
    if (a) {
      for (var c = 0;b && c < a.length;++c) {
        b = k.getLinks().has(a[c]);
      }
    }
    k.ctatdebug("CTATExampleTracerPath containsAll(testLinks.length " + a.length + ") returning " + b);
    return b;
  };
  this.getLinksRestricted = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getLinksRestricted");
    var c = CTATExampleTracerPath.getDeepestLink(a), d = new Set;
    b.forEach(function(a) {
      a.getDepth() <= c.getDepth() && d.add(a);
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getLinksRestricted");
    return d;
  };
  this.getLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getLinks");
    return b;
  };
  this.getSortedLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getSortedLinks that.getLinks(): " + k.getLinks());
    c = [];
    k.getLinks().forEach(function(a) {
      c.push(a);
    });
    ctatdebug("CTATExampleTracerPath --\x3e in getSortedLinks sortedLinks.length(): " + c.length);
    c.sort(function(a, b) {
      return a.getDepth() - b.getDepth();
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getSortedLinks, returning " + c);
    return c;
  };
  this.isDonePath = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in isDonePath");
    if (null !== f && "undefined" !== typeof f) {
      return f;
    }
    var a = !1;
    k.getLinks().forEach(function(b) {
      !0 !== a && !0 === b.isDone() && (a = f = !0);
    });
    if (!0 === a) {
      return !0;
    }
    f = !1;
    ctatdebug("CTATExampleTracerPath --\x3e out of isDonePath");
    return !1;
  };
  this.addLink = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in addLink (" + a + ")");
    b.add(a);
    h = f = d = g = e = c = null;
    ctatdebug("CTATExampleTracerPath --\x3e out of addLink");
  };
  this.getNumberOfPreferredLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfPreferredLinks");
    if (null !== g && "undefined" !== typeof g) {
      return g;
    }
    var a = 0;
    k.getLinks().forEach(function(b) {
      !0 === b.getIsPreferredLink() && a++;
    });
    g = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfPreferredLinks");
    return a;
  };
  this.subpath = function(a) {
    for (var b = new CTATExampleTracerPath, c = k.getSortedLinks(), d = 0;d < c.length;++d) {
      if (b.addLink(c[d]), c[d].getNextNode() == a.getNodeID()) {
        return b;
      }
    }
    return null;
  };
  this.toString = function() {
    var a = "CTATExampleTracerPath: links";
    k.getSortedLinks().forEach(function(b) {
      a += " " + b;
    });
    return a;
  };
  CTATExampleTracerPath.getDeepestLink = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getDeepestLink");
    var b = null;
    a.forEach(function(a) {
      if (null === b || "undefined" === typeof b || b.getDepth() < a.getDepth()) {
        b = a;
      }
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getDeepestLink");
    return b;
  };
  CTATExampleTracerPath.getBestPath = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getBestPath");
    var b = null, c = new CTATExampleTracerPathComparator;
    a.forEach(function(a) {
      ctatdebug("CTATExampleTracerPath --\x3e in getBestPath loop");
      if (null === b || "undefined" === typeof b || 0 < c.compare(b, a)) {
        b = a;
      }
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getBestPath");
    return b;
  };
};
CTATExampleTracerPath.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerPath.prototype.constructor = CTATExampleTracerPath;
"undefined" !== typeof module && (module.exports = CTATExampleTracerPath);
var CTATWildcardMatcher = function(a, b) {
  function c(a) {
    if (null == a || "undefined" === typeof a) {
      return null;
    }
    var b = (new String(a)).replace(/\?/g, "."), c = b.replace(/\*/g, ".*"), h = c.replace(/\[\!/g, "[^");
    e.ctatdebug("CTATWildcardMatcher.convertToFullRegex(" + a + ") after qm: " + b + "; after aster: " + c + "; after negate: " + h + ";");
    return h;
  }
  CTATRegexMatcher.call(this, a, b);
  var e = this;
  this.toString = function() {
    return null;
  };
  this.setSingle = function(a) {
    e.simpleSinglePattern = a;
    e.setSinglePattern.call(e, c(a));
  };
  this.setSingle(b);
  this.simpleSinglePattern = b;
};
CTATWildcardMatcher.prototype = Object.create(CTATRegexMatcher.prototype);
CTATWildcardMatcher.prototype.constructor = CTATWildcardMatcher;
"undefined" !== typeof module && (module.exports = CTATWildcardMatcher);
var CTATVectorMatcher = function(a, b, c, e) {
  function g(a, b, c, e, g) {
    l.ctatdebug("CTATVectorMatcher --\x3e in _match(" + a + ", " + b + ", " + c + ", " + e + ")");
    if (0 === d.length || 0 === f.length || 0 === h.length) {
      d.push(new CTATExactMatcher(CTATMatcher.SELECTION, l.array2ConcatString(l.getDefaultSelectionArray()))), f.push(new CTATExactMatcher(CTATMatcher.ACTION, l.array2ConcatString(l.getDefaultActionArray()))), h.push(new CTATExactMatcher(CTATMatcher.INPUT, l.array2ConcatString(l.getDefaultInputArray())));
    }
    var v = [];
    v[CTATMatcher.SELECTION] = a;
    v[CTATMatcher.ACTION] = b;
    v[CTATMatcher.INPUT] = c;
    for (var w = 0;3 > w;w++) {
      var x = k[w][0], C = x instanceof CTATExpressionMatcher ? x.matchConcatenation(a, b, c, e) : x.matchConcatenation(v[w]);
      l.ctatdebug("CTATVectorMatcher --\x3e in _match[" + w + "] after " + x + ".concat returns: " + C);
      if (g) {
        g.push(C);
      } else {
        if (!1 === C) {
          return !1;
        }
      }
    }
    if (g) {
      for (a = 0;a < g.length;++a) {
        if (!g[a]) {
          return !1;
        }
      }
    }
    return !0;
  }
  CTATMatcher.call(this, !0, CTATMatcher.VECTOR, !0);
  var d = a instanceof Array ? a : [], f = b instanceof Array ? b : [], h = c instanceof Array ? c : [], k = [];
  k[CTATMatcher.SELECTION] = d;
  k[CTATMatcher.ACTION] = f;
  k[CTATMatcher.INPUT] = h;
  var l = this;
  this.match = function(a, b, c, d, e) {
    return !1 !== g(a, b, c, e) && l.matchActor(d) ? !0 : !1;
  };
  this.getMatchers = function(a) {
    return k[a];
  };
  this.getTutorSAI = function(a, b, c) {
    l.ctatdebug("CTATVectorMatcher.getTutorSAI(" + a + ", vt, " + c + ")");
    if (c && CTATExampleTracerLink.CORRECT_ACTION.toLowerCase() == c.toLowerCase()) {
      return a;
    }
    var d = [];
    if (g(a.getSelectionArray(), a.getActionArray(), a.getInputArray(), b, d)) {
      return c = a.clone(), a = l.evaluateReplacement(a, b, null), null != a && c.setInput("object" == typeof a ? a.toString() : a), c;
    }
    c = a.clone();
    for (a = 0;a < d.length;a++) {
      switch(a) {
        case CTATMatcher.SELECTION:
          if (d[a]) {
            continue;
          }
          c.setSelection(l.getDefaultSelection());
          c.setSelectionArray(l.getDefaultSelectionArray());
          break;
        case CTATMatcher.ACTION:
          if (d[a]) {
            continue;
          }
          c.setAction(l.getDefaultAction());
          c.setActionArray(l.getDefaultActionArray());
          break;
        case CTATMatcher.INPUT:
          if (d[a]) {
            continue;
          }
          c.setInput(l.getDefaultInput());
          c.setInputArray(l.getDefaultInputArray());
          break;
        default:
          console.log("CTATVectorMatcher.getTutorSAI() unexpected no. of details: " + a);
      }
    }
    return c;
  };
  this.getInputMatcher = function() {
    var a = h[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? l.getDefaultInput() : a.toString();
  };
  this.getActionMatcher = function() {
    var a = f[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? l.getDefaultAction() : a.toString();
  };
  this.getSelectionMatcher = function() {
    var a = d[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? l.getDefaultSelection() : a.toString();
  };
  this.getSingleMatcher = function(a) {
    return "selection".toString().toUpperCase() === a.toString().toUpperCase() ? d[0] : "action".toString().toUpperCase() === a.toString().toUpperCase() ? f[0] : h[0];
  };
  this.getSelection = function() {
    return 0 === d.length ? l.getDefaultSelection() : d[0].toString();
  };
  this.getAction = function() {
    return 0 === f.length ? l.getDefaultAction() : f[0].getAction();
  };
  this.setDefaultSelection = function(a) {
    return 0 === d.length ? l.internalSetDefaultSelection(a) : d[0].setDefaultSelection(a);
  };
  this.setDefaultAction = function(a) {
    return 0 === f.length ? l.internalSetDefaultAction(a) : f[0].setDefaultAction(a);
  };
  this.setDefaultInput = function(a) {
    return 0 === h.length ? l.internalSetDefaultInput(a) : h[0].setDefaultInput(a);
  };
  this.getEvaluatedInput = function(a, b) {
    if (0 === h.length) {
      return l.getInput();
    }
    var c = h[0];
    return !1 === c instanceof CTATExpressionMatcher ? l.getInput() : !0 === c.isEqualRelation() ? c.getEvaluatedInput(a, b) : l.getInput();
  };
  this.matchForHint = function(a, b, c, e) {
    ctatdebug("CTATVectorMatcher.matchForHint(" + a + ", " + b + ", " + c + ", vt)");
    if (!l.matchActor(c)) {
      return !1;
    }
    b = !1;
    b = d[0];
    return b = Array.isArray(a) ? b.matchConcatenation(a, l.getDefaultActionArray(), l.getDefaultInputArray(), e) : b.matchConcatenation([a], l.getDefaultActionArray(), l.getDefaultInputArray(), e);
  };
  this.setCaseInsensitive = function(a) {
    ctatdebug("CTATVectorMatcher.setCaseInsensitive(" + a + ")");
    for (var b = 0;b < k.length;++b) {
      if (Array.isArray(k[b])) {
        for (var c = 0;c < k[b].length;++c) {
          k[b][c].setCaseInsensitive(a);
        }
      } else {
        k[b] instanceof CTATMatcher && k[b].setCaseInsensitive(a);
      }
    }
  };
  this.toString = function() {
    return "this is CTATVectorMatcher";
  };
  this.getReplacementFormula = function() {
    var a = h[0];
    return null === a || "undefined" === typeof a ? null : a.getReplacementFormula();
  };
  this.evaluateReplacement = function(a, b, c) {
    return h[0].evaluateReplacement(a, b, c);
  };
  this.setActor(e);
};
CTATVectorMatcher.prototype = Object.create(CTATMatcher.prototype);
CTATVectorMatcher.prototype.constructor = CTATVectorMatcher;
"undefined" !== typeof module && (module.exports = CTATVectorMatcher);
var CTATMatcherComparator = function() {
  CTATBase.call(this, "CTATMatcherComparator", "");
  CTATMatcherComparator.compare = function(a, b) {
    ctatdebug("CTATMatcherComparator--\x3e in compare");
    var c = CTATMatcherComparator.compareBasedOnType(a, b);
    if (0 !== c || !1 === a instanceof CTATVectorMatcher && !1 === b instanceof CTATVectorMatcher) {
      return c;
    }
    c = CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("input"), b.getSingleMatcher("input"));
    if (0 !== c) {
      return c;
    }
    c = CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("selection"), b.getSingleMatcher("selection"));
    return 0 !== c ? c : CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("action"), b.getSingleMatcher("action"));
  };
  CTATMatcherComparator.compareBasedOnType = function(a, b) {
    ctatdebug("CTATMatcherComparator --\x3e in compareBasedOnType");
    for (var c in CTATMatcherComparator.matcherPrecedenceOrder) {
      if (CTATMatcherComparator.matcherPrecedenceOrder.hasOwnProperty(c) && a instanceof CTATMatcherComparator.matcherPrecedenceOrder[c]) {
        break;
      }
    }
    for (var e in CTATMatcherComparator.matcherPrecedenceOrder) {
      if (CTATMatcherComparator.matcherPrecedenceOrder.hasOwnProperty(e) && b instanceof CTATMatcherComparator.matcherPrecedenceOrder[e]) {
        break;
      }
    }
    return c < e ? 1 : c > e ? -1 : 0;
  };
};
Object.defineProperty(CTATMatcherComparator, "matcherPrecedenceOrder", {enumerable:!1, configurable:!1, writable:!1, value:{0:CTATExactMatcher, 1:CTATRangeMatcher, 2:CTATExpressionMatcher, 3:CTATWildcardMatcher, 4:CTATRegexMatcher, 5:CTATAnyMatcher}});
CTATMatcherComparator.prototype = Object.create(CTATBase.prototype);
CTATMatcherComparator.prototype.constructor = CTATMatcherComparator;
"undefined" !== typeof module && (module.exports = CTATMatcherComparator);
new CTATMatcherComparator;
var CTATExampleTracerInterpretationComparator = function() {
  CTATBase.call(this, "CTATExampleTracerInterpretationComparator", "");
  var a = this;
  this.compare = function(b, c) {
    a.ctatdebug("CTATExampleTracerInterpretationComparator --\x3e in compare");
    var e = b.getType(), g = CTATExampleTracerLink.compareLinkTypes(e, c.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing i1Type: " + b.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing i2Type: " + c.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing link types result: " + g);
    if (0 !== g) {
      return ctatdebug("CTATExampleTracerInterpretationComparator result is not equal to 0"), 0 > g ? 1 : -1;
    }
    if (CTATExampleTracerLink.BUGGY_ACTION.toString().toUpperCase() === e.toString().toUpperCase() && (ctatdebug("CTATExampleTracerInterpretationComparator checking for buggy actions"), e = b.getLastMatchedLink(), g = c.getLastMatchedLink(), e = CTATMatcherComparator.compare(e.getMatcher(), g.getMatcher()), 0 !== e)) {
      return e;
    }
    var g = CTATExampleTracerPath.getBestPath(b.getPaths()), e = CTATExampleTracerPath.getBestPath(c.getPaths()), d = new Set;
    d.add(g);
    d.add(e);
    g = CTATExampleTracerPath.getBestPath(d);
    ctatdebug("CTATExampleTracerInterpretationComparator found best path: " + (g === e));
    g.getLinks().forEach(function(b) {
      a.ctatdebug("My best link==: " + b.getUniqueID());
    });
    return g === e ? -1 : 1;
  };
};
CTATExampleTracerInterpretationComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerInterpretationComparator.prototype.constructor = CTATExampleTracerInterpretationComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerInterpretationComparator);
var CTATExampleTracerLinkComparator = function(a, b) {
  CTATBase.call(this, "CTATExampleTracerLinkComparator", "");
  this.compare = function(c, e) {
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getUniqueID(): " + c.getUniqueID());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getUniqueID(): " + e.getUniqueID());
    var g = c.getType(), d = e.getType(), g = CTATExampleTracerLink.compareLinkTypes(g, d);
    if (0 !== g) {
      return ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare m: " + g), g;
    }
    g = b.nonEmptyHints(c, a.getVariableTable());
    d = b.nonEmptyHints(e, a.getVariableTable());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare h1, h2: " + g + ", " + d);
    if (0 < g && 0 >= d) {
      return -1;
    }
    if (0 >= g && 0 < d) {
      return 1;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getDepth(), l2.getDepth(): " + c.getDepth() + ", " + e.getDepth());
    if (c.getDepth() < e.getDepth()) {
      return -1;
    }
    if (c.getDepth() > e.getDepth()) {
      return 1;
    }
    g = a.getTraversalCount(c) - c.getMinTraversals();
    d = a.getTraversalCount(e) - e.getMinTraversals();
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare tc1, tc2: " + g + ", " + d);
    if (0 > g && 0 <= d) {
      return -1;
    }
    if (0 <= g && 0 > d) {
      return 1;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getIsPreferredLink(): " + c.getIsPreferredLink());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getIsPreferredLink(): " + e.getIsPreferredLink());
    if (c.getIsPreferredLink()) {
      return -1;
    }
    if (e.getIsPreferredLink()) {
      return 1;
    }
    if (0 !== (g = CTATMatcherComparator.compare(c.getMatcher(), e.getMatcher()))) {
      return g;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getUniqueID(): " + c.getUniqueID());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getUniqueID(): " + e.getUniqueID());
    return c.getUniqueID() < e.getUniqueID() ? -1 : 1;
  };
};
CTATExampleTracerLinkComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerLinkComparator.prototype.constructor = CTATExampleTracerLinkComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerLinkComparator);
var CTATExampleTracerInterpretation = function(a) {
  CTATBase.call(this, "CTATExampleTracerInterpretation", "");
  var b = [], c = {}, e = new CTATVariableTable, g = new Set;
  a.forEach(function(a) {
    g.add(a);
  });
  var d = CTATExampleTracerLink.CORRECT_ACTION, f = null, h = this;
  this.getVariableTable = function() {
    return e;
  };
  this.setVariableTable = function(a) {
    e = a;
  };
  this.getTraversalCount = function(a) {
    a = c[a.getUniqueID()];
    return "undefined" === typeof a || null === a ? 0 : a[0];
  };
  this.getPaths = function() {
    return g;
  };
  this.clone = function() {
    var a = new CTATExampleTracerInterpretation(g);
    a.addTraversedLinks(b);
    for (var h in c) {
      c.hasOwnProperty(h) && a.putInlinkIdTraversalCountMap(h, c[h].slice());
    }
    a.setWorstLinkType(d);
    h = e.clone();
    a.setVariableTable(h);
    f && a.setPathToDone(new CTATExampleTracerPath(f.getLinks()));
    ctatdebug("CTATExampleTracerInterpretation --\x3e out of clone");
    return a;
  };
  this.addTraversedLinks = function(a) {
    b = b.concat(a);
  };
  this.putInlinkIdTraversalCountMap = function(a, b) {
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap");
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap key: " + a);
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap value: " + b);
    c[a] = b;
  };
  this.setWorstLinkType = function(a) {
    d = a;
  };
  this.addLink = function(a) {
    !a.isTraversable() || f && f.getLinks().has(a) || (f = null);
    ctatdebug("CTATExampleTracerInterpretation.addLink(" + (a && a.getUniqueID()) + ") pathToDone " + (f && f.size()));
    b.push(a);
    var e = a.getMatcher(), e = null === e || "undefined" === typeof e ? 1 : e.getTraversalIncrement(), g = c[a.getUniqueID()];
    null !== g && "undefined" !== typeof g ? g[0] += e : (g = [], g.push(e), c[a.getUniqueID()] = g);
    a = a.getType();
    0 > CTATExampleTracerLink.compareLinkTypes(d, a) && (d = a);
  };
  this.setPathToDone = function(a) {
    f = a;
  };
  this.getPathToDone = function(a) {
    if (f) {
      return f;
    }
    var c = a.getStartNode();
    c && a.getDoneStates().forEach(function(d) {
      f || (f = a.getBestSubpath(c, d, b));
    });
    return f;
  };
  this.countStepsForScore = function(a) {
    var b = Number.MAX_VALUE;
    (a = h.getPathToDone(a)) && a.getLinks() && (b = 0, a.getLinks().forEach(function(a) {
      if (!CTATMatcher.isTutorActor(a.getActor(), !0)) {
        var c = h.getTraversalCount(a);
        a = a.getMinTraversals();
        b = c > a ? b + c : b + a;
      }
    }));
    return b;
  };
  this.updateVariableTable = function(a, b, c) {
    var d = a, f = a.getInput();
    null !== b && "undefined" !== typeof b && (f = b, d = new CTATSAI(a.getSelection(), a.getAction(), f));
    e.put("link" + c.getUniqueID() + ".selection", a.getSelection());
    e.put("link" + c.getUniqueID() + ".action", a.getAction());
    e.put("link" + c.getUniqueID() + ".input", f);
    if (CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() === c.getActionType().toString().toUpperCase() || CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() === c.getActionType().toString().toUpperCase()) {
      a = a.getSelection(), null !== a && "undefined" !== typeof a && 0 < a.length && e.put(a, f);
    }
    return d;
  };
  this.getLastMatchedLink = function() {
    return 0 === b.length ? null : b[b.length - 1];
  };
  this.getMatchedLinks = function() {
    return b;
  };
  this.getType = function() {
    return d;
  };
  this.isTraversed = function(a, b) {
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed: " + a.getUniqueID());
    var d = c[a.getUniqueID()];
    if (null === d || "undefined" === typeof d) {
      return ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed in if condition (traversalCount === null): " + (null === d)), ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed in if condition (typeof(traversalCount) === 'undefined'): " + ("undefined" === typeof d)), !0 === b ? 0 >= a.getMinTraversals() : !1;
    }
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed out of if condition traversalCount[0]: " + d[0]);
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed out of if condition link.getMinTraversals(): " + a.getMinTraversals());
    return d[0] >= a.getMinTraversals();
  };
  this.toString = function() {
    var a = "{";
    b.forEach(function(b) {
      a += b.getUniqueID() + ", ";
    });
    a.substring(a.length - 2, a.length).toString() === ", ".toString() && (a = a.substring(0, a.length - 2));
    a += " (" + (null === g || "undefined" === typeof g ? -1 : g.size) + " paths)";
    a += " var tbl " + e;
    return a += "}";
  };
};
CTATExampleTracerInterpretation.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerInterpretation.prototype.constructor = CTATExampleTracerInterpretation;
"undefined" !== typeof module && (module.exports = CTATExampleTracerInterpretation);
var CTATExampleTracerTracer_count = 0, CTATExampleTracerTracer = function(a, b) {
  function c(a, b, c) {
    if (!a) {
      return a;
    }
    b = new CTATFormulaParser(b);
    q.ctatdebug("CTATETT.interpolate(" + a + ",vt," + c + ")");
    var d = c.getSelection(), e = c.getAction();
    c = c.getInput();
    c = CTATVariableTable.standardizeType(c);
    q.ctatdebug("CTATETT.interpolate() calling CTATFP.interpolate(" + a + ", " + d + ", " + e + ", " + c);
    a = b.interpolate(a, d, e, c);
    q.ctatdebug("CTATETT.interpolate() returning " + a);
    return a;
  }
  function e(a, b, d, e, f, g) {
    null == e && (e = f.getLastMatchedLink());
    if (b) {
      q.ctatdebug("finishEvaluate -- in if Branch doUpdate()");
      D.push(a.getStudentSAI());
      e != f.getLastMatchedLink() && (f.addLink(e), a.setResult(e.getActionType()));
      if (d.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() || d.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString()) {
        q.ctatdebug("In evaluate -- in first branch doUpdate()");
        g.forEach(function(a) {
          a.getLastMatchedLink().getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && (q.ctatdebug("In evaluate -- deleting an incorrect interp"), g.delete(a));
        });
        q.ctatdebug("In evaluate -- to call setInterpretations(), if 0 < newInterps.size " + g.size);
        0 < g.size && n(g);
        for (var h in C) {
          C.hasOwnProperty(h) && delete C[h];
        }
        q.ctatdebug("In evaluate -- out of DoUpdate if branch");
      } else {
        q.ctatdebug("In evaluate -- in else branch of doUpdate");
        a.setNumberOfInterpretations(0);
        for (var k in C) {
          C.hasOwnProperty(k) && delete C[k];
        }
        g.forEach(function(a) {
          C[a.getLastMatchedLink().getUniqueID()] = a.getLastMatchedLink();
        });
      }
      d.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && D.splice(D.length - 1, 1);
    }
    a.isSolverResult() || (q.ctatdebug("In evaluate inside the solver result if condition + " + d), a.setResult(d));
    q.ctatdebug("In evaluate out the solver result if condition");
    a.setReportableLink(e);
    a.setReportableInterpretation(f);
    a.setReportableVariableTable(f.getVariableTable());
    a.getHintRequest() || (b = e.getTutorSAI(a.getInterpolatedSAI(), f.getVariableTable()), q.ctatdebug("In evaluate -- TUTORSAI: " + b + ", studentSAI was " + a.getStudentSAI()), a.setTutorSAI(b));
    b = d == CTATExampleTracerLink.CORRECT_ACTION ? e.getSuccessMsg() : e.getBuggyMsg();
    a.setSuccessOrBuggyMsg(c(b, f.getVariableTable(), a.getStudentSAI()));
    a.getHintRequest() && (f = e.interpolateHints(f.getVariableTable()), a.setInterpolatedHints(f), q.ctatdebug("In evaluate after calling setInterpolatedHints"), Array.isArray(f) && 0 < f.length ? a.setReportableHints(f) : a.setReportableHints(e.getHints()), q.ctatdebug("In evaluate --\x3e after setReportableHints"));
    q.ctatdebug("In evaluate after fireExampleTracerEvent");
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of finishEvaluate");
    return d.toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString();
  }
  function g(a, b, c, d) {
    q.ctatdebug("checkDoneStep() hintTrace " + b + ", sai " + a.getStudentSAI() + ", exitOnIncorrectDone " + y.exitOnIncorrectDone() + ", hideButRequireSteps " + y.hideButRequireSteps() + ", nInterps " + d.size);
    if (!a.getStudentSAI().isDone()) {
      return null;
    }
    if (y.exitOnIncorrectDone()) {
      return a.setDoneStepFailed(!1), null;
    }
    if (!b && y.hideButRequireSteps()) {
      b = y.getDoneLinks();
      q.ctatdebug("checkDoneStep getDoneLinks().size " + b.size);
      b = b.values();
      for (var f;!(f = b.next()).done;) {
        if (y.pathToLinkIsSubset(f.value, B)) {
          return a.setDoneStepFailed(!1), 1 > d.size ? e(a, c, CTATExampleTracerLink.CORRECT_ACTION, f.value, q.getBestInterpretation(), q.getInterpretationsInternal()) : e(a, c, CTATExampleTracerLink.CORRECT_ACTION, f.value, m(d), d);
        }
      }
    }
    1 > d.size && a.setDoneStepFailed(!0);
    return null;
  }
  function d(a, b, c) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e _evaluate(" + a + ", " + b + ", " + c + ")");
    A = a;
    var d = new Set, n = a.getPreloadedLinkMatches();
    q.ctatdebug("interps # : " + x.length);
    q.ctatdebug("interps: " + x);
    x.forEach(function(e) {
      q.ctatdebug("In evaluate -- entered the interpretations loop");
      if ("undefined" === typeof n || null === n) {
        q.ctatdebug("In evaluate -- entered if check for saiLinkMatches"), n = h(a.getStudentSAI(), a.getActor(), b, e.getVariableTable(), a), q.ctatdebug("In evaluate -- exiting if check for saiLinkMatches");
      } else {
        for (var g = 0;g < n.length;++g) {
          f(a.getStudentSAI(), !0, n[g], n[g].getActor(), e.getVariableTable());
        }
      }
      q.ctatdebug("Link matches # : " + n.length);
      n.forEach(function(b) {
        q.ctatdebug("In evaluate -- entered the saiLinkMatches loop + " + b);
        if (e.getTraversalCount(b) >= b.getMaxTraversals()) {
          return q.ctatdebug("In evaluate -- skipped a saiLinkMatches loop \n Skipped due to max traversals" + b.getMaxTraversals()), !1;
        }
        var f = e.clone();
        q.ctatdebug("In evaluate size of getPaths " + f.getPaths().size);
        f.getPaths().forEach(function(c) {
          q.ctatdebug("In evaluate -- looping through the newInterp.getPaths()\n Examining path: " + c);
          !1 === k(b, f, c, !1, a) && (q.ctatdebug("In evaluate -- in if condition, checking if isPathOK"), f.getPaths().delete(c), q.ctatdebug("In evaluate -- out of if condition, checking if isPathOK\n Tried to delete path."));
        });
        q.ctatdebug("In evaluate -- done looping through the newInterp.getPaths(), size " + f.getPaths().size);
        if (0 < f.getPaths().size) {
          q.ctatdebug("In evaluate -- if number of paths is greater than 0");
          f.addLink(b);
          q.ctatdebug("In evaluate -- new link added");
          if (!0 === c) {
            q.ctatdebug("In evaluate -- we are in the doUpdate if condition");
            var g = l(b, a.getStudentSAI(), f);
            q.ctatdebug("In evaluate -- updatingVariable table");
            a.setInterpolatedSAI(f.updateVariableTable(a.getStudentSAI(), g, b));
            q.ctatdebug("In evaluate -- done updatingVariable table: " + f.getVariableTable());
          }
          d.add(f);
          q.ctatdebug("In evaluate -- added new interp");
        }
        q.ctatdebug("In evaluate -- out of saiLinkMatches loop");
      });
      q.ctatdebug("In evaluate -- out of interpretation loops");
    });
    a.setNumberOfInterpretations(d.size);
    q.ctatdebug("In evaluate -- number of interpretations " + d.size + " set");
    var t = g(a, b, c, d);
    if (null != t) {
      return t.valueOf();
    }
    if (0 === d.size) {
      return q.ctatdebug("In evaluate -- if condition no new interpretations"), 0 !== n.length && !0 === n[0].isDone() && a.setDoneStepFailed(!0), a.setResult(CTATExampleTracerLink.NO_MODEL), q.ctatdebug("In evaluate -- if condition no new interpretations returning false"), !1;
    }
    t = m(d);
    q.ctatdebug("In evaluate -- just found bestInterp");
    var H = null;
    !0 === a.isSolverResult() ? (q.ctatdebug("In evaluate -- in if branch of isSolverResult"), H = CTATExampleTracerLink.NO_MODEL.toString().toUpperCase() === a.getResult().toString().toUpperCase() ? CTATExampleTracerLink.BUGGY_ACTION.toString() : a.getResult().toString()) : (q.ctatdebug("In evaluate -- in else branch of isSolverResult"), H = t.getLastMatchedLink().getType());
    return e(a, c, H, null, t, d);
  }
  function f(a, b, c, d, e) {
    var f = b && c.isCorrect();
    if ("undefined" != typeof B[c.getUniqueID()] || c.matchesSAIforHint(a, d, null, e)) {
      B[c.getUniqueID()] = f;
    }
    q.ctatdebug("updateMatchedSelections(): link " + c.getUniqueID() + ", matched " + b + ", newResult " + f + ", matchedSelections[link] " + B[c.getUniqueID()]);
  }
  function h(a, b, c, d, e) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in findSAIMatchingLinks(" + a + ", " + b + ", " + c + ")");
    var g = [];
    y.getLinks().forEach(function(h) {
      if (!1 === c) {
        q.ctatdebug("Calling link.matchesSAI() on link " + h + ", sai " + a);
        var k = h.matchesSAI(a, b, d);
        q.ctatdebug("Result from link.matchesSAI() on link " + h + ": " + k + ", typeof " + typeof k);
        !0 === k && g.push(h);
        y.hideButRequireSteps() && f(a, k, h, b, d);
      } else {
        !0 === h.matchesSAIforHint(a, b, e, d) && g.push(h);
      }
    });
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of findSAIMatchingLinks: #matchingLinks " + g.length);
    return g;
  }
  function k(a, b, c, d, e) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK");
    var f = null;
    if (!0 === d) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK in demonstrate mode");
      var g = b.getMatchedLinks().slice();
      g.push(a);
      f = c.getLinksRestricted(g);
    } else {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK NOT in demonstrate mode"), f = c.getLinks();
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK path.getLinks() " + c.getLinks().size);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK pathLinks " + f.size);
    if (!0 === d) {
      var h = [], k = !0;
      b.getMatchedLinks().forEach(function(a) {
        !1 !== k && (!1 === y.observesOrderingConstraints(h, a, f, e) || !1 === u(b, a, f) ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false1"), k = !1) : h.push(a));
      });
      if (!1 === k) {
        return q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false2"), !1;
      }
    }
    if (a.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      if (!1 === y.isIncorrectLinkOK(b.getMatchedLinks(), a, f, b)) {
        return q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false3"), !1;
      }
    } else {
      if (!1 === y.observesOrderingConstraints(b.getMatchedLinks(), a, f, e)) {
        return q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false4"), !1;
      }
      if (!1 === u(b, a, f)) {
        return q.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false5"), !1;
      }
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of isPathOK returning true");
    return !0;
  }
  function l(a, b, c) {
    q.ctatdebug("CTATExampleTracerTracer.replaceInput(" + a + ", " + b + ", ...)");
    if (null === a || "undefined" === typeof a || !1 === a.replaceInput()) {
      return q.ctatdebug("replaceInput false, returning null"), null;
    }
    a = a.evaluateReplacement(b, c.getVariableTable(), q);
    q.ctatdebug("CTATExampleTracerTracer.replaceInput() returning " + a);
    return a;
  }
  function m(a) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation");
    var b = new CTATExampleTracerInterpretationComparator, c = null;
    a.forEach(function(a) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation iteration");
      null === c || "undefined" === typeof c ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation first if condition"), c = a) : (q.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation else of first if condition"), 0 < b.compare(a, c) && (q.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation second if condition"), c = a));
    });
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of findBestInterpretation");
    return c;
  }
  function n(a) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in setInterpretations");
    x.length = 0;
    0 === a.size ? q.ctatdebug("CTATExampleTracerTracer --\x3e returning from setInterpretations") : (q.ctatdebug("CTATExampleTracerTracer --\x3e setInterpretations c.size: " + a.size), a.forEach(function(a) {
      x.push(a);
    }), r = null, q.ctatdebug("CTATExampleTracerTracer --\x3e out of setInterpretations"));
  }
  function p() {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths");
    var a = y.findAllPaths();
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths: #paths " + a.size);
    a.forEach(function(a) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths loopring through paths");
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths size of path" + a.getLinks().size);
    });
    return a;
  }
  function u(a, b, c) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in doneStepOK: link " + b + ", isDone() " + b.isDone());
    if (null === b || "undefined" === typeof b || !1 === b.isDone()) {
      return q.ctatdebug("doneStepOK in first if condition"), !0;
    }
    if (b.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      return q.ctatdebug("doneStepOK in second if condition"), !0;
    }
    q.ctatdebug("doneStepOK before loop");
    var d = !0;
    c.forEach(function(c) {
      !1 === d ? q.ctatdebug("CTATExampleTracerTracer --\x3e we are breaking from the loop") : c.getUniqueID() === b.getUniqueID() ? q.ctatdebug("CTATExampleTracerTracer --\x3e inside second if condition") : a.getTraversalCount(c) < c.getMinTraversals() && (q.ctatdebug("CTATExampleTracerTracer --\x3e we should return false from the second if condition"), d = !1);
    });
    if (!1 === d) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e out of doneStepOK returning false"), !1;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of doneStepOK returning true");
    return !0;
  }
  function t(a, b) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink");
    var c = null !== b && "undefined" !== typeof b && null !== b[0] && "undefined" !== typeof b[0] ? b[0] : null;
    if (null === c || "undefined" === typeof c) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink first if condition"), c = q.getBestInterpretation();
    }
    null !== b && "undefined" !== typeof b && (b[0] = c);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink interp.getPaths(): " + c.getPaths().size);
    var d = CTATExampleTracerPath.getBestPath(c.getPaths());
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink path: " + d);
    var e = v(c, d, a, !1);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink highestLink: " + e);
    if (null !== e && "undefined" !== typeof e) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning highestLink"), e;
    }
    var f = null;
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning path.getLinks() " + d.getLinks().size);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning path.getSortedLinks() " + d.getSortedLinks());
    var g = !1, h = null;
    d.getSortedLinks().forEach(function(b) {
      !0 !== g && (q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink in for loop" + b), f = b, c.getTraversalCount(b) < b.getMaxTraversals() && (!1 === a || 0 < q.nonEmptyHints(b, c.getVariableTable())) && y.observesOrderingConstraints(c.getMatchedLinks(), b, d.getLinks(), null) && u(c, b, d.getLinks()) && (q.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink in link: " + b), h = b, g = !0));
    });
    if (!0 === g) {
      return h;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of _getBestNextLink, returning: " + f);
    return null;
  }
  function v(a, b, c, d) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink");
    var e = new CTATExampleTracerEvent(q, null, CTATMsgType.DEFAULT_STUDENT_ACTOR), f = !0, g = [];
    b.getSortedLinks().forEach(function(b) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop link.getUniqueID(): " + b.getUniqueID());
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop interp.isTraversed(link, countOptionalAsTraversed): " + a.isTraversed(b, d));
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop isNoOp(link): " + w(b));
      !0 === a.isTraversed(b, d) || !0 === w(b) ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in if condition"), f = !0) : (!0 === f && (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in second if condition"), y.getNode(b.getPrevNode()).getOutLinks().forEach(function(b) {
        c && 1 > q.nonEmptyHints(b, a.getVariableTable()) || a.getTraversalCount(b) >= b.getMaxTraversals() || (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink pushing outlink: " + b.getUniqueID()), g.push(b));
      })), f = null === b || "undefined" === typeof b ? !1 : b.getMinTraversals() <= a.getTraversalCount(b));
    });
    g.sort(function(b, c) {
      return (new CTATExampleTracerLinkComparator(a, q)).compare(b, c);
    });
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink before sorting");
    var h = !1, l = null;
    g.forEach(function(c) {
      !0 !== h && (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting in fro loop"), !0 === k(c, a, b, !1, e) ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting first if"), l = c, h = !0) : a.getPaths().forEach(function(d) {
        !0 !== h && (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting in inner loop"), b !== d && (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting second if"), !0 === k(c, a, d, !1, e) && (q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting third if"), l = c, h = !0)));
      }));
    });
    if (!0 === h) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink returning: " + l.getUniqueID()), l;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of getHighestUntraversedLink");
    return null;
  }
  function w(a) {
    return null === a || "undefined" === typeof a ? !1 : 1 > a.getMinTraversals() && 1 > a.getMaxTraversals();
  }
  CTATBase.call(this, "CTATExampleTracerTracer", a);
  var x = null, C = null, D = null, y = a, A = null;
  CTATExampleTracerTracer_count++;
  var r = null, B = {}, q = this;
  this.getMatchedSelections = function() {
    return B;
  };
  this.getLastResult = function() {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getResult");
    return A;
  };
  this.resetTracer = function() {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer entering");
    null === x || "undefined" === typeof x ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer making interpretations array"), x = []) : (q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer clearing interpretations array"), x.length = 0);
    var a = new CTATExampleTracerInterpretation(p());
    q.ctatdebug("CTATExampleTracerTracer tempInterp--\x3e in resetTracer tempInterp " + a);
    null !== b && "undefined" !== typeof b && (q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer startStateVT if condition"), a.setVariableTable(b));
    x.push(a);
    r = a;
    if (null === C || "undefined" === typeof C) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer incorrectActionMatches if condition"), C = {};
    } else {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer else branch of incorrectActionMatches if condition");
      for (var c in C) {
        C.hasOwnProperty(c) && delete C[c];
      }
    }
    B = {};
    null === D || "undefined" === typeof D ? (q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer last if condition"), D = []) : (q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer else branch of last if condition"), D.length = 0);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer before iterating over all the links in the graphs");
    y.getLinks().forEach(function(a) {
      a.getMatcher().resetMatcher();
    });
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of resetTracer");
  };
  this.evaluate = function(a) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in public evaluate(), calling private _evaluate; given event " + a);
    return d(a, !1, !0);
  };
  this.nonEmptyHints = function(a, b) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in nonEmptyHints");
    if (null === a || "undefined" === typeof a) {
      return 0;
    }
    var c = a.interpolateHints(b);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in nonEmptyHints: link.interpolateHints() " + a.interpolateHints().length);
    if (null === c || "undefined" === typeof c || 1 > c.length) {
      return 0;
    }
    for (var d = 0, e = 0;e < c.length;++e) {
      0 < String(c[e]).trim().length && d++;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e returning from nonEmptyHints " + d);
    return d;
  };
  this.traceForHint = function(a) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint");
    var b = d(a, !0, !1);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint return from evaluate " + b);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint result from evaluate " + a.getResult().toString());
    q.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint link   from evaluate " + a.getReportableLink());
    if (a.getResult().toString() === CTATExampleTracerLink.CORRECT_ACTION.toString()) {
      return b = a.getReportableLink(), a.setTutorSAI(new CTATSAI(a.getStudentSAI().getSelection(), b.getDefaultSAI().getAction(), b.getDefaultSAI().getInput())), a.setActor(CTATMsgType.DEFAULT_STUDENT_ACTOR), q.ctatdebug("CTATExampleTracerTracer --\x3e traceForHint returning hintLink " + b + ", result " + a), b;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of traceForHint, returning null");
    return null;
  };
  this.matchForHint = function(a) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in matchForHint");
    var b = null, b = null === a.getStudentSAI() || "undefined" === typeof a.getStudentSAI() ? null : a.getStudentSAI().getSelectionArray();
    if (null !== b && "undefined" !== typeof b && 0 < b.length && (q.ctatdebug("CTATExampleTracerTracer --\x3e in matchForHint first if"), a.setWantReportableHints(!0), b = q.traceForHint(a), null !== b && "undefined" !== typeof b && 0 < a.getReportableHints().length)) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e matchForHint via traceForHint returning " + b + ", result " + a), b;
    }
    b = q.getBestNextLink(!0, a);
    q.ctatdebug("CTATExampleTracerTracer --\x3e matchForHint() traceForHint via getBestNextLink returning " + b);
    return b;
  };
  this.getBestNextLink = function(a, b) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink");
    var c = [], d = t(a, c);
    if (null === d || "undefined" === typeof d) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink returning null"), null;
    }
    if (d.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      return q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink return null no correct suboptimal step"), null;
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink else branch");
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink got interp " + (null == c ? "null" : c[0]));
    if (b) {
      var e = d.interpolateHints(c[0].getVariableTable());
      b.setInterpolatedHints(e);
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink setInterpolatedHints");
      Array.isArray(e) && 0 < e.length ? b.setReportableHints(e) : b.setReportableHints(d.getHints());
      q.ctatdebug("In evaluate --\x3e after setReportableHints");
      b.setReportableLink(d);
      b.setReportableInterpretation(c[0]);
      b.setResult(d.getType());
      b.setTutorSAI(d.getDefaultSAI());
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink return etLink");
    return d;
  };
  this.doHint = function(a, b, c, d, e, f) {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint");
    var g = c = c = null;
    if (f && null !== b && "undefined" !== typeof b && 1 < b.length && b[1].toString() === CTATMsgType.PREVIOUS_FOCUS.toString() && null !== a && "undefined" !== typeof a && 1 < a.length && null !== a[1] && "undefined" !== typeof a[1] && a[1].toString() !== "null".toString() && (q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint first if condition"), c = [], c.push(a[1]), 2 < b.length)) {
      for (q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint inner if condition"), g = [], a = 2;a < b.length;a++) {
        q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint for loop " + a), g.push(b[a]);
      }
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint out of if condition");
    b = new CTATExampleTracerEvent(q, new CTATSAI(c, g, null), d);
    b.setHintRequest(!0);
    q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint result: " + b);
    c = q.matchForHint(b);
    Array.isArray(e) && (q.ctatdebug("CTATExampleTracerTracer --\x3e in doHint last if condition"), e.push(b));
    q.ctatdebug("CTATExampleTracerTracer --\x3e returning from doHint: " + c);
    return c;
  };
  this.getBestInterpretation = function() {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestInterpretation");
    if (null === r || "undefined" === typeof r) {
      q.ctatdebug("CTATExampleTracerTracer --\x3e in getBestInterpretation in if condition"), r = m(q.getInterpretationsInternal());
    }
    q.ctatdebug("CTATExampleTracerTracer --\x3e out of getBestInterpretation " + (null === r || void 0 === r));
    return r;
  };
  this.getInterpretationsInternal = function() {
    q.ctatdebug("CTATExampleTracerTracer --\x3e in getInterpretationsInternal");
    return x;
  };
  this.toString = function() {
    var a = "TracerState\n";
    null === x ? a += "(no interpretations)\n" : x.forEach(function(b) {
      a += b.toString() + "\n";
    });
    return a;
  };
  this.addInterfaceVariablesFromEvent = function(a) {
    if (a) {
      var b = a.getTutorSelection();
      a = a.getTutorInput();
      q.addInterfaceVariables(b, a);
    }
  };
  this.addInterfaceVariables = function(a, c) {
    q.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables(" + a + ", " + c + ")");
    if (a && c) {
      var d = a.length;
      d > c.length && (d = c.length);
      for (var e = 0;e < d;e++) {
        a[e] && b.put(a[e], CTATVariableTable.standardizeType(c[e]));
      }
      q.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables() startStateVT " + b);
      x && x.forEach(function(b) {
        if (b = b.getVariableTable()) {
          for (var e = 0;e < d;e++) {
            a[e] && b.put(a[e], CTATVariableTable.standardizeType(c[e]));
          }
          q.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables() interp.vt " + b);
        }
      });
    }
  };
  this.findCurrentState = function() {
    q.ctatdebug("Entering findCurrentState");
    var a = q.getBestInterpretation();
    return a && a.getLastMatchedLink() && a.getLastMatchedLink().isDone() ? a.getLastMatchedLink().getNextNode() : (a = t(!1, [a])) ? a.getPrevNode() : y ? y.getStartNode() : null;
  };
};
CTATExampleTracerTracer.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerTracer.prototype.constructor = CTATExampleTracerTracer;
"undefined" !== typeof module && (module.exports = CTATExampleTracerTracer);
var CTATExampleTracerGraph = function(a, b, c) {
  function e(a, b, c) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in isOrderOK");
    for (var e = d(b), g = 0;g < e.length;g++) {
      var k = e[g];
      if (!0 === E.isGroupOrdered(k)) {
        if (g !== e.length - 1) {
          if (!1 === f(k, h(e[g + 1], c), a, c)) {
            return !1;
          }
        } else {
          if (!1 === f(k, b, a, c)) {
            return !1;
          }
        }
      }
    }
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of isOrderOK");
    return !0;
  }
  function g(a, b, c) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in isReenteringOK");
    b = d(b);
    for (var e = !0, f = 0;f < b.length;f++) {
      if (!0 === e && !1 === E.isGroupReenterable(b[f])) {
        for (var e = !1, g = 0;g < a.length;g++) {
          if (!0 === E.isLinkInGroup(b[f], a[g])) {
            e = !0;
          } else {
            if (!0 === e) {
              return !1;
            }
          }
        }
      } else {
        if (!1 === e) {
          break;
        }
      }
    }
    if (0 !== a.length) {
      var h = d(a[a.length - 1]);
      z.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups null? " + (null === h));
      z.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups undefined? " + ("undefined" === typeof h));
      z.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups last traversedLink " + a[a.length - 1].getUniqueID());
      z.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups length " + (h ? h.length : null));
      b.forEach(function(a) {
        h.splice(h.indexOf(a), 1);
      });
      h.forEach(function(a) {
        !0 === E.isGroupReenterable(a) && h.splice(h.indexOf(a), 1);
      });
      var l = !0;
      h.forEach(function(b) {
        !1 !== l && c.forEach(function(c) {
          !1 !== l && k(a, c) < c.getMinTraversals() && !0 === E.isLinkInGroup(b, c) && (l = !1);
        });
      });
      if (!1 === l) {
        return !1;
      }
    }
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of isReenteringOK");
    return !0;
  }
  function d(a) {
    z.ctatdebug("in findGroupsOfLink(link " + a + "): typeof(groupModel) " + typeof E);
    a = E.getGroupsContainingLink(a);
    z.ctatdebug("in findGroupsOfLink groupsSet.size " + a.size);
    var b = [];
    a.forEach(function(a) {
      z.ctatdebug("in findGroupsOfLink group element " + a.getName());
      b.push(a);
    });
    b.sort(function(a, b) {
      return E.getGroupLinkCount(b) - E.getGroupLinkCount(a);
    });
    return b;
  }
  function f(a, b, c, d) {
    var e = -1, f = null, g = Number.MAX_VALUE, l = null;
    E.getGroupSubgroups(a).forEach(function(a) {
      if (!1 === E.isLinkInGroup(a, b) && 0 !== E.getGroupLinkCount(a)) {
        var k = h(a, d);
        null !== k && "undefined" !== typeof k && (k = k.getDepth(), k < b.getDepth() && k > e && (!1 === m(a) || !0 === n(a, c)) && (e = k, f = a), k > b.getDepth() && k < g && (!1 === m(a) || !0 === n(a, c)) && (g = k, l = a));
      }
    });
    E.getUniqueLinks(a).forEach(function(a) {
      if (!0 === d.has(a)) {
        var h = a.getDepth();
        h < b.getDepth() && h > e && (0 < a.getMinTraversals() || -1 < c.indexOf(a)) && (e = h, f = a);
        h > b.getDepth() && h < g && (0 < a.getMinTraversals() || -1 < c.indexOf(a)) && (g = h, l = a);
      }
    });
    if (null !== f && "undefined" !== typeof f) {
      if (f instanceof CTATExampleTracerLink) {
        if (k(c, f) < f.getMinTraversals()) {
          return !1;
        }
      } else {
        if (f instanceof CTATLinkGroup && !1 === p(f, c, d)) {
          return !1;
        }
      }
    }
    return null !== l && "undefined" !== typeof l && (l instanceof CTATExampleTracerLink && -1 < c.indexOf(l) || l instanceof CTATLinkGroup && !0 === n(l, c)) ? !1 : !0;
  }
  function h(a, b) {
    var c = Number.MAX_VALUE, d = null;
    E.getGroupLinks(a).forEach(function(a) {
      a.getDepth() < c && !0 === b.has(a) && (c = a.getDepth(), d = a);
    });
    return d;
  }
  function k(a, b) {
    for (var c = 0, d = 0;d < a.length;d++) {
      b === a[d] && c++;
    }
    return c;
  }
  function l(a, b, c) {
    var d = !1, e = !0, f = !1;
    (new CTATExampleTracerPath(b)).getSortedLinks().forEach(function(b) {
      if (!1 !== e && !0 !== f) {
        if (!1 === d) {
          !0 === E.isLinkInGroup(a, b) && (d = !0);
        } else {
          if (!1 === E.isLinkInGroup(a, b)) {
            f = !0;
            return;
          }
        }
        c.getTraversalCount(b) < b.getMaxTraversals() && (e = !1);
      }
    });
    return !1 === e ? !1 : !0;
  }
  function m(a) {
    var b = !0;
    E.getGroupLinks(a).forEach(function(a) {
      !1 !== b && 0 !== a.getMinTraversals() && (b = !1);
    });
    return !1 === b ? !1 : !0;
  }
  function n(a, b) {
    for (var c = 0;c < b.length;c++) {
      if (!0 === E.isLinkInGroup(a, b[c])) {
        return !0;
      }
    }
    return !1;
  }
  function p(a, b, c) {
    var d = !0;
    E.getGroupLinks(a).forEach(function(a) {
      !1 !== d && !0 === c.has(a) && k(b, a) < a.getMinTraversals() && (d = !1);
    });
    return !1 === d ? !1 : !0;
  }
  function u() {
    for (var a = 0;a < x.length;a++) {
      x[a].clearInLinks();
    }
    var b = z.getStartNode();
    null !== b && "undefined" !== typeof b && null !== b.getOutLinks() && "undefined" !== typeof b.getOutLinks() && (a = 0, b.getOutLinks().forEach(function(b) {
      t(b, a++);
    }));
  }
  function t(a, b) {
    ctatdebug("updateInLinkSubGraph(" + a + ", " + b + ")");
    var c = z.getNode(a.getNextNode());
    if (null !== c && "undefined" !== typeof c) {
      c.addInLink(a);
      var d = 0;
      c.getOutLinks().forEach(function(a) {
        t(a, d++);
      });
    }
  }
  function v(a) {
    var b = z.getNode(a.getPrevNode());
    if (null !== b && "undefined" !== typeof b) {
      var c = -1;
      b.getInLinks().forEach(function(a) {
        -1 === a.getDepth() && v(a);
        a.getDepth() > c && (c = a.getDepth());
      });
      a.setDepth(c + 1);
    }
  }
  CTATBase.call(this, "CTATExampleTracerGraph", "visualdata");
  var w = null, x = null, C = null, D = null, y = null, A = null, r = new Set, B = new Set, q = null, E = null, F = CTATMsgType.SHOW_ALL_FEEDBACK, z = this;
  this.getFeedbackPolicy = function() {
    return F;
  };
  this.setFeedbackPolicy = function(a) {
    z.ctatdebug("Graph.setFeedbackPolicy(" + a + ") old policy " + F);
    F = "false" === a ? CTATMsgType.SHOW_ALL_FEEDBACK : "true" === a ? CTATMsgType.HIDE_ALL_FEEDBACK : a;
  };
  this.hideButRequireSteps = function() {
    return F == CTATMsgType.HIDE_BUT_COMPLETE;
  };
  this.exitOnIncorrectDone = function() {
    return F == CTATMsgType.HIDE_ALL_FEEDBACK || F == CTATMsgType.HIDE_BUT_ENFORCE;
  };
  this.getDefaultBuggyMsg = function() {
    return E.getTopLevelGroup() ? E.getTopLevelGroup().getDefaultBuggyMsg() : null;
  };
  this.getLinks = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getLinks");
    return C;
  };
  this.addLink = function(a, b) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in addLink");
    C.push(a);
    a.isDone() ? B.add(a) : B.delete(a);
    null === b || "undefined" === typeof b ? E.addLinkToGroup(E.getTopLevelGroup(), a) : E.addLinkToGroup(b, a);
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of addLink");
  };
  this.addNode = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in addNode");
    x.push(a);
    D[a.getNodeID()] = a;
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of addNode");
  };
  this.findAllPaths = function() {
    ctatdebug("CTATExampleTracerGraph --\x3e in findAllPaths " + z.getStartNode().getNodeID());
    return z.findPathsFromNode(z.getStartNode());
  };
  this.pathToLinkIsSubset = function(a, b) {
    var c = z.getNode(a.getPrevNode());
    z.ctatdebug("pathToLinkIsSubset(" + a + ") sourceNode " + c.getNodeID());
    if (0 < a.getMinTraversals() && "undefined" == typeof b[a.getUniqueID()]) {
      return !1;
    }
    if (c == z.getStartNode()) {
      return !0;
    }
    for (c = c.getInLinks().values();!(c = c.next()).done;) {
      return z.pathToLinkIsSubset(c.value, b);
    }
    return !1;
  };
  this.observesOrderingConstraints = function(a, b, c, d) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints");
    if (null === c || "undefined" === typeof c || 0 === c.size || null === b || "undefined" === typeof b) {
      return z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints first if"), null !== d && "undefined" !== typeof d && (z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints setting out of order false"), d.setOutOfOrder(!1)), z.ctatdebug("CTATExampleTracerGraph --\x3e returning first true observesOrderingConstraints"), !0;
    }
    if (!0 === c.has(b) && !0 === e(a, b, c) && !0 === g(a, b, c)) {
      return z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints second if"), null !== d && "undefined" !== typeof d && (z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints setting out of order false"), d.setOutOfOrder(!1)), z.ctatdebug("CTATExampleTracerGraph --\x3e returning second true observesOrderingConstraints"), !0;
    }
    null !== d && "undefined" !== typeof d && (z.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints setting out of order true"), d.setOutOfOrder(!0));
    z.ctatdebug("CTATExampleTracerGraph --\x3e returning false observesOrderingConstraints");
    return !1;
  };
  this.isIncorrectLinkOK = function(a, b, c, d) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in isIncorrectLinkOK");
    var f = !1, g = null, h = !0, k = !1;
    z.getNode(b.getPrevNode()).getOutLinks().forEach(function(b) {
      !0 !== k && !1 !== h && b.getType().toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString() && !0 === c.has(b) && (f = !0, !1 === e(a, b, c) ? h = !1 : (g = b, k = !0));
    });
    if (!1 === h || null === g || "undefined" === typeof g) {
      return !1;
    }
    if (!1 === f) {
      return z.ctatdebug("isIncorrectLinkOK(): no siblings of link in path"), !1;
    }
    if (!0 === f && (b = z.getSmallestContainingGroup(b), !0 === E.isLinkInGroup(b, g) && !1 === E.isGroupOrdered(b) && !0 === l(b, c, d))) {
      return !1;
    }
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of isIncorrectLinkOK");
    return !0;
  };
  this.getNode = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getNode(" + a + ") returning " + D[a]);
    return D[a];
  };
  this.findPathsFromNode = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in findPathsFromNode outlinks " + a.getOutLinks().size);
    var b = new Set;
    if (!a || 0 === a.getOutLinks().size) {
      return b.add(new CTATExampleTracerPath(null)), b;
    }
    z.ctatdebug("CTATExampleTracerGraph --\x3e before forEach ");
    a.getOutLinks().forEach(function(a) {
      z.ctatdebug("CTATExampleTracerGraph --\x3e in forEach " + a.getType().toString());
      if (a.getType().toString() != CTATExampleTracerLink.BUGGY_ACTION.toString()) {
        var c = z.findPathsFromNode(z.getNode(a.getNextNode()));
        z.ctatdebug("findPathsFromNode childPaths.size " + c.size);
        c.forEach(function(c) {
          z.ctatdebug("findPathsFromNode childPath.size " + c.size + ", outLink " + a);
          c.addLink(a);
          b.add(c);
        });
      }
    }, a);
    0 === b.size && b.add(new CTATExampleTracerPath(null));
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of findPathsFromNode " + b.size);
    return b;
  };
  this.getDoneStates = function() {
    return r;
  };
  this.checkForDoneState = function(a) {
    if (a.isDone() && a.isTraversable()) {
      var b = z.getNode(a.getNextNode());
      z.ctatdebug("CTATExampleTracerGraph.addDoneState(linkID " + a.getUniqueID() + ") adding destNode " + b);
      r.add(b);
    }
  };
  this.getBestSubpath = function(a, b, c) {
    if (!a || !b) {
      return null;
    }
    var d = z.findPathsFromNode(a), e = new Set;
    d.forEach(function(a) {
      a = a.subpath(b);
      !a || c && !a.containsAll(c) || e.add(a);
    });
    z.ctatdebug("CTATExampleTracerGraph.getBestSubpath(" + a + ", " + b + ", [" + (c ? c.length : -1) + "]) pathsFrom " + d.size + ", pathsFromTo " + e.size);
    return 1 > e.size ? null : CTATExampleTracerPath.getBestPath(e);
  };
  this.getStartNode = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getStartNode() returning " + y);
    return y;
  };
  this.getLinkByID = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getLinkByID");
    for (var b = 0;b < C.length;b++) {
      if (C[b].getUniqueID() === a) {
        return C[b];
      }
    }
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of getLinkByID");
    return null;
  };
  this.setStartNode = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in setStartNode(" + a + ")");
    y = a;
  };
  this.getStudentStartsHereNode = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e getStudentStartsHereNode() returns " + A);
    return A;
  };
  this.setStudentStartsHereNode = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in setStudentStartsHereNode(" + a + ")");
    A = a;
  };
  this.getExampleTracer = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getExampleTracer() returning " + w);
    return w;
  };
  this.forDebugging = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in forDebugging");
    z.ctatdebug("Nodes in the graph -- ids");
    x.forEach(function(a) {
      z.ctatdebug(a.getNodeID());
    });
    z.ctatdebug("Links in the graph -- ids, from, to");
    C.forEach(function(a) {
      z.ctatdebug(a);
    });
  };
  this.getSmallestContainingGroup = function(a) {
    return E.getLowestLevelGroupOfLink(a);
  };
  this.redoLinkDepths = function() {
    u();
    z.getLinks().forEach(function(a) {
      a.setDepth(-1);
    });
    z.getLinks().forEach(function(a) {
      -1 === a.getDepth() && v(a);
    });
  };
  this.getGroupModel = function() {
    return E;
  };
  this.setVisualData = function(a) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in setVisualData");
    q = a;
  };
  this.getVisualData = function() {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in getVisualData() returning " + q);
    return q;
  };
  this.getDoneLinks = function() {
    return B;
  };
  (function(a, b) {
    z.ctatdebug("CTATExampleTracerGraph --\x3e in initGraph (" + a + " , " + b);
    C = [];
    x = [];
    D = {};
    if (null === E || "undefined" === typeof E) {
      E = new CTATDefaultGroupModel, z.ctatdebug("CTATExampleTracerGraph --\x3e created a group model from here");
    }
    E.clear();
    E.setDefaultReenterable(!b);
    E.setGroupOrdered(E.getTopLevelGroup(), a);
    E.setGroupName(E.getTopLevelGroup(), CTATExampleTracerGraph.TOP_LEVEL);
    w = new CTATExampleTracerTracer(z, c);
    z.ctatdebug("CTATExampleTracerGraph --\x3e out of initGraph");
  })(!a, b);
};
Object.defineProperty(CTATExampleTracerGraph, "TOP_LEVEL", {enumerable:!1, configurable:!1, writable:!1, value:"Top Level"});
CTATExampleTracerGraph.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerGraph.prototype.constructor = CTATExampleTracerGraph;
"undefined" !== typeof module && (module.exports = CTATExampleTracerGraph);
var CTATMessageTank = function(a, b) {
  function c(a) {
    p.ctatdebug("entering updateProblemSummary()");
    a && h.forEach(function(b) {
      if (b.msgType == CTATMsgType.ASSOCIATED_RULES) {
        var c = b.evt;
        p.ctatdebug("entering updateProblemSummaryWithEvent(" + c + ")");
        if (c) {
          b = c.getResult();
          c.getHintRequest() && (b = CTATExampleTracerLink.HINT_ACTION);
          var e = CTATMsgType.CompletionValue[0];
          a.setCompletionStatus(e, CTATGlobals.confirmDone);
          var f = b && b == CTATExampleTracerLink.CORRECT_ACTION, g = !1, h = null, k = c.getStudentSAI();
          k && (h = k.getSelection()) && (g = "done" == String(h).toLowerCase());
          p.ctatdebug("updateProblemSummary() Completion status " + e + ", doneStep " + g + ", correct " + f);
          g && (e = f ? CTATMsgType.CompletionValue[1] : CTATMsgType.CompletionValue[0], a.setCompletionStatus(e, !0));
          e == CTATMsgType.CompletionValue[1] ? (a.stopTimer(), d && d.setOutputStatus(CTATProblemStateStatus.complete)) : a.restartTimer();
          e = c.getActor();
          p.ctatdebug("updateProblemSummmary() actor " + e + ", indicatorObj " + b);
          CTATMatcher.isTutorActor(e) || (c = c.getStepID(), CTATTutorMessageBuilder.isHint(b) ? a.addHint(c) : CTATTutorMessageBuilder.isCorrect(b) ? null !== b && "undefined" !== typeof b && a.addCorrect(c) : a.addError(c));
        }
      }
    });
  }
  function e(a) {
    switch(p.suppressFeedback(a, d.getFeedbackPolicy())) {
      case CTATMsgType.SHOW_ALL_FEEDBACK:
        return !1;
      case CTATMsgType.DELAY_FEEDBACK:
        a = a.msg;
        var b = CTATMsgType.getProperty(a, "Selection");
        b && (f || (f = {}), f[b.toLowerCase()] = a);
        return !0;
      case CTATMsgType.HIDE_ALL_FEEDBACK:
        return !0;
      case CTATMsgType.HIDE_BUT_COMPLETE:
        return !0;
      case CTATMsgType.HIDE_BUT_ENFORCE:
        return !0;
      default:
        return !1;
    }
  }
  function g(a, b) {
    for (var c = new CTATMessageTank(a, null), d = 0;d < b.length;++d) {
      var e = b[d];
      p.ctatdebug("sendNewTankful() mto[" + d + "] msgType " + e.msgType);
      c.addToMessageTank(e.msgType, e.msg, e.evt, null);
    }
    c.flushMessageTank(null, !0);
  }
  CTATBase.call(this, "CTATMessageTank", b);
  var d = a, f = null, h = null, k = null, l = null, m = new Set;
  m.add("SuccessMessage");
  m.add("BuggyMessage");
  m.add("HighlightMsg");
  m.add("NotDoneMessage");
  var n = b, p = this, f = null, u = /^([^:]+):([0-9]+)$/;
  this.toString = function() {
    p.ctatdebug("toString tank " + h);
    if (!h || 1 > h.length) {
      return "MessageTank empty";
    }
    var a = "";
    h.forEach(function(b) {
      a += b.msgType + ", ";
    });
    return "MessageTank[" + a.substr(0, a.length - 2) + "]";
  };
  this.setTransaction_id = function(a) {
    n = a;
  };
  this.enqueueToolActionToStudent = function(a, b, c, e) {
    p.ctatdebug("Entering enqueueToolActionToStudent(" + a + ", " + b + ", " + c + ", " + e + ")");
    var f = CTATMsgType.INTERFACE_ACTION;
    p.ctatdebug("entering enqueueMessageToStudent()");
    var g = CTATMessage.makeTransactionId();
    a = new CTATSAI(a, b, c);
    b = (new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage(g, a);
    b = CTATMsgType.setProperty(b, CTATTutorMessageBuilder.TRIGGER, "DATA");
    b = CTATMsgType.setProperty(b, CTATTutorMessageBuilder.SUBTYPE, null === e || "undefined" === typeof e || 1 > e.length ? CTATTutorMessageBuilder.TUTOR_PERFORMED : e);
    e = new CTATExampleTracerEvent(d, a, CTATMsgType.DEFAULT_TOOL_ACTOR);
    e.setTransactionID(g);
    p.addToMessageTank(f, b, e, a);
    return g;
  };
  this.addToMessageTank = function(a, b, c, d) {
    p.ctatdebug("Entering addToMessageTank(" + a + ", " + b + ", " + c + ")");
    if (b) {
      h || (h = [], k = {}, l = {});
      var e = {};
      e.msgType = a;
      e.msg = b;
      e.evt = c;
      e.sai = d;
      h.push(e);
      k[a] = k[a] ? k[a] + 1 : 1;
      a = c.getResult();
      c.getHintRequest() && (a = CTATExampleTracerLink.HINT_ACTION);
      l[a] = l[a] ? l[a] + 1 : 1;
      p.ctatdebug("Exiting addToMessageTank() this " + p.toString());
    }
  };
  this.flushMessageTank = function(a, b) {
    p.ctatdebug("Entering flushMessageTank(" + a + ", " + b + ")");
    if (h && !(1 > h.length)) {
      c(a);
      p.ctatdebug("flushMessageTank() after updateProblemSummary; messageTank.length " + h.length + ", transaction_id " + n);
      for (var f = [], m = [], C = 0;C < h.length;++C) {
        var D = h[C];
        if (D.msg) {
          var y = D.msgType, A = D.evt;
          p.ctatdebug("entering processInterfaceVariables() msgType " + y + ", evt " + A);
          y && (p.ctatdebug("entering processInterfaceVariables() et " + d + ", tracer " + (d ? d.getTracer() : null)), y = y.toLowerCase(), 0 !== y.indexOf("correct") && 0 !== y.indexOf("interfaceaction") || d.getTracer().addInterfaceVariablesFromEvent(A));
          if (!(y = e(D))) {
            var y = D, A = m, r = void 0, B = void 0;
            if (!(y && y.sai && (r = y.sai.getAction()) && (B = u.exec(r))) || 3 > B.length || 1 >= B[2]) {
              y = !1;
            } else {
              var q = A.length - 1, q = 0 > q ? null : A[q];
              y.msg = y.msg.replace(r, B[1]);
              q && q.timeout == B[2] ? q.msgTuples.push(y) : A.push({timeout:Number(B[2]), msgTuples:[y]});
              y = !0;
            }
          }
          y || f.push(D.msg);
        }
      }
      p.ctatdebug("flushMessageTank(): msgBundle.length " + f.length + ", delayedMsgsBundle.length " + m.length);
      for (C = 0;C < m.length;++C) {
        D = m[C], p.ctatdebug("processDelayedMsgs() delayedMsgs.timeout " + D.timeout + ", .msgTuples.length " + D.msgTuples.length), setTimeout(g, D.timeout, d, D.msgTuples);
      }
      0 < f.length && (p.ctatdebug("Bottom of flushMessageTank(); to send bundle of length " + f.length + " via " + d), d.sendBundle(f) && (p.ctatdebug("CTATMessageTank.shouldSaveNow() resultTypes " + l + ", msgTypes " + k), (l[CTATExampleTracerLink.CORRECT_ACTION] || l[CTATExampleTracerLink.FIREABLE_BUGGY_ACTION] || k.CorrectAction || k.InterfaceAction || k.UntutoredAction) && d.getOutputStatus().isSendingSavedMsgsForRestore() && (CTATGlobalFunctions.isInstructorMode() ? p.ctatdebug("We're in reviewer mode: we shouldn't save as we go") : 
      d.getProblemStateSaver().saveAsYouGo(a))), p.ctatdebug("Exiting flushMessageTank() #CorrectAction " + k.CorrectAction + ", #InterfaceAction " + k.InterfaceAction + ", #UntutoredAction " + k.UntutoredAction));
      k = h = n = null;
    }
  };
  this.flushDelayedFeedback = function() {
    p.ctatdebug("Entering flushDelayedFeedback()");
    if (null !== f && "undefined" !== typeof f) {
      for (var a in f) {
        if (f.hasOwnProperty(a)) {
          var b = f[a];
          p.ctatdebug("entering sendMessage()");
          b.suppressLogging(null);
          CTAT.ToolTutor.sendToInterface(b, !1);
        }
      }
      for (var c in f) {
        delete f[c];
      }
    }
  };
  this.suppressFeedback = function(a, b) {
    p.ctatdebug("CTATMessageTank.suppressFeedback(" + a.msgType + ", " + b + ")");
    var c = null;
    b == CTATMsgType.SHOW_ALL_FEEDBACK ? (p.ctatdebug("if.1"), c = b) : CTATMsgType.hasTextFeedback(a.msgType) ? (p.ctatdebug("if.2"), b == CTATMsgType.HIDE_ALL_FEEDBACK || b == CTATMsgType.HIDE_BUT_ENFORCE ? (p.ctatdebug("if.2.1"), c = b) : (p.ctatdebug("if.2.2"), (c = CTATMsgType.getProperty(a.msg, CTATMsgType.BUGGY_MSG)) && -1 != c.toLowerCase().indexOf(CTATMsgType.NOT_DONE_MSG.toLowerCase()) ? (p.ctatdebug("if.2.2.1"), c = CTATMsgType.SHOW_ALL_FEEDBACK) : (p.ctatdebug("if.2.2.2"), c = CTATMsgType.HIDE_ALL_FEEDBACK))) : 
    CTATMsgType.isCorrectOrIncorrect(a.msgType) ? (p.ctatdebug("if.3: " + a.msg), CTATMsgType.isDoneMessage(a.msg) ? (p.ctatdebug("if.3.1"), c = CTATMsgType.SHOW_ALL_FEEDBACK) : (p.ctatdebug("if.3.2"), c = b)) : (p.ctatdebug("if.4"), c = CTATMsgType.SHOW_ALL_FEEDBACK);
    p.ctatdebug("CTATMessageTank.suppressFeedback() returning " + c);
    return c;
  };
};
Object.defineProperty(CTATMessageTank, "END_OF_TRANSACTION", {enumerable:!1, configurable:!1, writable:!1, value:"end_of_transaction"});
CTATMessageTank.prototype = Object.create(CTATBase.prototype);
CTATMessageTank.prototype.constructor = CTATMessageTank;
"undefined" !== typeof module && (module.exports = CTATMessageTank);
var CTATGraphParser = function() {
  function a(a) {
    ctatdebug("processEdge()");
    for (var c = new CTATExampleTracerLink(null, null, null), e = f.getElementChildren(a), g, h, k, l, n, p = a = -1, r = CTATMsgType.DEFAULT_ACTOR, B = !1, q = 0;q < e.length;q++) {
      "sourceID" === f.getElementName(e[q]) && (a = parseInt(f.getNodeTextValue(e[q])), c.setPrevNode(a));
      "destID" === f.getElementName(e[q]) && (p = parseInt(f.getNodeTextValue(e[q])), c.setNextNode(p));
      if ("rule" === f.getElementName(e[q])) {
        for (var E = f.getElementChildren(e[q]), F = 0;F < E.length;F++) {
          "text" === f.getElementName(E[F]) && c.addSkillName(f.getNodeTextValue(E[F]).toString());
        }
      }
      if ("actionLabel" === f.getElementName(e[q])) {
        for (c.setIsPreferredLink("false" != f.getElementAttr(e[q], "preferPathMark")), c.setMinTraversalsStr(f.getElementAttr(e[q], "minTraversals")), c.setMaxTraversalsStr(f.getElementAttr(e[q], "maxTraversals")), E = f.getElementChildren(e[q]), F = 0;F < E.length;F++) {
          "uniqueID" === f.getElementName(E[F]) && (n = f.getNodeTextValue(E[F]), c.setUniqueID(parseInt(f.getNodeTextValue(E[F]))));
          "message" === f.getElementName(E[F]) && (l = new CTATMessage(E[F]));
          "actionType" === f.getElementName(E[F]) && c.setActionType(f.getNodeTextValue(E[F]));
          "buggyMessage" === f.getElementName(E[F]) && c.setBuggyMsg(f.getNodeTextValue(E[F]));
          "successMessage" === f.getElementName(E[F]) && c.setSuccessMsg(f.getNodeTextValue(E[F]));
          "hintMessage" === f.getElementName(E[F]) && c.addHint(f.getNodeTextValue(E[F]));
          if ("matchers" === f.getElementName(E[F])) {
            for (var z = f.getElementChildren(E[F]), G = 0;G < z.length;G++) {
              "Selection" === f.getElementName(z[G]) && (g = b(z[G], 0)), "Action" === f.getElementName(z[G]) && (h = b(z[G], 1)), "Input" === f.getElementName(z[G]) && (k = b(z[G], 2)), "Actor" === f.getElementName(z[G]) && (r = f.getNodeTextValue(z[G]), B = (B = f.getElementAttr(z[G], "linkTriggered")) && "false" != B.toLowerCase().trim() ? !0 : !1);
            }
          }
          if ("matcher" === f.getElementName(E[F])) {
            h = E[F];
            g = f.getElementAttr(h, "replacementFormula");
            h = f.getElementChildren(h);
            var G = z = r = k = void 0, K = CTATMsgType.DEFAULT_ACTOR;
            k = new CTATExactMatcher(CTATMatcher.SELECTION, null);
            for (var r = new CTATExactMatcher(CTATMatcher.ACTION, null), I = 0;I < h.length;I++) {
              if ("matcherType" === f.getElementName(h[I]) && ("ExactMatcher" === f.getNodeTextValue(h[I]) && (G = CTATExactMatcher), "RegexMatcher" === f.getNodeTextValue(h[I]) && (G = CTATRegexMatcher), "AnyMatcher" === f.getNodeTextValue(h[I]) && (G = CTATAnyMatcher), "RangeMatcher" === f.getNodeTextValue(h[I]) && (G = CTATRangeMatcher), "WildcardMatcher" === f.getNodeTextValue(h[I]) && (G = CTATWildcardMatcher), "ExpressionMatcher" === f.getNodeTextValue(h[I]) && (G = CTATExpressionMatcher)), 
              "matcherParameter" === f.getElementName(h[I])) {
                var H = f.getElementAttr(h[I], "name");
                "selection" == H && k.setParameter(f.getNodeTextValue(h[I]));
                "action" == H && r.setParameter(f.getNodeTextValue(h[I]));
                "input" == H && (z = z ? z : new G(CTATMatcher.INPUT, null), z.setParameter(f.getNodeTextValue(h[I])));
                "actor" == H && (K = f.getNodeTextValue(h[I]));
                "minimum" == H && (z = z ? z : new G(CTATMatcher.INPUT, null), z.setParameter(f.getNodeTextValue(h[I]), "minimum"));
                "maximum" == H && (z = z ? z : new G(CTATMatcher.INPUT, null), z.setParameter(f.getNodeTextValue(h[I]), "maximum"));
              }
            }
            z.setReplacementFormula(g);
            r = [[k], [r], [z], K];
            g = r[0];
            h = r[1];
            k = r[2];
            r = r[3];
          }
        }
      }
    }
    d.getStartNode() && p == d.getStartNode().getNodeID() && console.log("***WARNING*** edge " + n + " destination is graph startNode " + d.getStartNode());
    n = new CTATVectorMatcher(g, h, k, r);
    n.setDefaultSAI(l.getSAI());
    n.setCaseInsensitive(m);
    n.setLinkTriggered(B);
    c.setMatcher(n);
    ctatdebug("GraphParser.processEdge() " + a + "->" + p + ", edge " + c);
    d.getNode(a).addOutLink(c);
    d.checkForDoneState(c);
    return c;
  }
  function b(a, b) {
    e.ctatdebug("processMatchers()");
    for (var c = f.getElementChildren(a), d = [], g = 0;g < c.length;g++) {
      if ("matcher" === f.getElementName(c[g])) {
        for (var h = null, k = f.getElementAttr(c[g], "replacementFormula"), l = f.getElementChildren(c[g]), m = 0;m < l.length;m++) {
          if ("matcherType" === f.getElementName(l[m])) {
            switch(h = f.getNodeTextValue(l[m]), e.ctatdebug("CTATGraphParser.processMatchers() matcherType[" + m + "] = " + h), h) {
              case "ExactMatcher":
                h = new CTATExactMatcher(b, null);
                break;
              case "RegexMatcher":
                h = new CTATRegexMatcher(b, null);
                break;
              case "AnyMatcher":
                h = new CTATAnyMatcher(b, null);
                break;
              case "RangeMatcher":
                h = new CTATRangeMatcher(b, null);
                break;
              case "WildcardMatcher":
                h = new CTATWildcardMatcher(b, null);
                break;
              case "ExpressionMatcher":
                h = new CTATExpressionMatcher(b, null);
                break;
              default:
                console.log("CTATGraphParser.processMatchers() unknown matcherType[" + m + "] = " + h + "; using CTATExactMatcher"), h = new CTATExactMatcher(b, null);
            }
          }
          if ("matcherParameter" === f.getElementName(l[m])) {
            var n = f.getElementAttr(l[m], "name");
            "single" === n ? h.setParameter(f.getNodeTextValue(l[m])) : "minimum" === n ? h.setParameter(f.getNodeTextValue(l[m]), "minimum") : "maximum" === n ? h.setParameter(f.getNodeTextValue(l[m]), "maximum") : h.setParameter(l[m], n, f);
          }
        }
        h && h.setReplacementFormula(k);
        d.push(h);
      }
    }
    return d;
  }
  function c(a, b) {
    var d = new Set;
    if ("group" !== f.getElementName(a)) {
      return d;
    }
    var e = f.getElementAttr(a, "name");
    ctatdebug("readGroupFromXML group name: " + e);
    var g = "true" === f.getElementAttr(a, "ordered");
    ctatdebug("readGroupFromXML group isOrdered typeof: " + typeof g);
    ctatdebug("readGroupFromXML group isOrdered: " + g);
    for (var h = function(a) {
      d.add(a);
    }, k = f.getElementChildren(a), m = 0;m < k.length;m++) {
      if ("link" === f.getElementName(k[m])) {
        var n = Number(f.getElementAttr(k[m], "id")), p = b[n];
        if (null !== p || void 0 !== p) {
          ctatdebug("Added link ID : " + n), d.add(p);
        }
      }
      "group" === f.getElementName(k[m]) && (ctatdebug("encountered a subgroup"), c(k[m], b).forEach(h));
    }
    l.addGroup(e, g, d);
    l.setGroupReenterable(l.getGroupByName(e), !0);
    return d;
  }
  CTATBase.call(this, "CTATGraphParser", "__undefined__");
  var e = this, g, d, f = new CTATXML, h = null, k = [];
  new XMLSerializer;
  var l, m = !0, n = !0, p = [];
  this.getLockWidget = function() {
    return n;
  };
  this.parseGraph = function(b, e) {
    ctatdebug("parseBRD()");
    var v = 0, w = f.getElementAttr(b, "startStateNodeName"), x = "true" === f.getElementAttr(b, "unordered");
    m = "false" != String(f.getElementAttr(b, "caseInsensitive")).toLowerCase();
    n = f.getElementAttr(b, "lockWidget");
    var C = new CTATVariableTable;
    d = new CTATExampleTracerGraph(x, !1, C);
    var D = f.getElementChildren(b), C = f.getElementAttr(b, "suppressStudentFeedback");
    if (null === C || void 0 === C) {
      C = CTATMsgType.SHOW_ALL_FEEDBACK;
    }
    d.setFeedbackPolicy(C);
    e.setFeedbackSuppressed(C);
    C = f.getElementAttr(b, "highlightRightSelection");
    e.setHighlightRightSelection("false" != C);
    var y = f.getElementAttr(b, "confirmDone");
    "true" !== y && "false" !== y && (y = d.getFeedbackPolicy() === CTATMsgType.HIDE_ALL_FEEDBACK ? "true" : "false");
    e.setHintPolicy(f.getElementAttr(b, "hintPolicy"));
    e.setOutOfOrderMessage(f.getElementAttr(b, "outOfOrderMessage"));
    for (var A = null, r = 0;r < D.length;r++) {
      switch(f.getElementName(D[r])) {
        case "startNodeMessages":
          k = f.getElementChildren(D[r]);
          break;
        case "node":
          v++;
          var B;
          B = D[r];
          ctatdebug("processNode(" + B + ")");
          var q = f.getElementChildren(B), E = -1;
          B = "";
          for (var F = 0;F < q.length;F++) {
            switch(f.getElementName(q[F])) {
              case "uniqueID":
                E = parseInt(f.getNodeTextValue(q[F]));
                break;
              case "text":
                B = f.getNodeTextValue(q[F]);
            }
          }
          q = new CTATExampleTracerNode(E, new Set);
          "" !== B && q.setNodeName(B);
          B = q;
          d.addNode(B);
          1 == v && (d.setStartNode(B), d.setStudentStartsHereNode(B));
          B.getNodeName() == w && d.setStudentStartsHereNode(B);
          break;
        case "edge":
          d.addLink(a(D[r]));
          break;
        case "EdgesGroups":
          A = D[r];
          break;
        case "productionRule":
          var z = D[r];
          ctatdebug("processSkill()");
          B = void 0;
          for (var F = "unknown", q = void 0, E = null, z = f.getElementChildren(z), G = 0;G < z.length;G++) {
            var K = f.getElementName(z[G]);
            "ruleName" === K && (B = f.getNodeTextValue(z[G]), ctatdebug("ruleName=" + B));
            "productionSet" === K && (F = f.getNodeTextValue(z[G]), ctatdebug("productionSet=" + F));
            "label" === K && (q = f.getNodeTextValue(z[G]), ctatdebug("label=" + F));
            "description" === K && (E = f.getNodeTextValue(z[G]), ctatdebug("description=" + F));
          }
          F = new CTATExampleTracerSkill(F, B, CTATExampleTracerSkill.DEFAULT_P_GUESS, CTATExampleTracerSkill.DEFAULT_P_KNOWN, CTATExampleTracerSkill.DEFAULT_P_SLIP, CTATExampleTracerSkill.DEFAULT_P_LEARN);
          null != q ? F.setLabel(q) : F.setLabel(B);
          null != E ? F.setDescription(E) : F.setDescription(B);
          p.push(F);
      }
    }
    if (A) {
      v = f.getElementAttr(A, "ordered");
      if (null === v || "undefined" == typeof isordered) {
        v = !x;
      }
      ctatdebug("parseGraph() value of isOrdered = " + v);
      ctatdebug("parseGraph() value of isUnordered = " + x);
      ctatdebug("parseGraph() typeof isOrdered: " + typeof v);
      ctatdebug("parseGraph()typeof isUnordered: " + typeof x);
      w = A;
      D = v;
      ctatdebug("processGroup()");
      l = d.getGroupModel();
      v = l.createIdToLinkMap();
      l.setGroupOrdered(l.getTopLevelGroup(), D);
      ctatdebug("processGroup() name of group: " + l.getGroupName(l.getTopLevelGroup()));
      ctatdebug("processGroup() group isOrdered?: " + l.isGroupOrdered(l.getTopLevelGroup()));
      ctatdebug("processGroup() order of group: isOrdered= " + D);
      ctatdebug("processGroup() order of group: isOrdered typeof= " + typeof D);
      w = f.getElementChildren(w);
      for (D = 0;D < w.length;D++) {
        switch(f.getElementName(w[D])) {
          case "group":
            c(w[D], v);
            break;
          case "outOfOrderMessage":
            l.getTopLevelGroup().setDefaultBuggyMsg(f.getNodeTextValue(w[D]));
        }
      }
    }
    if (null == e.getSkillBarVector() || "" == e.getSkillBarVector()) {
      ctatdebug("No existing skills. Add skills from BRD."), e.addGraphSkills(p);
    }
    h = (new CTATTutorMessageBuilder).createStateGraphMessage(m, x, n, e.isFeedbackSuppressed(), C, y, e.getSkillBarVector());
    d.redoLinkDepths();
    g = d.getExampleTracer();
    g.resetTracer();
    d.forDebugging();
    ctatdebug("Graph loaded.");
    return {gr:d, tracer:g, ssm:k, sgMsg:h};
  };
};
CTATGraphParser.prototype = Object.create(CTATBase.prototype);
CTATGraphParser.prototype.constructor = CTATGraphParser;
"undefined" !== typeof module && (module.exports = CTATGraphParser);
var CTATExampleTracer = function() {
  function a() {
    m.ctatdebug("workTheQueue() working " + z + ", workQueue.length " + F.length + ", restoreQueue.length " + E.length);
    if (0 == z) {
      for (;0 != (z = 0 < F.length | (0 < E.length) << 1);) {
        var a = null, c = !1;
        0 < E.length ? (a = E.shift(), c = !0) : a = F.shift();
        if (!b(a, c)) {
          m.ctatdebug("workTheQueue() suspending workQueue.length " + F.length + ", restoreQueue.length " + E.length);
          m.setWorking(c ? 1 : 0, !0);
          break;
        }
        m.ctatdebug("workTheQueue() bottom workQueue.length " + F.length + ", restoreQueue.length " + E.length);
      }
    }
  }
  function b(a, b) {
    m.lastMessageAsString = a;
    var d = m.lastMessageAsXML = (new CTATXML).parseXML(a), f = m.lastMessage = new CTATMessage(d), h = f.getMessageType();
    m.ctatdebug("CTATExampleTracer.handleMessageFromInterface(msgType " + h + ")");
    switch(h) {
      case CTATMsgType.SET_PREFERENCES:
        return c(a, f, v, d), !1;
      case CTATMsgType.INTERFACE_IDENTIFICATION:
        return !0;
      case CTATMsgType.UNTUTORED_ACTION:
        return b && m.sendBundle([a]), e(a, f, v, d), !0;
      case CTATMsgType.INTERFACE_ACTION:
        return b && m.sendBundle([a]), g(a, f, v, d), !0;
      case CTATMsgType.PROBLEM_SUMMARY_REQUEST:
        return setTimeout(function(a) {
          a = m.getProblemSummary();
          m.ctatdebug("CTATExampleTracer.ProblemSummaryRequest getProblemSummary() " + m.getProblemSummary());
          var c = "<message><verb>NotePropertySet</verb><properties><MessageType>" + CTATMsgType.PROBLEM_SUMMARY_RESPONSE + "</MessageType>", c = c + "<cmi.core.lesson_status>completed</cmi.core.lesson_status><cmi.core.score.raw>50</cmi.core.score.raw>", c = c + "<cmi.core.exit>suspend</cmi.core.exit>", c = c + "<cmi.core.session_time>0000:00:30.00</cmi.core.session_time>", c = c + ("<ProblemSummary>" + a.toXML(!0) + "</ProblemSummary>"), c = c + "<end_of_transaction>true</end_of_transaction>", c = 
          c + "</properties></message>", d = [];
          d.push(c);
          m.sendBundle(d);
          q.transition(CTATMsgType.PROBLEM_SUMMARY_RESPONSE, a.getCompletionStatus());
          m.ctatdebug("CTATExampleTracer.handleProblemSummaryRequest() sent result '" + c + "';");
          m.setWorking(b ? 1 : 0, !1);
        }, 4E3), !1;
      case CTATMsgType.START_STATE_END:
        return q.transition(CTATMsgType.START_STATE_END), !0;
      case CTATMsgType.PROBLEM_RESTORE_END:
        return l(), !0;
      default:
        return console.log("CTATExampleTracer.handleMessageFromInterface(restoring " + b + ") " + (b ? "sending" : "unprocessed") + " message, type " + h + "\n  " + a), b && m.sendBundle([a]), !0;
    }
  }
  function c(a, b, c, d) {
    m.ctatdebug("SetPreferences received: " + a);
    G = !1;
    A = b.getProperty("problem_name");
    m.ctatdebug("SetPreferences.problem_name = " + A);
    a = c.getElementChildren(c.getElementChildren(d)[1]);
    for (b = 0;b < a.length;b++) {
      if (d = c.getElementName(a[b]), m.ctatdebug("SetPreferences eltName " + d), d) {
        switch(d.toLowerCase()) {
          case "question_file":
            n = c.getNodeTextValue(a[b]);
            break;
          case "skills":
            m.ctatdebug(" parseSkills(" + a[b] + ")");
            d = [];
            for (var e = v.getElementChildren(a[b]), f = 0;f < e.length;f++) {
              var g = v.getElementName(e[f]);
              if (g && "skill" == g.toLowerCase()) {
                var h = v.getElementAttr(e[f], "name");
                if (h && "" != h.trim()) {
                  var g = v.getElementAttr(e[f], "label"), k = v.getElementAttr(e[f], "pSlip"), l = v.getElementAttr(e[f], "description"), p = v.getElementAttr(e[f], "pKnown"), t = v.getElementAttr(e[f], "category"), u = v.getElementAttr(e[f], "pLearn"), w = v.getElementAttr(e[f], "pGuess"), h = new CTATExampleTracerSkill(t, h, w, p, k, u);
                  h.setLabel(g);
                  h.setDescription(l);
                  d.push(h);
                }
              }
            }
            m.getProblemSummary().setSkills(new CTATSkills(d));
            break;
          case "problem_state_status":
            q.transition(CTATMsgType.SET_PREFERENCES, c.getNodeTextValue(a[b]));
            B || (B = new ProblemStateRestorer(m));
            m.ctatdebug("SetPreferences problemStateRestorer " + B);
            break;
          case "curriculum_service_url":
            r.setCurriculumServiceUrl(c.getNodeTextValue(a[b]));
            break;
          case "restore_problem_url":
            B || (B = new ProblemStateRestorer(m));
            m.ctatdebug("SetPreferences problemStateRestorer " + B);
            B.setRestoreProblemUrl(c.getNodeTextValue(a[b]));
            break;
          case "session_id":
            K = c.getNodeTextValue(a[b]);
            break;
          case "authenticity_token":
            r.setAuthenticityToken(c.getNodeTextValue(a[b]));
        }
      }
    }
    m.ctatdebug("questionFile " + n + ", outputStatus " + q + ", problemStateRestorer " + B);
    a = n;
    m.ctatdebug("retrieveBRD (" + a + ")");
    I.retrieveXMLFile(a, c, m);
    B && B.retrieveMessages(q);
  }
  function e(a, b, c, d) {
    b = b.getTransactionID();
    m.ctatdebug("UntutoredAction (" + a + "), getTransactionID " + b);
    r.appendToProblemState(a, m.getOutputStatus(), !1);
    if (!G) {
      return !1;
    }
    m.setVariablesFromSAI(d, c);
    return !0;
  }
  function g(a, b, c, d) {
    m.ctatdebug("Interface action received.");
    c = b.getTransactionID();
    if (!G) {
      return !1;
    }
    m.messageTank = new CTATMessageTank(m, c);
    m.ctatdebug("MessageTank " + m.messageTank);
    m.ctatdebug("InterfaceAction (" + a + "), getTransactionID " + c);
    d = b.getSelectionArray().slice(0);
    var e = b.getActionArray().slice(0);
    m.ctatdebug("selectionArray " + d + ", message.getSelectionArray() " + b.getSelectionArray());
    !d[0] || "hint" != d[0].toLowerCase() && "help" != d[0].toLowerCase() ? (m.ctatdebug("calling doNewExampleTrace(null, " + b.getSAI() + ") sai.selectionArray " + b.getSAI().getSelectionArray() + " msg.selectionArray " + b.getSelectionArray()), k(null, b.getSAI(), "student", !0, c, a)) : (m.ctatdebug("handleInterfaceAction() hint request: hintPolicy " + x + ", errorSAI " + w), x === CTATHintPolicyEnum.HINTS_UNBIASED ? (1 < d.length && (d[1] = ""), 1 < e.length && (e[1] = "")) : x !== CTATHintPolicyEnum.HINTS_BIASED_BY_CURRENT_SELECTION_ONLY && 
    (x === CTATHintPolicyEnum.HINTS_BIASED_BY_PRIOR_ERROR_ONLY ? w && w.getSelection() ? (d.splice(1, 0, w.getSelection()), e.splice(1, 0, "PreviousFocus")) : (d[1] = "", e[1] = "") : x === CTATHintPolicyEnum.HINTS_BIASED_BY_ALL && w && w.getSelection() && (d.splice(1, 0, w.getSelection()), e[1] = CTATMsgType.PREVIOUS_FOCUS.toString())), m.startSkillTransaction(), a = [], d = p.doHint(d, e, b.getInputArray(), "student", a, !0), b = a[0], a = b.getReportableHints(), b.setStepID(d.getUniqueID()), m.updateSkills(CTATExampleTracerSkill.HINT, 
    d.getSkillNames(), d.getUniqueID()), m.ctatdebug("Before building hint message: tutorSAI " + b.getTutorSAI() + ", hints " + a + ", edge # " + d.getUniqueID()), e = (new CTATTutorMessageBuilder).createHintMessage(a, b.getTutorSAI(), d.getUniqueID(), c), m.messageTank.addToMessageTank(CTATMsgType.SHOW_HINTS_MESSAGE, e, b, null), c = (new CTATTutorMessageBuilder).createAssociatedRulesMessageForHint(d, a, b.getTutorSAI(), m.getSkillBarVector(), c), m.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, 
    c, b, null), c = m.getProblemSummary(b.getReportableInterpretation()), m.messageTank.flushMessageTank(c, !0), m.ctatdebug("handleInterfaceAction() sent hint result " + b), w = null);
    return !0;
  }
  function d(a, b, c) {
    var d = {tutorAdvice:null, msg:null, msgType:null};
    if (a.getReportableLink()) {
      return d.tutorAdvice = a.getSuccessOrBuggyMsg(), d.tutorAdvice && d.tutorAdvice.trim() ? (d.msg = c.createBuggyMessage(a.getTransactionID(), d.tutorAdvice), d.msgType = "BuggyMessage") : d.tutorAdvice = null, d;
    }
    m.ctatdebug("CTATET.createBuggyMessage() past getReportableLink()");
    if (a.isDoneStepFailed()) {
      return d.tutorAdvice = CTATMsgType.NOT_DONE_MSG, d.msg = c.createBuggyMessage(a.getTransactionID(), d.tutorAdvice), d.msgType = "BuggyMessage", d;
    }
    m.ctatdebug("CTATET.createBuggyMessage() past isDoneStepFailed()");
    var e = b && b.getTutorSAI() ? b.getTutorSAI().getSelection() : null, e = e && "" !== e.trim() ? e : null, f = a.getStudentSAI() ? a.getStudentSAI().getSelection() : null, f = f && "" !== f.trim() ? f : null;
    m.ctatdebug("CTATET.createBuggyMessage() past hintSelection0 " + e + ", studentSelection0 " + f);
    if (a.getResult() == CTATExampleTracerLink.NO_MODEL && a.isOutOfOrder() && e && e != f) {
      return m.ctatdebug("CTATET.createBuggyMessage() to create out of order"), m.isHighlightRightSelection() ? (d.tutorAdvice = m.getOutOfOrderMessage(), d.msg = c.createHighlightWidgetMessage(e, b.getTutorSAI().getAction(), d.tutorAdvice, a.getTransactionID()), d.msgType = "HighlightMsg", m.ctatdebug("createBuggyMessage() out of order with highlight; rtn: " + d)) : (d.tutorAdvice = CTATGlobals.languageManager.getString("OUTOFORDER"), d.msg = c.createBuggyMessage(a.getTransactionID, d.tutorAdvice), 
      d.msgType = "BuggyMessage", m.ctatdebug("createBuggyMessage() out of order without highlight; rtn: " + d)), d;
    }
    if (b = t.getDefaultBuggyMsg()) {
      return d.tutorAdvice = b, d.msg = c.createBuggyMessage(a.getTransactionID, d.tutorAdvice), d.msgType = "BuggyMessage", m.ctatdebug("createBuggyMessage() default buggy msg: " + d), d;
    }
    m.ctatdebug("createBuggyMessage() no buggy msg: " + d);
    return d;
  }
  function f(a, b, c, d) {
    m.ctatdebug("checkForTutorAction(" + a + ", " + b + ", " + c + ", " + d + ")");
    var e = [];
    e[0] = h(t.getNode(a), !0);
    e[1] = h(t.getNode(b), !1);
    m.ctatdebug("checkForTutorAction() links[0] " + e[0] + ", links[1] " + e[1] + ";");
    a = 0;
    if (e[0] === e[1]) {
      e[1] = null;
    } else {
      if (null === e[0] || "undefined" === typeof e[0]) {
        a = 1;
      }
    }
    b = null;
    m.messageTank || (m.messageTank = new CTATMessageTank(m, null));
    for (;a < e.length && null !== e[a] && "undefined" !== typeof e[a];++a) {
      if (null == c || "undefined" == typeof c) {
        b = k(e[a], e[a].getDefaultSAI(), e[a].getActor(), !0, null);
      } else {
        b = e[a].getEvaluatedInput(c, d.getReportableVariableTable());
        var f = e[a].getDefaultSAI().clone();
        f.setInput(b);
        b = k(e[a], f, e[a].getActor(), !0, null);
      }
    }
    m.ctatdebug("checkForTutorAction() returning " + b + ";");
    return b;
  }
  function h(a, b) {
    if (null === a || "undefined" === typeof a || 1 !== a.getOutDegree()) {
      return null;
    }
    var c = null;
    a.getOutLinks().forEach(function(a) {
      null === c && a.isTutorPerformed(b) && 0 < a.getMaxTraversals() && (c = a);
    });
    return c;
  }
  function k(a, b, c, e, g, h) {
    m.ctatdebug("doNewExampleTrace (link " + a + ", sai " + b + ", actor " + c + ", doTutorPerformedSteps " + e + ", transactionID " + g + ", origMsgTxt " + h);
    m.startSkillTransaction();
    var k = new CTATExampleTracerEvent(m, b, c);
    a && k.addPreloadedLinkMatch(a);
    var l = p.evaluate(k);
    m.ctatdebug("Evaluate returned : " + l + ", given link " + a + ", result " + k);
    a ? (m.ctatdebug("result.getTutorSelection() " + k.getTutorSelection()), m.ctatdebug("result.getTutorAction() " + k.getTutorAction()), m.ctatdebug("result.getTutorInput() " + k.getTutorInput()), m.ctatdebug("typeof(messageTank) " + typeof messageTank), g = k.getTutorSelection(), h = k.getTutorAction(), l = k.getTutorInput(), (g = m.messageTank.enqueueToolActionToStudent(g, h, l, CTATTutorMessageBuilder.TUTOR_PERFORMED)) && m.messageTank.setTransaction_id(g)) : k.getResult() != CTATExampleTracerLink.CORRECT_ACTION && 
    k.getResult() != CTATExampleTracerLink.FIREABLE_BUGGY_ACTION || r.appendToProblemState(h, m.getOutputStatus(), !1);
    k.setTransactionID(g);
    var n;
    m.ctatdebug("finishNewExampleTrace(" + k + ", " + b + ", " + c + ", " + e + ")");
    h = k.getStudentSAI();
    var l = k.getTutorSAI(), q = k.getTransactionID(), t = new CTATTutorMessageBuilder, u = [];
    null !== k.getReportableLink() && "undefined" !== typeof k.getReportableLink() ? u[0] = k.getReportableLink() : u[0] = null;
    var u = u[0], v = null;
    if (k.isSolverResult()) {
      k.getResult();
    } else {
      if (k.getResult() === CTATExampleTracerLink.CORRECT_ACTION) {
        n = u ? "" + u.getUniqueID() : "", k.setStepID(n), CTATMsgType.UNGRADED_TOOL_ACTOR.toUpperCase() != c.toUpperCase() && m.messageTank.addToMessageTank(CTATMsgType.CORRECT_ACTION, t.createCorrectActionMessage(q, l), k, l), null !== u && "undefined" !== typeof u && m.updateSkills(CTATExampleTracerSkill.CORRECT, u.getSkillNames(), u.getUniqueID()), n = k.getSuccessOrBuggyMsg(), m.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, t.createAssociatedRulesMessageForAction(k.getResult(), 
        l, h, m.getSkillBarVector(), u.getUniqueID(), q, n), k, l), m.ctatdebug("finishNewExampleTrace() successMsg " + n), n && m.messageTank.addToMessageTank("SuccessMessage", t.createSuccessMessage(q, n), k, null), w = null, e && (v = f(u ? u.getNextNode() : null, p.findCurrentState(!1, !1), m.lastMessage ? m.lastMessage.getSAI() : null, k)) && (k = v);
      } else {
        m.messageTank.addToMessageTank(CTATMsgType.INCORRECT_ACTION, t.createInCorrectActionMessage(q, h), k, null);
        m.ctatdebug("about to do silent traceForHint(" + h + "), selectionArray " + h.getSelectionArray());
        var x = m.lastSilentHintResult = new CTATExampleTracerEvent(m, h, c);
        x.setHintRequest(!0);
        v = p.traceForHint(x);
        m.ctatdebug("silent hint result: " + x + "; hintLink " + v);
        v || (v = p.getBestNextLink(!1, x), m.ctatdebug("getBestNextLink result: " + x + "; hintLink " + v));
        l = x ? x.getTutorSAI() : null;
        v && (n = "" + v.getUniqueID(), k.setStepID(n));
        x = d(k, x, t);
        m.ctatdebug("createBuggyMessage() tutorAdvice: " + x.tutorAdvice + ";\n  msg " + x.msg);
        m.updateSkills(CTATExampleTracerSkill.INCORRECT, v.getSkillNames(), v.getUniqueID());
        m.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, t.createAssociatedRulesMessageForAction(k.getResult(), l && l.getSelection() ? l : h, h, m.getSkillBarVector(), n, q, x.tutorAdvice), k, null);
        x.msg && m.messageTank.addToMessageTank(x.msgType, x.msg, k);
        w = h;
        e && CTATExampleTracerLink.FIREABLE_BUGGY_ACTION == k.getResult() && (v = f(u ? u.getNextNode() : null, p.findCurrentState(!1, !1), m.lastMessage ? m.lastMessage.getSAI() : null, k)) && (k = v);
      }
    }
    m.lastResult = k;
    n = m.getProblemSummary(k.getReportableInterpretation());
    m.ctatdebug("finishNewExampleTrace() to flushMessageTank");
    m.messageTank.flushMessageTank(n, !0);
    m.ctatdebug("finishNewExampleTrace() sent result " + k.getResult() + ", studentSAI " + h);
    n = k;
    m.ctatdebug("doNewExampleTrace(" + a + ", " + b + ", " + c + ", " + e + ", " + g + ") returns " + n);
    return n;
  }
  function l() {
    q.transition(CTATMsgType.PROBLEM_RESTORE_END);
    var a = m.getSkillBarVector(), b = [], c = new CTATTutorMessageBuilder;
    b.push(c.createMessage(CTATMsgType.START_STATE_END, null));
    b.push(c.createMessage(CTATMsgType.PROBLEM_RESTORE_END, a ? {Skills:a} : null));
    m.sendBundle(b);
  }
  CTATBase.call(this, "CTATExampleTracer", "tracer");
  var m = this, n = null, p, u, t, v = new CTATXML;
  new XMLSerializer;
  var w = null, x, C = !0, D = !1, y = null, A = null, r = new ProblemStateSaver(m);
  r.setAuthenticityToken(CTATCommLibrary.getAuthenticityToken());
  var B = null, q = new CTATProblemStateStatus, E = [], F = [], z = 0, G = !1, K = "";
  m.ctatdebug("CTATExampleTracer constructor outputStatus=" + q);
  this.messageTank = this.lastSilentHintResult = this.lastResult = this.lastMessage = this.lastMessageAsXML = this.lastMessageAsString = null;
  var I = new CTATCommLibrary;
  this.receiveFromInterface = function(b) {
    m.ctatdebug("CTATExampleTracer.receiveFromInterface(" + b + ")");
    F.push(b);
    a();
  };
  this.setVariablesFromSAI = function(a, b) {
    var c = CTATMsgType.getSAIArraysFromElement(a, b);
    m.getTracer() && m.getTracer().addInterfaceVariables(c.selection, c.input);
  };
  this.traceLinks = function(a) {
    for (var b = [], c = 0;c < a.length && null != a[c];++c) {
      m.messageTank = new CTATMessageTank(m, null), b.push(k(a[c], a[c].getDefaultSAI(), a[c].getActor(), !1, null)), m.ctatdebug("traceLinks[" + c + "] result " + b[c]);
    }
    return b;
  };
  this.enqueueForRestore = function(a) {
    m.ctatdebug("enqueueForRestore: got " + a.length + " message elements");
    E = E.concat(a);
    a = (new CTATTutorMessageBuilder).createMessage(CTATMsgType.PROBLEM_RESTORE_END, null);
    E.push(a);
    m.setWorking(1, !1);
  };
  this.setWorking = function(b, c) {
    c ? z |= 1 << b : (z &= -65537 >> 16 - b, a());
  };
  this.processXML = function(a) {
    m.ctatdebug("processXML ()");
    if (null != a) {
      m.ctatdebug("No of children" + v.getElementChildren(a).length);
      var b = new CTATGraphParser, c = b.parseGraph(a, m);
      t = c.gr;
      p = c.tracer;
      a = c.ssm;
      var d = c.sgMsg;
      m.ctatdebug("sendStartStateMessages() nMsgs " + a.length + ", outputStatus " + q);
      for (var c = [], e = new XMLSerializer, g = -1, h = 0;h < a.length;h++) {
        if ("message" == v.getElementName(a[h])) {
          var k = e.serializeToString(a[h]), l = CTATMsgType.getMessageType(k);
          CTATMsgType.UNTUTORED_ACTION != l && CTATMsgType.INTERFACE_ACTION != l || m.setVariablesFromSAI(a[h], v);
          q.isIncomplete() && CTATMsgType.START_STATE_END == l ? g = 0 : c.push(k);
        }
      }
      d = c.unshift(d);
      e = new CTATTutorMessageBuilder;
      c.splice(d - g, 0, e.createLockWidgetMsg(b.getLockWidget()));
      m.ctatdebug("sendStartStateMessages(): " + a.length + " elts, " + c.length + " strings, " + q);
      m.sendBundle(c);
      b = [];
      a = t.getStartNode();
      c = t.getStudentStartsHereNode();
      null != a && null != c && a.getNodeID() != c.getNodeID() && (b = t.getBestSubpath(a, c), m.ctatdebug("advanceToStudentStartsHere() path " + b), b = b.getSortedLinks(), b = m.traceLinks(b), m.ctatdebug("advanceToStudentStartsHere() results " + b));
      c = a = null;
      0 < b.length && (c = b[b.length - 1], b = c.getReportableLink(), null != b && (a = b.getNextNode()));
      m.ctatdebug("advanceToStudentStartsHere() to check for TPA " + a + ", " + c);
      f(a, p.findCurrentState(!1, !1), null, c);
      G = !0;
    }
    m.setWorking(0, !1);
  };
  this.addGraphSkills = function(a) {
    m.ctatdebug("adding graph skills: " + a.length);
    0 < a.length && (a = new CTATSkills(a), a.setExternallyDefined(!1), m.getProblemSummary().setSkills(a));
  };
  this.sendBundle = function(a) {
    m.ctatdebug("sending bundle #msgs = " + a.length + ", outputStatus " + q);
    for (var b = 0, c = 0;c < a.length;c++) {
      m.ctatdebug("Sending message #" + c);
      var d = a[c];
      0 >= c && (d = '<?xml version="1.0" encoding="UTF-8"?>' + d);
      r.forwardToInterface(d, c >= a.length - 1, q) && ++b;
    }
    return 0 < b;
  };
  this.setHintPolicy = function(a) {
    x = CTATHintPolicyEnum.lookup(a);
  };
  this.isHighlightRightSelection = function() {
    return C;
  };
  this.setHighlightRightSelection = function(a) {
    C = a;
  };
  this.updateSkills = function(a, b, c) {
    var d = [];
    m.ctatdebug("in updateSkills(" + b + ") with step ID = " + c + ", transaction result = " + a);
    var e = m.getProblemSummary().getSkills();
    if (null === e || "undefined" === typeof e) {
      return d;
    }
    b.forEach(function(b) {
      b = e.updateSkill(a, b, c);
      null !== b && "undefined" !== typeof b && d.push(b);
    });
    return d;
  };
  this.getSessionID = function() {
    return K;
  };
  this.getProblemSummary = function(a) {
    m.ctatdebug("Entering getProblemSummary() problemSummary " + y);
    if (null === y || "undefined" === typeof y) {
      var b = m.getProblemName();
      if (null === b || "undefined" === typeof b || 1 > b.length) {
        b = "NoProblemDefined";
      }
      y = new CTATProblemSummary(b, null, m.isFeedbackSuppressed());
    }
    a && y.setRequiredSteps(a.countStepsForScore(t));
    return y;
  };
  this.getProblemName = function() {
    return A;
  };
  this.isFeedbackSuppressed = function() {
    return D;
  };
  this.setFeedbackSuppressed = function(a) {
    D = "false" === a ? !1 : "true" === a ? !0 : a === CTATMsgType.SHOW_ALL_FEEDBACK ? !1 : a === CTATMsgType.HIDE_ALL_FEEDBACK ? !0 : a === CTATMsgType.HIDE_BUT_ENFORCE ? !0 : a === CTATMsgType.HIDE_BUT_COMPLETE ? !0 : a === CTATMsgType.DELAY_FEEDBACK ? !0 : !1;
    m.ctatdebug("setFeedbackSuppressed(" + a + "): " + D);
  };
  this.getSkillBarVector = function() {
    var a = m.getProblemSummary().getSkills();
    return null === a || "undefined" === typeof a ? null : a.getSkillBarVector(!0, !0);
  };
  this.startSkillTransaction = function() {
    var a = m.getProblemSummary().getSkills();
    a && a.startTransaction();
  };
  this.getProblemStateSaver = function() {
    return r;
  };
  this.getOutputStatus = function() {
    return q;
  };
  this.setOutputStatus = function(a) {
    var b = q.getStatus();
    m.ctatdebug("setOutputStatus() old " + b + ", new " + a);
    CTATProblemStateStatus[a] ? q.setStatus(CTATProblemStateStatus[a]) : (console.error("CTATExampleTracer.setOutputStatus() unexpected argument " + a), q.setStatus(CTATProblemStateStatus.empty));
  };
  this.getFeedbackPolicy = function() {
    return t ? t.getFeedbackPolicy() : CTATMsgType.SHOW_ALL_FEEDBACK;
  };
  this.getGraph = function() {
    return t;
  };
  this.getTracer = function() {
    return p;
  };
  this.getOutOfOrderMessage = function() {
    return u ? u : CTATMsgType.DEFAULT_OUT_OF_ORDER_MESSAGE;
  };
  this.setOutOfOrderMessage = function(a) {
    u = a;
  };
  this.getQuestionFile = function(a) {
    if (!n || a) {
      return n;
    }
    a = n.split("/");
    return a[a.length - 1];
  };
};
CTATExampleTracer.prototype = Object.create(CTATBase.prototype);
CTATExampleTracer.prototype.constructor = CTATExampleTracer;
"undefined" !== typeof module && (module.exports = CTATExampleTracer);

